{"version":3,"file":"index.es.js","sources":["../src/index.ts"],"sourcesContent":["/* Copyright 2021, Milkdown by Mirone. */\nimport {\n    createSlice,\n    Ctx,\n    EditorViewReady,\n    InitReady,\n    MilkdownPlugin,\n    prosePluginsCtx,\n    serializerCtx,\n    SerializerReady,\n} from '@milkdown/core';\nimport { Node as ProseNode, Plugin, PluginKey } from '@milkdown/prose';\n\nclass ListenerManager {\n    private beforeMountedListeners: Array<(ctx: Ctx) => void> = [];\n    private mountedListeners: Array<(ctx: Ctx) => void> = [];\n    private updatedListeners: Array<(ctx: Ctx, doc: ProseNode, prevDoc: ProseNode | null) => void> = [];\n    private markdownUpdatedListeners: Array<(ctx: Ctx, markdown: string, prevMarkdown: string | null) => void> = [];\n    private blurListeners: Array<(ctx: Ctx) => void> = [];\n    private focusListeners: Array<(ctx: Ctx) => void> = [];\n    private destroyListeners: Array<(ctx: Ctx) => void> = [];\n\n    get listeners() {\n        return {\n            beforeMounted: this.beforeMountedListeners,\n            mounted: this.mountedListeners,\n            updated: this.updatedListeners,\n            markdownUpdated: this.markdownUpdatedListeners,\n            blur: this.blurListeners,\n            focus: this.focusListeners,\n            destroy: this.destroyListeners,\n        };\n    }\n\n    beforeMount = (fn: (ctx: Ctx) => void) => {\n        this.beforeMountedListeners.push(fn);\n        return this;\n    };\n\n    mounted = (fn: (ctx: Ctx) => void) => {\n        this.mountedListeners.push(fn);\n        return this;\n    };\n\n    updated = (fn: (ctx: Ctx, doc: ProseNode, prevDoc: ProseNode | null) => void) => {\n        this.updatedListeners.push(fn);\n        return this;\n    };\n\n    markdownUpdated(fn: (ctx: Ctx, markdown: string, prevMarkdown: string | null) => void) {\n        this.markdownUpdatedListeners.push(fn);\n        return this;\n    }\n\n    blur(fn: (ctx: Ctx) => void) {\n        this.blurListeners.push(fn);\n        return this;\n    }\n\n    focus(fn: (ctx: Ctx) => void) {\n        this.focusListeners.push(fn);\n        return this;\n    }\n\n    destroy(fn: (ctx: Ctx) => void) {\n        this.destroyListeners.push(fn);\n        return this;\n    }\n}\n\nexport const listenerCtx = createSlice<ListenerManager>(new ListenerManager(), 'listener');\nexport const key = new PluginKey('MILKDOWN_PLUGIN_LISTENER');\n\nexport const listener: MilkdownPlugin = (pre) => {\n    pre.inject(listenerCtx, new ListenerManager());\n\n    return async (ctx) => {\n        await ctx.wait(InitReady);\n        const listener = ctx.get(listenerCtx);\n        // @ts-expect-error deprecated old listener API\n        if (listener.doc || listener.markdown) {\n            throw new Error('listener.doc and listener.markdown are deprecated, use new listener manager API instead');\n        }\n        const { listeners } = listener;\n\n        listeners.beforeMounted.forEach((fn) => fn(ctx));\n\n        await ctx.wait(SerializerReady);\n        const serializer = ctx.get(serializerCtx);\n\n        let prevDoc: ProseNode | null = null;\n        let prevMarkdown: string | null = null;\n\n        const plugin = new Plugin({\n            key,\n            view: () => {\n                return {\n                    destroy: () => {\n                        listeners.destroy.forEach((fn) => fn(ctx));\n                    },\n                };\n            },\n            props: {\n                handleDOMEvents: {\n                    focus: () => {\n                        listeners.focus.forEach((fn) => fn(ctx));\n                        return false;\n                    },\n                    blur: () => {\n                        listeners.blur.forEach((fn) => fn(ctx));\n                        return false;\n                    },\n                },\n            },\n            state: {\n                init: () => {\n                    // do nothing\n                },\n                apply: (tr) => {\n                    if (!tr.docChanged) return;\n                    const { doc } = tr;\n                    if (listeners.updated.length > 0 && (prevDoc == null || prevDoc !== doc)) {\n                        listeners.updated.forEach((fn) => {\n                            fn(ctx, doc, prevDoc);\n                        });\n                    }\n                    if (listeners.markdownUpdated.length > 0) {\n                        const markdown = serializer(tr.doc);\n                        if (prevMarkdown == null || prevMarkdown !== markdown) {\n                            listeners.markdownUpdated.forEach((fn) => {\n                                fn(ctx, markdown, prevMarkdown);\n                            });\n                            prevMarkdown = markdown;\n                        }\n                    }\n\n                    prevDoc = doc;\n                },\n            },\n        });\n        ctx.update(prosePluginsCtx, (x) => x.concat(plugin));\n\n        await ctx.wait(EditorViewReady);\n        listeners.mounted.forEach((fn) => fn(ctx));\n    };\n};\n"],"names":[],"mappings":";;AAaA,sBAAsB;AAAA,EAAtB,cAbA;kCAcgE;4BACN;4BAC2C;oCACY;yBAC1D;0BACC;4BACE;uBAcxC,CAAC,OAA2B;WACjC,uBAAuB,KAAK;aAC1B;AAAA;mBAGD,CAAC,OAA2B;WAC7B,iBAAiB,KAAK;aACpB;AAAA;mBAGD,CAAC,OAAsE;WACxE,iBAAiB,KAAK;aACpB;AAAA;AAAA;AAAA,MAxBP,YAAY;WACL;AAAA,MACH,eAAe,KAAK;AAAA,MACpB,SAAS,KAAK;AAAA,MACd,SAAS,KAAK;AAAA,MACd,iBAAiB,KAAK;AAAA,MACtB,MAAM,KAAK;AAAA,MACX,OAAO,KAAK;AAAA,MACZ,SAAS,KAAK;AAAA;AAAA;AAAA,EAmBtB,gBAAgB,IAAuE;SAC9E,yBAAyB,KAAK;WAC5B;AAAA;AAAA,EAGX,KAAK,IAAwB;SACpB,cAAc,KAAK;WACjB;AAAA;AAAA,EAGX,MAAM,IAAwB;SACrB,eAAe,KAAK;WAClB;AAAA;AAAA,EAGX,QAAQ,IAAwB;SACvB,iBAAiB,KAAK;WACpB;AAAA;AAAA;MAIF,cAAc,YAA6B,IAAI,mBAAmB;MAClE,MAAM,IAAI,UAAU;MAEpB,WAA2B,CAAC,QAAQ;MACzC,OAAO,aAAa,IAAI;SAErB,OAAO,QAAQ;UACZ,IAAI,KAAK;UACT,YAAW,IAAI,IAAI;QAErB,UAAS,OAAO,UAAS,UAAU;YAC7B,IAAI,MAAM;AAAA;UAEd,EAAE,cAAc;cAEZ,cAAc,QAAQ,CAAC,OAAO,GAAG;UAErC,IAAI,KAAK;UACT,aAAa,IAAI,IAAI;QAEvB,UAA4B;QAC5B,eAA8B;UAE5B,SAAS,IAAI,OAAO;AAAA,MACtB;AAAA,MACA,MAAM,MAAM;eACD;AAAA,UACH,SAAS,MAAM;sBACD,QAAQ,QAAQ,CAAC,OAAO,GAAG;AAAA;AAAA;AAAA;AAAA,MAIjD,OAAO;AAAA,QACH,iBAAiB;AAAA,UACb,OAAO,MAAM;sBACC,MAAM,QAAQ,CAAC,OAAO,GAAG;mBAC5B;AAAA;AAAA,UAEX,MAAM,MAAM;sBACE,KAAK,QAAQ,CAAC,OAAO,GAAG;mBAC3B;AAAA;AAAA;AAAA;AAAA,MAInB,OAAO;AAAA,QACH,MAAM,MAAM;AAAA;AAAA,QAGZ,OAAO,CAAC,OAAO;cACP,CAAC,GAAG;;gBACF,EAAE,QAAQ;cACZ,UAAU,QAAQ,SAAS,iBAAiB,QAAQ,YAAY,MAAM;sBAC5D,QAAQ,QAAQ,CAAC,OAAO;iBAC3B,KAAK,KAAK;AAAA;AAAA;cAGjB,UAAU,gBAAgB,SAAS,GAAG;kBAChC,WAAW,WAAW,GAAG;gBAC3B,gBAAgB,QAAQ,iBAAiB,UAAU;wBACzC,gBAAgB,QAAQ,CAAC,OAAO;mBACnC,KAAK,UAAU;AAAA;6BAEP;AAAA;AAAA;oBAIb;AAAA;AAAA;AAAA;QAIlB,OAAO,iBAAiB,CAAC,MAAM,EAAE,OAAO;UAEtC,IAAI,KAAK;cACL,QAAQ,QAAQ,CAAC,OAAO,GAAG;AAAA;AAAA;;"}