{"version":3,"file":"index.es.js","sources":["../src/supported-keys.ts","../src/mark/code-inline.ts","../src/mark/em.ts","../src/mark/link.ts","../src/mark/strong.ts","../src/mark/index.ts","../src/node/blockquote.ts","../src/node/bullet-list.ts","../src/node/code-fence.ts","../src/node/doc.ts","../src/node/hardbreak.ts","../src/node/heading.ts","../src/node/hr.ts","../src/node/image.ts","../src/node/list-item.ts","../src/node/ordered-list.ts","../src/node/paragraph.ts","../src/node/text.ts","../src/node/index.ts","../src/plugin/filter-html.ts","../src/plugin/index.ts","../src/index.ts"],"sourcesContent":["/* Copyright 2021, Milkdown by Mirone. */\nexport const SupportedKeys = {\n    HardBreak: 'HardBreak',\n    Blockquote: 'Blockquote',\n    BulletList: 'BulletList',\n    OrderedList: 'OrderedList',\n    CodeFence: 'CodeFence',\n    H1: 'H1',\n    H2: 'H2',\n    H3: 'H3',\n    H4: 'H4',\n    H5: 'H5',\n    H6: 'H6',\n    Text: 'Text',\n    CodeInline: 'CodeInline',\n    Em: 'Em',\n    Bold: 'Bold',\n    NextListItem: 'NextListItem',\n    SinkListItem: 'SinkListItem',\n    LiftListItem: 'LiftListItem',\n} as const;\n\nexport type SupportedKeys = typeof SupportedKeys;\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { createCmd, createCmdKey } from '@milkdown/core';\nimport { markRule, toggleMark } from '@milkdown/prose';\nimport { createMark, createShortcut } from '@milkdown/utils';\n\nimport { SupportedKeys } from '../supported-keys';\n\ntype Keys = SupportedKeys['CodeInline'];\nconst id = 'code_inline';\n\nexport const ToggleInlineCode = createCmdKey('ToggleInlineCode');\n\nexport const codeInline = createMark<Keys>((utils) => {\n    const style = utils.getStyle(\n        ({ palette, size, font }, { css }) =>\n            css`\n                background-color: ${palette('neutral')};\n                color: ${palette('background')};\n                border-radius: ${size.radius};\n                font-weight: 500;\n                font-family: ${font.code};\n                padding: 0 0.2rem;\n            `,\n    );\n    return {\n        id,\n        schema: () => ({\n            priority: 100,\n            code: true,\n            inclusive: false,\n            parseDOM: [{ tag: 'code' }],\n            toDOM: (mark) => ['code', { class: utils.getClassName(mark.attrs, 'code-inline', style) }],\n            parseMarkdown: {\n                match: (node) => node.type === 'inlineCode',\n                runner: (state, node, markType) => {\n                    state.openMark(markType);\n                    state.addText(node['value'] as string);\n                    state.closeMark(markType);\n                },\n            },\n            toMarkdown: {\n                match: (mark) => mark.type.name === id,\n                runner: (state, mark, node) => {\n                    state.withMark(mark, 'inlineCode', node.text || '');\n                },\n            },\n        }),\n        inputRules: (markType) => [markRule(/(?:^|[^`])(`([^`]+)`)$/, markType)],\n        commands: (markType) => [createCmd(ToggleInlineCode, () => toggleMark(markType))],\n        shortcuts: {\n            [SupportedKeys.CodeInline]: createShortcut(ToggleInlineCode, 'Mod-e'),\n        },\n    };\n});\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { createCmd, createCmdKey } from '@milkdown/core';\nimport { markRule, toggleMark } from '@milkdown/prose';\nimport { createMark, createShortcut } from '@milkdown/utils';\n\nimport { SupportedKeys } from '../supported-keys';\n\ntype Keys = SupportedKeys['Em'];\n\nconst id = 'em';\n\nexport const ToggleItalic = createCmdKey('ToggleItalic');\n\nexport const em = createMark<Keys>((utils) => ({\n    id,\n    schema: () => ({\n        parseDOM: [\n            { tag: 'i' },\n            { tag: 'em' },\n            { style: 'font-style', getAttrs: (value) => (value === 'italic') as false },\n        ],\n        toDOM: (mark) => ['em', { class: utils.getClassName(mark.attrs, id) }],\n        parseMarkdown: {\n            match: (node) => node.type === 'emphasis',\n            runner: (state, node, markType) => {\n                state.openMark(markType);\n                state.next(node.children);\n                state.closeMark(markType);\n            },\n        },\n        toMarkdown: {\n            match: (mark) => mark.type.name === id,\n            runner: (state, mark) => {\n                state.withMark(mark, 'emphasis');\n            },\n        },\n    }),\n    inputRules: (markType) => [\n        markRule(/(?:^|[^_])(_([^_]+)_)$/, markType),\n        markRule(/(?:^|[^*])(\\*([^*]+)\\*)$/, markType),\n    ],\n    commands: (markType) => [createCmd(ToggleItalic, () => toggleMark(markType))],\n    shortcuts: {\n        [SupportedKeys.Em]: createShortcut(ToggleItalic, 'Mod-i'),\n    },\n}));\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { createCmd, createCmdKey, schemaCtx } from '@milkdown/core';\nimport { InputRule, Node as ProseNode, TextSelection, toggleMark } from '@milkdown/prose';\nimport { createMark } from '@milkdown/utils';\n\nexport const ToggleLink = createCmdKey<string>('ToggleLink');\nexport const ModifyLink = createCmdKey<string>('ModifyLink');\nconst id = 'link';\nexport const link = createMark((utils) => {\n    const style = utils.getStyle((themeTool, { css }) => {\n        const lineColor = themeTool.palette('line');\n\n        return css`\n            color: ${themeTool.palette('secondary')};\n            cursor: pointer;\n            transition: all 0.4s ease-in-out;\n            font-weight: 500;\n            &:hover {\n                background-color: ${lineColor};\n                box-shadow: 0 0.2rem ${lineColor}, 0 -0.2rem ${lineColor};\n            }\n        `;\n    });\n    return {\n        id,\n        schema: () => ({\n            attrs: {\n                href: {},\n                title: { default: null },\n            },\n            inclusive: false,\n            parseDOM: [\n                {\n                    tag: 'a[href]',\n                    getAttrs: (dom) => {\n                        if (!(dom instanceof HTMLElement)) {\n                            throw new Error();\n                        }\n                        return { href: dom.getAttribute('href'), title: dom.getAttribute('title') };\n                    },\n                },\n            ],\n            toDOM: (mark) => ['a', { ...mark.attrs, class: utils.getClassName(mark.attrs, id, style) }],\n            parseMarkdown: {\n                match: (node) => node.type === 'link',\n                runner: (state, node, markType) => {\n                    const url = node['url'] as string;\n                    const title = node['title'] as string;\n                    state.openMark(markType, { href: url, title });\n                    state.next(node.children);\n                    state.closeMark(markType);\n                },\n            },\n            toMarkdown: {\n                match: (mark) => mark.type.name === id,\n                runner: (state, mark) => {\n                    state.withMark(mark, 'link', undefined, {\n                        title: mark.attrs['title'],\n                        url: mark.attrs['href'],\n                    });\n                },\n            },\n        }),\n        commands: (markType) => [\n            createCmd(ToggleLink, (href = '') => toggleMark(markType, { href })),\n            createCmd(ModifyLink, (href = '') => (state, dispatch) => {\n                if (!dispatch) return false;\n\n                const { marks } = state.schema;\n\n                let node: ProseNode | undefined;\n                let pos = -1;\n                const { selection } = state;\n                state.doc.nodesBetween(selection.from, selection.to, (n, p) => {\n                    if (marks.link.isInSet(n.marks)) {\n                        node = n;\n                        pos = p;\n                        return false;\n                    }\n                    return;\n                });\n                if (!node) return false;\n\n                const mark = node.marks.find(({ type }) => type === markType);\n                if (!mark) return false;\n\n                const start = pos;\n                const end = pos + node.nodeSize;\n                const { tr } = state;\n                const linkMark = marks.link.create({ ...mark.attrs, href });\n                dispatch(\n                    tr\n                        .removeMark(start, end, mark)\n                        .addMark(start, end, linkMark)\n                        .setSelection(new TextSelection(tr.selection.$anchor))\n                        .scrollIntoView(),\n                );\n\n                return true;\n            }),\n        ],\n        inputRules: (markType, ctx) => [\n            new InputRule(/\\[(?<text>.*?)]\\((?<href>.*?)(?=â€œ|\\))\"?(?<title>[^\"]+)?\"?\\)/, (state, match, start, end) => {\n                const [okay, text = '', href, title] = match;\n                const { tr } = state;\n                if (okay) {\n                    const content = text || 'link';\n                    tr.replaceWith(start, end, ctx.get(schemaCtx).text(content)).addMark(\n                        start,\n                        content.length + start,\n                        markType.create({ title, href }),\n                    );\n                }\n\n                return tr;\n            }),\n        ],\n    };\n});\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { createCmd, createCmdKey } from '@milkdown/core';\nimport { markRule, toggleMark } from '@milkdown/prose';\nimport { createMark, createShortcut } from '@milkdown/utils';\n\nimport { SupportedKeys } from '../supported-keys';\n\ntype Keys = SupportedKeys['Bold'];\nconst id = 'strong';\nexport const ToggleBold = createCmdKey('ToggleBold');\nexport const strong = createMark<Keys>((utils) => {\n    const style = utils.getStyle(\n        (_, { css }) =>\n            css`\n                font-weight: 600;\n            `,\n    );\n    return {\n        id,\n        schema: () => ({\n            parseDOM: [\n                { tag: 'b' },\n                { tag: 'strong' },\n                { style: 'font-style', getAttrs: (value) => (value === 'bold') as false },\n            ],\n            toDOM: (mark) => ['strong', { class: utils.getClassName(mark.attrs, id, style) }],\n            parseMarkdown: {\n                match: (node) => node.type === 'strong',\n                runner: (state, node, markType) => {\n                    state.openMark(markType);\n                    state.next(node.children);\n                    state.closeMark(markType);\n                },\n            },\n            toMarkdown: {\n                match: (mark) => mark.type.name === id,\n                runner: (state, mark) => {\n                    state.withMark(mark, 'strong');\n                },\n            },\n        }),\n        inputRules: (markType) => [\n            markRule(/(?:__)([^_]+)(?:__)$/, markType),\n            markRule(/(?:\\*\\*)([^*]+)(?:\\*\\*)$/, markType),\n        ],\n        commands: (markType) => [createCmd(ToggleBold, () => toggleMark(markType))],\n        shortcuts: {\n            [SupportedKeys.Bold]: createShortcut(ToggleBold, 'Mod-b'),\n        },\n    };\n});\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { codeInline } from './code-inline';\nimport { em } from './em';\nimport { link } from './link';\nimport { strong } from './strong';\n\nexport const marks = [codeInline(), em(), strong(), link()];\n\nexport * from './code-inline';\nexport * from './em';\nexport * from './link';\nexport * from './strong';\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { createCmd, createCmdKey } from '@milkdown/core';\nimport { wrapIn, wrappingInputRule } from '@milkdown/prose';\nimport { createNode, createShortcut } from '@milkdown/utils';\n\nimport { SupportedKeys } from '../supported-keys';\n\ntype Keys = SupportedKeys['Blockquote'];\n\nconst id = 'blockquote';\n\nexport const WrapInBlockquote = createCmdKey('WrapInBlockquote');\n\nexport const blockquote = createNode<Keys>((utils) => {\n    const style = utils.getStyle(\n        (themeTool, { css }) =>\n            css`\n                padding-left: 1.875rem;\n                line-height: 1.75rem;\n                border-left: 4px solid ${themeTool.palette('primary')};\n                * {\n                    font-size: 1rem;\n                    line-height: 1.5rem;\n                }\n            `,\n    );\n\n    return {\n        id,\n        schema: () => ({\n            content: 'block+',\n            group: 'block',\n            defining: true,\n            parseDOM: [{ tag: 'blockquote' }],\n            toDOM: (node) => ['blockquote', { class: utils.getClassName(node.attrs, id, style) }, 0],\n            parseMarkdown: {\n                match: ({ type }) => type === id,\n                runner: (state, node, type) => {\n                    state.openNode(type).next(node.children).closeNode();\n                },\n            },\n            toMarkdown: {\n                match: (node) => node.type.name === id,\n                runner: (state, node) => {\n                    state.openNode('blockquote').next(node.content).closeNode();\n                },\n            },\n        }),\n        inputRules: (nodeType) => [wrappingInputRule(/^\\s*>\\s$/, nodeType)],\n        commands: (nodeType) => [createCmd(WrapInBlockquote, () => wrapIn(nodeType))],\n        shortcuts: {\n            [SupportedKeys.Blockquote]: createShortcut(WrapInBlockquote, 'Mod-Shift-b'),\n        },\n    };\n});\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { createCmd, createCmdKey } from '@milkdown/core';\nimport { wrapIn, wrappingInputRule } from '@milkdown/prose';\nimport { createNode, createShortcut } from '@milkdown/utils';\n\nimport { SupportedKeys } from '../supported-keys';\n\ntype Keys = SupportedKeys['BulletList'];\n\nexport const WrapInBulletList = createCmdKey('WrapInBulletList');\n\nexport const bulletList = createNode<Keys>((utils) => {\n    const id = 'bullet_list';\n    return {\n        id,\n        schema: () => ({\n            content: 'listItem+',\n            group: 'block',\n            parseDOM: [{ tag: 'ul' }],\n            toDOM: (node) => {\n                return ['ul', { class: utils.getClassName(node.attrs, 'bullet-list') }, 0];\n            },\n            parseMarkdown: {\n                match: ({ type, ordered }) => type === 'list' && !ordered,\n                runner: (state, node, type) => {\n                    state.openNode(type).next(node.children).closeNode();\n                },\n            },\n            toMarkdown: {\n                match: (node) => node.type.name === id,\n                runner: (state, node) => {\n                    state.openNode('list', undefined, { ordered: false }).next(node.content).closeNode();\n                },\n            },\n        }),\n        inputRules: (nodeType) => [wrappingInputRule(/^\\s*([-+*])\\s$/, nodeType)],\n        commands: (nodeType) => [createCmd(WrapInBulletList, () => wrapIn(nodeType))],\n        shortcuts: {\n            [SupportedKeys.BulletList]: createShortcut(WrapInBulletList, 'Mod-Alt-8'),\n        },\n    };\n});\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { createCmd, createCmdKey, themeToolCtx } from '@milkdown/core';\nimport { setBlockType, textblockTypeInputRule } from '@milkdown/prose';\nimport { createNode, createShortcut } from '@milkdown/utils';\n\nimport { SupportedKeys } from '../supported-keys';\n\ntype Keys = SupportedKeys['CodeFence'];\n\nconst languageOptions = [\n    '',\n    'javascript',\n    'typescript',\n    'bash',\n    'sql',\n    'json',\n    'html',\n    'css',\n    'c',\n    'cpp',\n    'java',\n    'ruby',\n    'python',\n    'go',\n    'rust',\n    'markdown',\n];\n\nexport const backtickInputRegex = /^```(?<language>[a-z]*)?[\\s\\n]$/;\nexport const tildeInputRegex = /^~~~(?<language>[a-z]*)?[\\s\\n]$/;\n\nexport const TurnIntoCodeFence = createCmdKey('TurnIntoCodeFence');\n\nconst id = 'fence';\nexport const codeFence = createNode<Keys, { languageList?: string[] }>((utils, options) => {\n    const style = utils.getStyle(({ palette, mixin, size, font }, { css }) => {\n        const { shadow, scrollbar, border } = mixin;\n        const { lineWidth, radius } = size;\n        return css`\n            background-color: ${palette('background')};\n            color: ${palette('neutral')};\n            font-size: 0.85rem;\n            padding: 1.2rem 0.4rem 1.4rem;\n            border-radius: ${radius};\n            font-family: ${font.typography};\n\n            * {\n                margin: 0;\n            }\n\n            .code-fence_select-wrapper {\n                position: relative;\n            }\n\n            .code-fence_value {\n                width: 10.25rem;\n                box-sizing: border-box;\n                border-radius: ${size.radius};\n                margin: 0 1.2rem 1.2rem;\n                ${border()};\n                ${shadow()};\n                cursor: pointer;\n                background-color: ${palette('surface')};\n                position: relative;\n                display: flex;\n                color: ${palette('neutral', 0.87)};\n                letter-spacing: 0.5px;\n                height: 2.625rem;\n                align-items: center;\n\n                & > .icon {\n                    width: 2.625rem;\n                    height: 100%;\n                    display: flex;\n                    justify-content: center;\n                    align-items: center;\n                    color: ${palette('solid', 0.87)};\n                    border-left: ${lineWidth} solid ${palette('line')};\n\n                    text-align: center;\n                    transition: all 0.2s ease-in-out;\n                    &:hover {\n                        background: ${palette('background')};\n                        color: ${palette('primary')};\n                    }\n                }\n\n                > span:first-child {\n                    padding-left: 1rem;\n                    flex: 1;\n                    font-weight: 500;\n                }\n            }\n\n            .code-fence_select-option {\n                list-style: none;\n                line-height: 2rem;\n                padding-left: 1rem;\n                cursor: pointer;\n                :hover {\n                    background: ${palette('secondary', 0.12)};\n                    color: ${palette('primary')};\n                }\n            }\n\n            .code-fence_select {\n                &[data-fold='true'] {\n                    display: none;\n                }\n\n                font-weight: 500;\n                position: absolute;\n                z-index: 1;\n                top: 2.625rem;\n                box-sizing: border-box;\n                left: 1.2rem;\n                padding: 0.5rem 0;\n                max-height: 16.75rem;\n                width: 10.25rem;\n                ${border()};\n                ${shadow()};\n                background-color: ${palette('surface')};\n                border-top: none;\n                overflow-y: auto;\n                display: flex;\n                flex-direction: column;\n\n                ${scrollbar('y')}\n            }\n\n            code {\n                line-height: 1.5;\n                font-family: ${font.code};\n            }\n\n            pre {\n                font-family: ${font.code};\n                margin: 0 1.2rem !important;\n                white-space: pre;\n                overflow: auto;\n                ${scrollbar('x')};\n            }\n        `;\n    });\n\n    return {\n        id,\n        schema: () => ({\n            content: 'text*',\n            group: 'block',\n            marks: '',\n            defining: true,\n            code: true,\n            attrs: {\n                language: {\n                    default: '',\n                },\n                fold: {\n                    default: true,\n                },\n            },\n            parseDOM: [\n                {\n                    tag: 'pre',\n                    preserveWhitespace: 'full',\n                    getAttrs: (dom) => {\n                        if (!(dom instanceof HTMLElement)) {\n                            throw new Error('Parse DOM error.');\n                        }\n                        return { language: dom.dataset['language'] };\n                    },\n                },\n            ],\n            toDOM: (node) => {\n                return [\n                    'pre',\n                    {\n                        'data-language': node.attrs['language'],\n                        class: utils.getClassName(node.attrs, 'code-fence', style),\n                    },\n                    ['code', { spellCheck: 'false' }, 0],\n                ];\n            },\n            parseMarkdown: {\n                match: ({ type }) => type === 'code',\n                runner: (state, node, type) => {\n                    const language = node['lang'] as string;\n                    const value = node['value'] as string;\n                    state.openNode(type, { language });\n                    if (value) {\n                        state.addText(value);\n                    }\n                    state.closeNode();\n                },\n            },\n            toMarkdown: {\n                match: (node) => node.type.name === id,\n                runner: (state, node) => {\n                    state.addNode('code', undefined, node.content.firstChild?.text || '', {\n                        lang: node.attrs['language'],\n                    });\n                },\n            },\n        }),\n        inputRules: (nodeType) => [\n            textblockTypeInputRule(backtickInputRegex, nodeType, (match) => {\n                const [ok, language] = match;\n                if (!ok) return;\n                return { language };\n            }),\n            textblockTypeInputRule(tildeInputRegex, nodeType, (match) => {\n                const [ok, language] = match;\n                if (!ok) return;\n                return { language };\n            }),\n        ],\n        commands: (nodeType) => [createCmd(TurnIntoCodeFence, () => setBlockType(nodeType))],\n        shortcuts: {\n            [SupportedKeys.CodeFence]: createShortcut(TurnIntoCodeFence, 'Mod-Alt-c'),\n        },\n        view: (ctx) => (node, view, getPos) => {\n            const container = document.createElement('div');\n            const selectWrapper = document.createElement('div');\n            const select = document.createElement('ul');\n            const pre = document.createElement('pre');\n            const code = document.createElement('code');\n\n            const valueWrapper = document.createElement('div');\n            valueWrapper.className = 'code-fence_value';\n            const value = document.createElement('span');\n            valueWrapper.appendChild(value);\n            if (view.editable) {\n                valueWrapper.appendChild(ctx.get(themeToolCtx).slots.icon('downArrow'));\n            }\n\n            select.className = 'code-fence_select';\n            select.addEventListener('mousedown', (e) => {\n                e.preventDefault();\n                e.stopPropagation();\n\n                if (!view.editable) return;\n\n                const el = e.target;\n                if (!(el instanceof HTMLLIElement)) return;\n                const { tr } = view.state;\n\n                view.dispatch(\n                    tr.setNodeMarkup(getPos(), undefined, {\n                        fold: true,\n                        language: el.dataset['value'],\n                    }),\n                );\n            });\n            valueWrapper.addEventListener('mousedown', (e) => {\n                e.preventDefault();\n                e.stopPropagation();\n\n                if (!view.editable) return;\n                const { tr } = view.state;\n\n                view.dispatch(\n                    tr.setNodeMarkup(getPos(), undefined, {\n                        fold: false,\n                        language: container.dataset['language'],\n                    }),\n                );\n            });\n            document.addEventListener('mousedown', () => {\n                if (!view.editable || select.dataset['fold'] === 'true') return;\n\n                const { tr } = view.state;\n\n                view.dispatch(\n                    tr.setNodeMarkup(getPos(), undefined, {\n                        fold: true,\n                        language: container.dataset['language'],\n                    }),\n                );\n            });\n\n            (options?.languageList || languageOptions).forEach((lang) => {\n                const option = document.createElement('li');\n                option.className = 'code-fence_select-option';\n                option.innerText = lang || '--';\n                select.appendChild(option);\n                option.setAttribute('data-value', lang);\n            });\n\n            code.spellcheck = false;\n            selectWrapper.className = 'code-fence_select-wrapper';\n            selectWrapper.contentEditable = 'false';\n            selectWrapper.append(valueWrapper);\n            selectWrapper.append(select);\n            pre.append(code);\n            const codeContent = document.createElement('div');\n            code.append(codeContent);\n            codeContent.style.whiteSpace = 'inherit';\n\n            container.append(selectWrapper, pre);\n            container.setAttribute('class', utils.getClassName(node.attrs, 'code-fence', style));\n            container.setAttribute('data-language', node.attrs['language']);\n            value.innerText = node.attrs['language'] || '--';\n            select.setAttribute('data-fold', node.attrs['fold'] ? 'true' : 'false');\n\n            return {\n                dom: container,\n                contentDOM: codeContent,\n                update: (updatedNode) => {\n                    if (updatedNode.type.name !== id) return false;\n\n                    const lang = updatedNode.attrs['language'];\n                    container.dataset['language'] = lang;\n                    value.innerText = lang || '--';\n                    select.setAttribute('data-fold', updatedNode.attrs['fold'] ? 'true' : 'false');\n\n                    return true;\n                },\n            };\n        },\n    };\n});\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { createNode } from '@milkdown/utils';\n\nexport const doc = createNode(() => {\n    return {\n        id: 'doc',\n        schema: () => ({\n            content: 'block+',\n            parseMarkdown: {\n                match: ({ type }) => type === 'root',\n                runner: (state, node, type) => {\n                    state.injectRoot(node, type);\n                },\n            },\n            toMarkdown: {\n                match: (node) => node.type.name === 'doc',\n                runner: (state, node) => {\n                    state.openNode('root');\n                    state.next(node.content);\n                },\n            },\n        }),\n    };\n});\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { createCmd, createCmdKey } from '@milkdown/core';\nimport { AddMarkStep, Plugin, PluginKey, ReplaceStep } from '@milkdown/prose';\nimport { createNode, createShortcut } from '@milkdown/utils';\n\nimport { SupportedKeys } from '../supported-keys';\n\ntype Keys = SupportedKeys['HardBreak'];\n\nexport const InsertHardbreak = createCmdKey('InsertHardbreak');\n\nexport const hardbreak = createNode<Keys>((utils) => {\n    return {\n        id: 'hardbreak',\n        schema: () => ({\n            inline: true,\n            group: 'inline',\n            selectable: false,\n            parseDOM: [{ tag: 'br' }],\n            toDOM: (node) => ['br', { class: utils.getClassName(node.attrs, 'hardbreak') }],\n            parseMarkdown: {\n                match: ({ type }) => type === 'break',\n                runner: (state, _, type) => {\n                    state.addNode(type);\n                },\n            },\n            toMarkdown: {\n                match: (node) => node.type.name === 'hardbreak',\n                runner: (state) => {\n                    state.addNode('break');\n                },\n            },\n        }),\n        commands: (type) => [\n            createCmd(InsertHardbreak, () => (state, dispatch) => {\n                dispatch?.(state.tr.setMeta('hardbreak', true).replaceSelectionWith(type.create()).scrollIntoView());\n                return true;\n            }),\n        ],\n        shortcuts: {\n            [SupportedKeys.HardBreak]: createShortcut(InsertHardbreak, 'Shift-Enter'),\n        },\n        prosePlugins: (type) => [\n            new Plugin({\n                key: new PluginKey('MILKDOWN_PLUGIN_HARDBREAK_MARKS'),\n                appendTransaction: (trs, _oldState, newState) => {\n                    if (!trs.length) return;\n                    const [tr] = trs;\n                    if (!tr) return;\n\n                    const [step] = tr.steps;\n\n                    const isInsertHr = tr.getMeta('hardbreak');\n                    if (isInsertHr) {\n                        if (!(step instanceof ReplaceStep)) {\n                            return;\n                        }\n                        const { from } = step as unknown as { from: number };\n                        return newState.tr.setNodeMarkup(from, type, undefined, []);\n                    }\n\n                    const isAddMarkStep = step instanceof AddMarkStep;\n                    if (isAddMarkStep) {\n                        let _tr = newState.tr;\n                        const { from, to } = step as unknown as { from: number; to: number };\n                        newState.doc.nodesBetween(from, to, (node, pos) => {\n                            if (node.type === type) {\n                                _tr = _tr.setNodeMarkup(pos, type, undefined, []);\n                            }\n                        });\n\n                        return _tr;\n                    }\n\n                    return;\n                },\n            }),\n        ],\n    };\n});\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { createCmd, createCmdKey, editorViewCtx } from '@milkdown/core';\nimport {\n    EditorState,\n    Node,\n    Plugin,\n    PluginKey,\n    setBlockType,\n    textblockTypeInputRule,\n    Transaction,\n} from '@milkdown/prose';\nimport { createNode, createShortcut } from '@milkdown/utils';\n\nimport { SupportedKeys } from '../supported-keys';\n\nconst headingIndex = Array(6)\n    .fill(0)\n    .map((_, i) => i + 1);\n\ntype Keys =\n    | SupportedKeys['H1']\n    | SupportedKeys['H2']\n    | SupportedKeys['H3']\n    | SupportedKeys['H4']\n    | SupportedKeys['H5']\n    | SupportedKeys['H6'];\n\nexport const TurnIntoHeading = createCmdKey<number>('TurnIntoHeading');\n\nexport const headingPluginKey = new PluginKey('MILKDOWN_PLUGIN_ID');\n\nexport const heading = createNode<Keys>((utils) => {\n    const id = 'heading';\n\n    const style = (level: number) =>\n        utils.getStyle((_, { css }) => {\n            const headingMap: Record<number, string> = {\n                1: css`\n                    font-size: 3rem;\n                    line-height: 3.5rem;\n                `,\n                2: css`\n                    font-size: 2.5rem;\n                    line-height: 3rem;\n                `,\n                3: css`\n                    font-size: 2.125rem;\n                    line-height: 2.25rem;\n                `,\n                4: css`\n                    font-size: 1.75rem;\n                    line-height: 2rem;\n                `,\n                5: css`\n                    font-size: 1.5rem;\n                    line-height: 1.5rem;\n                `,\n                6: css`\n                    font-size: 1.25rem;\n                    line-height: 1.25rem;\n                `,\n            };\n\n            return css`\n                ${headingMap[level] || ''}\n                margin: 2.5rem 0 !important;\n                font-weight: 400;\n            `;\n        });\n\n    return {\n        id,\n        schema: () => ({\n            content: 'inline*',\n            group: 'block',\n            defining: true,\n            attrs: {\n                id: {\n                    default: '',\n                },\n                level: {\n                    default: 1,\n                },\n            },\n            parseDOM: headingIndex.map((x) => ({\n                tag: `h${x}`,\n                getAttrs: (node) => {\n                    if (!(node instanceof HTMLElement)) {\n                        throw new Error();\n                    }\n                    return { level: x, id: node.id };\n                },\n            })),\n            toDOM: (node) => {\n                return [\n                    `h${node.attrs['level']}`,\n                    {\n                        id: node.attrs['id'] || node.textContent.split(' ').join('-').toLocaleLowerCase(),\n                        class: utils.getClassName(\n                            node.attrs,\n                            `heading h${node.attrs['level']}`,\n                            style(node.attrs['level']),\n                        ),\n                    },\n                    0,\n                ];\n            },\n            parseMarkdown: {\n                match: ({ type }) => type === id,\n                runner: (state, node, type) => {\n                    const depth = node['depth'] as number;\n                    state.openNode(type, { level: depth });\n                    state.next(node.children);\n                    state.closeNode();\n                },\n            },\n            toMarkdown: {\n                match: (node) => node.type.name === id,\n                runner: (state, node) => {\n                    state.openNode('heading', undefined, { depth: node.attrs['level'] });\n                    state.next(node.content);\n                    state.closeNode();\n                },\n            },\n        }),\n        inputRules: (type) =>\n            headingIndex.map((x) =>\n                textblockTypeInputRule(new RegExp(`^(#{1,${x}})\\\\s$`), type, () => ({\n                    level: x,\n                })),\n            ),\n        commands: (type) => [createCmd(TurnIntoHeading, (level = 1) => setBlockType(type, { level }))],\n        shortcuts: {\n            [SupportedKeys.H1]: createShortcut(TurnIntoHeading, 'Mod-Alt-1', 1),\n            [SupportedKeys.H2]: createShortcut(TurnIntoHeading, 'Mod-Alt-2', 2),\n            [SupportedKeys.H3]: createShortcut(TurnIntoHeading, 'Mod-Alt-3', 3),\n            [SupportedKeys.H4]: createShortcut(TurnIntoHeading, 'Mod-Alt-4', 4),\n            [SupportedKeys.H5]: createShortcut(TurnIntoHeading, 'Mod-Alt-5', 5),\n            [SupportedKeys.H6]: createShortcut(TurnIntoHeading, 'Mod-Alt-6', 6),\n        },\n        prosePlugins: (type, ctx) => {\n            let lock = false;\n            const createId = (node: Node) => {\n                return node.textContent\n                    .replace(/[\\p{P}\\p{S}]/gu, '')\n                    .replace(/\\s/g, '')\n                    .trim();\n            };\n            const walkThrough = (state: EditorState, callback: (tr: Transaction) => void) => {\n                const tr = state.tr;\n                state.doc.descendants((node, pos) => {\n                    if (node.type === type && !lock) {\n                        if (node.textContent.trim().length === 0) {\n                            return;\n                        }\n                        const attrs = node.attrs;\n                        const id = createId(node);\n\n                        if (attrs['id'] !== id) {\n                            tr.setMeta(headingPluginKey, true).setNodeMarkup(pos, undefined, {\n                                ...attrs,\n                                id,\n                            });\n                        }\n                    }\n                });\n                callback(tr);\n            };\n            return [\n                new Plugin({\n                    key: headingPluginKey,\n                    props: {\n                        handleDOMEvents: {\n                            compositionstart: () => {\n                                lock = true;\n                                return false;\n                            },\n                            compositionend: () => {\n                                lock = false;\n                                const view = ctx.get(editorViewCtx);\n                                setTimeout(() => {\n                                    walkThrough(view.state, (tr) => view.dispatch(tr));\n                                }, 0);\n                                return false;\n                            },\n                        },\n                    },\n                    appendTransaction: (transactions, _, nextState) => {\n                        let tr: Transaction | null = null;\n\n                        if (\n                            transactions.every((transaction) => !transaction.getMeta(headingPluginKey)) &&\n                            transactions.some((transaction) => transaction.docChanged)\n                        ) {\n                            walkThrough(nextState, (t) => {\n                                tr = t;\n                            });\n                        }\n\n                        return tr;\n                    },\n                }),\n            ];\n        },\n    };\n});\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { createCmd, createCmdKey, schemaCtx } from '@milkdown/core';\nimport { InputRule, Selection } from '@milkdown/prose';\nimport { createNode } from '@milkdown/utils';\n\nconst id = 'hr';\nexport const InsertHr = createCmdKey<string>('InsertHr');\nexport const hr = createNode((utils) => {\n    const style = utils.getStyle(\n        (themeTool, { css }) => css`\n            height: ${themeTool.size.lineWidth};\n            background-color: ${themeTool.palette('line')};\n            border-width: 0;\n        `,\n    );\n    return {\n        id,\n        schema: () => ({\n            group: 'block',\n            parseDOM: [{ tag: 'hr' }],\n            toDOM: (node) => ['hr', { class: utils.getClassName(node.attrs, id, style) }],\n            parseMarkdown: {\n                match: ({ type }) => type === 'thematicBreak',\n                runner: (state, _, type) => {\n                    state.addNode(type);\n                },\n            },\n            toMarkdown: {\n                match: (node) => node.type.name === id,\n                runner: (state) => {\n                    state.addNode('thematicBreak');\n                },\n            },\n        }),\n        inputRules: (type) => [\n            new InputRule(/^(?:---|___\\s|\\*\\*\\*\\s)$/, (state, match, start, end) => {\n                const { tr } = state;\n\n                if (match[0]) {\n                    tr.replaceWith(start - 1, end, type.create());\n                }\n\n                return tr;\n            }),\n        ],\n        commands: (type, ctx) => [\n            createCmd(InsertHr, () => (state, dispatch) => {\n                if (!dispatch) return true;\n                const { tr, selection } = state;\n                const from = selection.from;\n                const node = type.create();\n                if (!node) {\n                    return true;\n                }\n                const _tr = tr.replaceSelectionWith(node).insert(from, ctx.get(schemaCtx).node('paragraph'));\n                const sel = Selection.findFrom(_tr.doc.resolve(from), 1, true);\n                if (!sel) {\n                    return true;\n                }\n                dispatch(_tr.setSelection(sel).scrollIntoView());\n                return true;\n            }),\n        ],\n    };\n});\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { createCmd, createCmdKey, themeToolCtx } from '@milkdown/core';\nimport type { Icon } from '@milkdown/design-system';\nimport { findSelectedNodeOfType, InputRule } from '@milkdown/prose';\nimport { createNode } from '@milkdown/utils';\n\nexport const ModifyImage = createCmdKey<string>('ModifyImage');\nexport const InsertImage = createCmdKey<string>('InsertImage');\nconst id = 'image';\nexport type ImageOptions = {\n    isBlock: boolean;\n    placeholder: {\n        loading: string;\n        empty: string;\n        failed: string;\n    };\n};\n\nexport const image = createNode<string, ImageOptions>((utils, options) => {\n    const placeholder = {\n        loading: 'Loading...',\n        empty: 'Add an Image',\n        failed: 'Image loads failed',\n        ...(options?.placeholder ?? {}),\n    };\n    const isBlock = options?.isBlock ?? false;\n    const containerStyle = utils.getStyle(\n        (themeTool, { css }) =>\n            css`\n                display: inline-block;\n                position: relative;\n                text-align: center;\n                font-size: 0;\n                vertical-align: text-bottom;\n                line-height: 1;\n\n                ${isBlock\n                    ? `\n                width: 100%;\n                margin: 0 auto;\n                `\n                    : ''}\n\n                &.ProseMirror-selectednode::after {\n                    content: '';\n                    background: ${themeTool.palette('secondary', 0.38)};\n                    position: absolute;\n                    top: 0;\n                    left: 0;\n                    right: 0;\n                    bottom: 0;\n                }\n\n                img {\n                    max-width: 100%;\n                    height: auto;\n                    object-fit: contain;\n                    margin: 0 2px;\n                }\n                .icon,\n                .placeholder {\n                    display: none;\n                }\n\n                &.system {\n                    width: 100%;\n                    padding: 0 2rem;\n\n                    img {\n                        width: 0;\n                        height: 0;\n                        display: none;\n                    }\n\n                    .icon,\n                    .placeholder {\n                        display: inline;\n                    }\n\n                    box-sizing: border-box;\n                    height: 3rem;\n                    background-color: ${themeTool.palette('background')};\n                    border-radius: ${themeTool.size.radius};\n                    display: inline-flex;\n                    gap: 2rem;\n                    justify-content: flex-start;\n                    align-items: center;\n                    .placeholder {\n                        margin: 0;\n                        line-height: 1;\n                        &::before {\n                            content: '';\n                            font-size: 0.875rem;\n                            color: ${themeTool.palette('neutral', 0.6)};\n                        }\n                    }\n                }\n\n                &.loading {\n                    .placeholder {\n                        &::before {\n                            content: '${placeholder.loading}';\n                        }\n                    }\n                }\n\n                &.empty {\n                    .placeholder {\n                        &::before {\n                            content: '${placeholder.empty}';\n                        }\n                    }\n                }\n\n                &.failed {\n                    .placeholder {\n                        &::before {\n                            content: '${placeholder.failed}';\n                        }\n                    }\n                }\n            `,\n    );\n\n    const style = utils.getStyle(\n        (_, { css }) =>\n            css`\n                display: inline-block;\n                margin: 0 auto;\n                object-fit: contain;\n                width: 100%;\n                position: relative;\n                height: auto;\n                text-align: center;\n            `,\n    );\n\n    return {\n        id: 'image',\n        schema: () => ({\n            inline: true,\n            group: 'inline',\n            selectable: true,\n            draggable: true,\n            marks: '',\n            atom: true,\n            defining: true,\n            isolating: true,\n            attrs: {\n                src: { default: '' },\n                alt: { default: null },\n                title: { default: null },\n                failed: { default: false },\n                loading: { default: true },\n                width: { default: null },\n            },\n            parseDOM: [\n                {\n                    tag: 'img[src]',\n                    getAttrs: (dom) => {\n                        if (!(dom instanceof HTMLElement)) {\n                            throw new Error();\n                        }\n                        return {\n                            failed: dom.classList.contains('failed'),\n                            loading: dom.classList.contains('loading'),\n                            src: dom.getAttribute('src') || '',\n                            alt: dom.getAttribute('alt'),\n                            title: dom.getAttribute('title') || dom.getAttribute('alt'),\n                            width: dom.getAttribute('width'),\n                        };\n                    },\n                },\n            ],\n            toDOM: (node) => {\n                return [\n                    'img',\n                    {\n                        ...node.attrs,\n                        class: utils.getClassName(\n                            node.attrs,\n                            id,\n                            node.attrs['failed'] ? 'failed' : '',\n                            node.attrs['loading'] ? 'loading' : '',\n                            style,\n                        ),\n                    },\n                ];\n            },\n            parseMarkdown: {\n                match: ({ type }) => type === id,\n                runner: (state, node, type) => {\n                    const url = node['url'] as string;\n                    const alt = node['alt'] as string;\n                    const title = node['title'] as string;\n                    state.addNode(type, {\n                        src: url,\n                        alt,\n                        title,\n                    });\n                },\n            },\n            toMarkdown: {\n                match: (node) => node.type.name === id,\n                runner: (state, node) => {\n                    state.addNode('image', undefined, undefined, {\n                        title: node.attrs['title'],\n                        url: node.attrs['src'],\n                        alt: node.attrs['alt'],\n                    });\n                },\n            },\n        }),\n        commands: (type) => [\n            createCmd(InsertImage, (src = '') => (state, dispatch) => {\n                if (!dispatch) return true;\n                const { tr } = state;\n                const node = type.create({ src });\n                if (!node) {\n                    return true;\n                }\n                const _tr = tr.replaceSelectionWith(node);\n                dispatch(_tr.scrollIntoView());\n                return true;\n            }),\n            createCmd(ModifyImage, (src = '') => (state, dispatch) => {\n                const node = findSelectedNodeOfType(state.selection, type);\n                if (!node) return false;\n\n                const { tr } = state;\n                dispatch?.(\n                    tr.setNodeMarkup(node.pos, undefined, { ...node.node.attrs, loading: true, src }).scrollIntoView(),\n                );\n\n                return true;\n            }),\n        ],\n        inputRules: (type) => [\n            new InputRule(\n                /!\\[(?<alt>.*?)]\\((?<filename>.*?)\\s*(?=\"|\\))\"?(?<title>[^\"]+)?\"?\\)/,\n                (state, match, start, end) => {\n                    const [okay, alt, src = '', title] = match;\n                    const { tr } = state;\n                    if (okay) {\n                        tr.replaceWith(start, end, type.create({ src, alt, title }));\n                    }\n\n                    return tr;\n                },\n            ),\n        ],\n        view: (ctx) => (node, view, getPos) => {\n            const nodeType = node.type;\n            const createIcon = ctx.get(themeToolCtx).slots.icon;\n            const container = document.createElement('span');\n            container.className = utils.getClassName(node.attrs, id, containerStyle);\n\n            const content = document.createElement('img');\n\n            container.append(content);\n            let icon = createIcon('image');\n            const placeholder = document.createElement('span');\n            placeholder.classList.add('placeholder');\n            container.append(icon, placeholder);\n\n            const setIcon = (name: Icon) => {\n                const nextIcon = createIcon(name);\n                container.replaceChild(nextIcon, icon);\n                icon = nextIcon;\n            };\n\n            const loadImage = (src: string) => {\n                container.classList.add('system', 'loading');\n                setIcon('loading');\n                const img = document.createElement('img');\n                img.src = src;\n\n                img.onerror = () => {\n                    const pos = getPos();\n                    if (!pos) return;\n\n                    const { tr } = view.state;\n                    const _tr = tr.setNodeMarkup(pos, nodeType, {\n                        ...node.attrs,\n                        src,\n                        loading: false,\n                        failed: true,\n                    });\n                    view.dispatch(_tr);\n                };\n\n                img.onload = () => {\n                    const { tr } = view.state;\n\n                    const pos = getPos();\n                    if (!pos) return;\n\n                    const _tr = tr.setNodeMarkup(pos, nodeType, {\n                        ...node.attrs,\n                        width: img.width,\n                        src,\n                        loading: false,\n                        failed: false,\n                    });\n                    view.dispatch(_tr);\n                };\n            };\n\n            const { src, loading, title, alt, width } = node.attrs;\n            content.src = src;\n            content.title = title || alt;\n            content.alt = alt;\n            if (width) {\n                content.width = width;\n            }\n\n            if (src.length === 0) {\n                container.classList.add('system', 'empty');\n                setIcon('image');\n            } else if (loading) {\n                loadImage(src);\n            }\n\n            return {\n                dom: container,\n                update: (updatedNode) => {\n                    if (updatedNode.type.name !== id) return false;\n\n                    const { src, alt, title, loading, failed, width } = updatedNode.attrs;\n                    content.src = src;\n                    content.alt = alt;\n                    content.title = title || alt;\n                    if (width) {\n                        content.width = width;\n                    }\n                    if (loading) {\n                        loadImage(src);\n                        return true;\n                    }\n                    if (failed) {\n                        container.classList.remove('loading', 'empty');\n                        container.classList.add('system', 'failed');\n                        setIcon('brokenImage');\n                        return true;\n                    }\n                    if (src.length > 0) {\n                        container.classList.remove('system', 'empty', 'loading');\n                        return true;\n                    }\n\n                    container.classList.add('system', 'empty');\n                    setIcon('image');\n                    return true;\n                },\n                selectNode: () => {\n                    container.classList.add('ProseMirror-selectednode');\n                },\n                deselectNode: () => {\n                    container.classList.remove('ProseMirror-selectednode');\n                },\n            };\n        },\n    };\n});\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { createCmd, createCmdKey } from '@milkdown/core';\nimport { liftListItem, sinkListItem, splitListItem, wrappingInputRule } from '@milkdown/prose';\nimport { createNode, createShortcut } from '@milkdown/utils';\n\nimport { SupportedKeys } from '../supported-keys';\n\ntype Keys = SupportedKeys['SinkListItem'] | SupportedKeys['LiftListItem'] | SupportedKeys['NextListItem'];\n\nconst id = 'list_item';\n\nexport const SplitListItem = createCmdKey('SplitListItem');\nexport const SinkListItem = createCmdKey('SinkListItem');\nexport const LiftListItem = createCmdKey('LiftListItem');\n\nexport const listItem = createNode<Keys>((utils) => {\n    const style = utils.getStyle(\n        (themeTool, { css }) =>\n            css`\n                &,\n                & > * {\n                    margin: 0.5rem 0;\n                }\n\n                &,\n                li {\n                    &::marker {\n                        color: ${themeTool.palette('primary')};\n                    }\n                }\n            `,\n    );\n\n    return {\n        id,\n        schema: () => ({\n            group: 'listItem',\n            content: 'paragraph block*',\n            defining: true,\n            parseDOM: [{ tag: 'li' }],\n            toDOM: (node) => ['li', { class: utils.getClassName(node.attrs, 'list-item', style) }, 0],\n            parseMarkdown: {\n                match: ({ type, checked }) => type === 'listItem' && checked === null,\n                runner: (state, node, type) => {\n                    state.openNode(type);\n                    state.next(node.children);\n                    state.closeNode();\n                },\n            },\n            toMarkdown: {\n                match: (node) => node.type.name === id,\n                runner: (state, node) => {\n                    state.openNode('listItem');\n                    state.next(node.content);\n                    state.closeNode();\n                },\n            },\n        }),\n        inputRules: (nodeType) => [wrappingInputRule(/^\\s*([-+*])\\s$/, nodeType)],\n        commands: (nodeType) => [\n            createCmd(SplitListItem, () => splitListItem(nodeType)),\n            createCmd(SinkListItem, () => sinkListItem(nodeType)),\n            createCmd(LiftListItem, () => liftListItem(nodeType)),\n        ],\n        shortcuts: {\n            [SupportedKeys.NextListItem]: createShortcut(SplitListItem, 'Enter'),\n            [SupportedKeys.SinkListItem]: createShortcut(SinkListItem, 'Mod-]'),\n            [SupportedKeys.LiftListItem]: createShortcut(LiftListItem, 'Mod-['),\n        },\n    };\n});\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { createCmd, createCmdKey } from '@milkdown/core';\nimport { wrapIn, wrappingInputRule } from '@milkdown/prose';\nimport { createNode, createShortcut } from '@milkdown/utils';\n\nimport { SupportedKeys } from '../supported-keys';\n\ntype Keys = SupportedKeys['OrderedList'];\n\nexport const WrapInOrderedList = createCmdKey('WrapInOrderedList');\n\nconst id = 'ordered_list';\nexport const orderedList = createNode<Keys>((utils) => ({\n    id,\n    schema: () => ({\n        content: 'listItem+',\n        group: 'block',\n        attrs: {\n            order: {\n                default: 1,\n            },\n        },\n        parseDOM: [\n            {\n                tag: 'ol',\n                getAttrs: (dom) => {\n                    if (!(dom instanceof HTMLElement)) {\n                        throw new Error();\n                    }\n                    return { order: dom.hasAttribute('start') ? Number(dom.getAttribute('start')) : 1 };\n                },\n            },\n        ],\n        toDOM: (node) => [\n            'ol',\n            {\n                ...(node.attrs['order'] === 1 ? {} : node.attrs['order']),\n                class: utils.getClassName(node.attrs, 'ordered-list'),\n            },\n            0,\n        ],\n        parseMarkdown: {\n            match: ({ type, ordered }) => type === 'list' && !!ordered,\n            runner: (state, node, type) => {\n                state.openNode(type).next(node.children).closeNode();\n            },\n        },\n        toMarkdown: {\n            match: (node) => node.type.name === id,\n            runner: (state, node) => {\n                state.openNode('list', undefined, { ordered: true, start: 1 });\n                state.next(node.content);\n                state.closeNode();\n            },\n        },\n    }),\n    inputRules: (nodeType) => [\n        wrappingInputRule(\n            /^(\\d+)\\.\\s$/,\n            nodeType,\n            (match) => ({ order: Number(match[1]) }),\n            (match, node) => node.childCount + node.attrs['order'] === Number(match[1]),\n        ),\n    ],\n    commands: (nodeType) => [createCmd(WrapInOrderedList, () => wrapIn(nodeType))],\n    shortcuts: {\n        [SupportedKeys.OrderedList]: createShortcut(WrapInOrderedList, 'Mod-Alt-7'),\n    },\n}));\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { createCmd, createCmdKey } from '@milkdown/core';\nimport { setBlockType } from '@milkdown/prose';\nimport { createNode, createShortcut } from '@milkdown/utils';\n\nimport { SupportedKeys } from '../supported-keys';\n\ntype Keys = SupportedKeys['Text'];\n\nexport const TurnIntoText = createCmdKey('TurnIntoText');\n\nconst id = 'paragraph';\nexport const paragraph = createNode<Keys>((utils) => {\n    const style = utils.getStyle((_, { css }) => {\n        return css`\n            font-size: 1rem;\n            line-height: 1.5;\n            letter-spacing: 0.5px;\n        `;\n    });\n\n    return {\n        id,\n        schema: () => ({\n            content: 'inline*',\n            group: 'block',\n            parseDOM: [{ tag: 'p' }],\n            toDOM: (node) => ['p', { class: utils.getClassName(node.attrs, id, style) }, 0],\n            parseMarkdown: {\n                match: (node) => node.type === 'paragraph',\n                runner: (state, node, type) => {\n                    state.openNode(type);\n                    if (node.children) {\n                        state.next(node.children);\n                    } else {\n                        state.addText(node['value'] as string);\n                    }\n                    state.closeNode();\n                },\n            },\n            toMarkdown: {\n                match: (node) => node.type.name === 'paragraph',\n                runner: (state, node) => {\n                    state.openNode('paragraph');\n                    state.next(node.content);\n                    state.closeNode();\n                },\n            },\n        }),\n        commands: (nodeType) => [createCmd(TurnIntoText, () => setBlockType(nodeType))],\n        shortcuts: {\n            [SupportedKeys.Text]: createShortcut(TurnIntoText, 'Mod-Alt-0'),\n        },\n    };\n});\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { createNode } from '@milkdown/utils';\n\nexport const text = createNode(() => ({\n    id: 'text',\n    schema: () => ({\n        group: 'inline',\n        parseMarkdown: {\n            match: ({ type }) => type === 'text',\n            runner: (state, node) => {\n                state.addText(node['value'] as string);\n            },\n        },\n        toMarkdown: {\n            match: (node) => node.type.name === 'text',\n            runner: (state, node) => {\n                state.addNode('text', undefined, node.text as string);\n            },\n        },\n    }),\n}));\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { blockquote } from './blockquote';\nimport { bulletList } from './bullet-list';\nimport { codeFence } from './code-fence';\nimport { doc } from './doc';\nimport { hardbreak } from './hardbreak';\nimport { heading } from './heading';\nimport { hr } from './hr';\nimport { image } from './image';\nimport { listItem } from './list-item';\nimport { orderedList } from './ordered-list';\nimport { paragraph } from './paragraph';\nimport { text } from './text';\n\nexport const nodes = [\n    doc(),\n    paragraph(),\n    hardbreak(),\n    blockquote(),\n    codeFence(),\n    bulletList(),\n    orderedList(),\n    listItem(),\n    heading(),\n    hr(),\n    image(),\n    text(),\n];\n\nexport * from './blockquote';\nexport * from './bullet-list';\nexport * from './code-fence';\nexport * from './doc';\nexport * from './hardbreak';\nexport * from './heading';\nexport * from './hr';\nexport * from './image';\nexport * from './list-item';\nexport * from './ordered-list';\nexport * from './paragraph';\nexport * from './text';\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { Literal, Node, Parent } from 'unist';\n\nconst isParent = (node: Node): node is Parent => !!(node as Parent).children;\nconst isHTML = (node: Node): node is Literal<string> => node.type === 'html';\n\nfunction flatMapWithDepth(ast: Node, fn: (node: Node, index: number, parent: Node | null) => Node[]) {\n    return transform(ast, 0, null)[0];\n\n    function transform(node: Node, index: number, parent: Node | null) {\n        if (isParent(node)) {\n            const out = [];\n            for (let i = 0, n = node.children.length; i < n; i++) {\n                const nthChild = node.children[i];\n                if (nthChild) {\n                    const xs = transform(nthChild, i, node);\n                    if (xs) {\n                        for (let j = 0, m = xs.length; j < m; j++) {\n                            const item = xs[j];\n                            if (item) {\n                                out.push(item);\n                            }\n                        }\n                    }\n                }\n            }\n            node.children = out;\n        }\n\n        return fn(node, index, parent);\n    }\n}\n\nexport const filterHTMLPlugin = () => {\n    function transformer(tree: Node) {\n        flatMapWithDepth(tree, (node) => {\n            if (!isHTML(node)) {\n                return [node];\n            }\n\n            return [];\n        });\n    }\n    return transformer;\n};\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { createPlugin } from '@milkdown/utils';\nimport links from 'remark-inline-links';\n\nimport { filterHTMLPlugin } from './filter-html';\n\nexport const commonmarkPlugins = [\n    createPlugin(() => ({\n        remarkPlugins: () => [links, filterHTMLPlugin],\n    }))(),\n];\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { AtomList } from '@milkdown/utils';\n\nimport { marks, ModifyLink, ToggleBold, ToggleInlineCode, ToggleItalic, ToggleLink } from './mark';\nimport {\n    InsertHardbreak,\n    InsertHr,\n    InsertImage,\n    LiftListItem,\n    ModifyImage,\n    nodes,\n    SinkListItem,\n    SplitListItem,\n    TurnIntoCodeFence,\n    TurnIntoHeading,\n    TurnIntoText,\n    WrapInBlockquote,\n    WrapInBulletList,\n    WrapInOrderedList,\n} from './node';\nimport { commonmarkPlugins } from './plugin';\n\nexport * from './mark';\nexport * from './node';\nexport * from './supported-keys';\n\nexport const commonmarkNodes = AtomList.create([...nodes, ...marks]);\nexport { commonmarkPlugins };\nexport const commonmark = AtomList.create([...commonmarkPlugins, ...commonmarkNodes]);\n\nexport const commands = {\n    ToggleInlineCode,\n    ToggleItalic,\n    ToggleLink,\n    ToggleBold,\n\n    ModifyLink,\n    ModifyImage,\n\n    WrapInBlockquote,\n    WrapInBulletList,\n    WrapInOrderedList,\n\n    TurnIntoCodeFence,\n    TurnIntoHeading,\n    TurnIntoText,\n\n    InsertHardbreak,\n    InsertHr,\n    InsertImage,\n\n    SplitListItem,\n    SinkListItem,\n    LiftListItem,\n} as const;\nexport type Commands = typeof commands;\n"],"names":["id"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;MACa,gBAAgB;AAAA,EACzB,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,aAAa;AAAA,EACb,WAAW;AAAA,EACX,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ,MAAM;AAAA,EACN,YAAY;AAAA,EACZ,IAAI;AAAA,EACJ,MAAM;AAAA,EACN,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA;ACXlB,MAAMA,OAAK;MAEE,mBAAmB,aAAa;MAEhC,aAAa,WAAiB,CAAC,UAAU;QAC5C,QAAQ,MAAM,SAChB,CAAC,EAAE,SAAS,MAAM,QAAQ,EAAE,UACxB;AAAA,oCACwB,QAAQ;AAAA,yBACnB,QAAQ;AAAA,iCACA,KAAK;AAAA;AAAA,+BAEP,KAAK;AAAA;AAAA;SAIzB;AAAA,QACHA;AAAAA,IACA,QAAQ;MACJ,UAAU;AAAA,MACV,MAAM;AAAA,MACN,WAAW;AAAA,MACX,UAAU,CAAC,EAAE,KAAK;AAAA,MAClB,OAAO,CAAC,SAAS,CAAC,QAAQ,EAAE,OAAO,MAAM,aAAa,KAAK,OAAO,eAAe;AAAA,MACjF,eAAe;AAAA,QACX,OAAO,CAAC,SAAS,KAAK,SAAS;AAAA,QAC/B,QAAQ,CAAC,OAAO,MAAM,aAAa;gBACzB,SAAS;gBACT,QAAQ,KAAK;gBACb,UAAU;AAAA;AAAA;AAAA,MAGxB,YAAY;AAAA,QACR,OAAO,CAAC,SAAS,KAAK,KAAK,SAASA;AAAAA,QACpC,QAAQ,CAAC,OAAO,MAAM,SAAS;gBACrB,SAAS,MAAM,cAAc,KAAK,QAAQ;AAAA;AAAA;AAAA;AAAA,IAI5D,YAAY,CAAC,aAAa,CAAC,SAAS,0BAA0B;AAAA,IAC9D,UAAU,CAAC,aAAa,CAAC,UAAU,kBAAkB,MAAM,WAAW;AAAA,IACtE,WAAW;AAAA,OACN,cAAc,aAAa,eAAe,kBAAkB;AAAA;AAAA;AAAA;ACzCzE,MAAMA,OAAK;MAEE,eAAe,aAAa;MAE5B,KAAK,WAAiB,CAAC;MAChCA;AAAAA,EACA,QAAQ;IACJ,UAAU;AAAA,MACN,EAAE,KAAK;AAAA,MACP,EAAE,KAAK;AAAA,MACP,EAAE,OAAO,cAAc,UAAU,CAAC,UAAW,UAAU;AAAA;AAAA,IAE3D,OAAO,CAAC,SAAS,CAAC,MAAM,EAAE,OAAO,MAAM,aAAa,KAAK,OAAOA;AAAAA,IAChE,eAAe;AAAA,MACX,OAAO,CAAC,SAAS,KAAK,SAAS;AAAA,MAC/B,QAAQ,CAAC,OAAO,MAAM,aAAa;cACzB,SAAS;cACT,KAAK,KAAK;cACV,UAAU;AAAA;AAAA;AAAA,IAGxB,YAAY;AAAA,MACR,OAAO,CAAC,SAAS,KAAK,KAAK,SAASA;AAAAA,MACpC,QAAQ,CAAC,OAAO,SAAS;cACf,SAAS,MAAM;AAAA;AAAA;AAAA;AAAA,EAIjC,YAAY,CAAC,aAAa;AAAA,IACtB,SAAS,0BAA0B;AAAA,IACnC,SAAS,4BAA4B;AAAA;AAAA,EAEzC,UAAU,CAAC,aAAa,CAAC,UAAU,cAAc,MAAM,WAAW;AAAA,EAClE,WAAW;AAAA,KACN,cAAc,KAAK,eAAe,cAAc;AAAA;AAAA;MCtC5C,aAAa,aAAqB;MAClC,aAAa,aAAqB;AAC/C,MAAMA,OAAK;MACE,OAAO,WAAW,CAAC,UAAU;QAChC,QAAQ,MAAM,SAAS,CAAC,WAAW,EAAE,UAAU;UAC3C,YAAY,UAAU,QAAQ;WAE7B;AAAA,qBACM,UAAU,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA,oCAKH;AAAA,uCACG,wBAAwB;AAAA;AAAA;AAAA;SAIpD;AAAA,QACHA;AAAAA,IACA,QAAQ;MACJ,OAAO;AAAA,QACH,MAAM;AAAA,QACN,OAAO,EAAE,SAAS;AAAA;AAAA,MAEtB,WAAW;AAAA,MACX,UAAU;AAAA,QACN;AAAA,UACI,KAAK;AAAA,UACL,UAAU,CAAC,QAAQ;gBACX,iBAAiB,cAAc;oBACzB,IAAI;AAAA;mBAEP,EAAE,MAAM,IAAI,aAAa,SAAS,OAAO,IAAI,aAAa;AAAA;AAAA;AAAA;AAAA,MAI7E,OAAO,CAAC,SAAS,CAAC,KAAK,iCAAK,KAAK,QAAV,EAAiB,OAAO,MAAM,aAAa,KAAK,OAAOA,MAAI;AAAA,MAClF,eAAe;AAAA,QACX,OAAO,CAAC,SAAS,KAAK,SAAS;AAAA,QAC/B,QAAQ,CAAC,OAAO,MAAM,aAAa;gBACzB,MAAM,KAAK;gBACX,QAAQ,KAAK;gBACb,SAAS,UAAU,EAAE,MAAM,KAAK;gBAChC,KAAK,KAAK;gBACV,UAAU;AAAA;AAAA;AAAA,MAGxB,YAAY;AAAA,QACR,OAAO,CAAC,SAAS,KAAK,KAAK,SAASA;AAAAA,QACpC,QAAQ,CAAC,OAAO,SAAS;gBACf,SAAS,MAAM,QAAQ,QAAW;AAAA,YACpC,OAAO,KAAK,MAAM;AAAA,YAClB,KAAK,KAAK,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA,IAKhC,UAAU,CAAC,aAAa;AAAA,MACpB,UAAU,YAAY,CAAC,OAAO,OAAO,WAAW,UAAU,EAAE;AAAA,MAC5D,UAAU,YAAY,CAAC,OAAO,OAAO,CAAC,OAAO,aAAa;YAClD,CAAC;iBAAiB;cAEhB,EAAE,kBAAU,MAAM;YAEpB;YACA,MAAM;cACJ,EAAE,cAAc;cAChB,IAAI,aAAa,UAAU,MAAM,UAAU,IAAI,CAAC,GAAG,MAAM;cACvD,OAAM,KAAK,QAAQ,EAAE,QAAQ;mBACtB;kBACD;mBACC;AAAA;;;YAIX,CAAC;iBAAa;cAEZ,OAAO,KAAK,MAAM,KAAK,CAAC,EAAE,WAAW,SAAS;YAChD,CAAC;iBAAa;cAEZ,QAAQ;cACR,MAAM,MAAM,KAAK;cACjB,EAAE,OAAO;cACT,WAAW,OAAM,KAAK,OAAO,iCAAK,KAAK,QAAV,EAAiB;iBAEhD,GACK,WAAW,OAAO,KAAK,MACvB,QAAQ,OAAO,KAAK,UACpB,aAAa,IAAI,cAAc,GAAG,UAAU,UAC5C;eAGF;AAAA;AAAA;AAAA,IAGf,YAAY,CAAC,UAAU,QAAQ;AAAA,MAC3B,IAAI,UAAU,+DAA+D,CAAC,OAAO,OAAO,OAAO,QAAQ;cACjG,CAAC,MAAM,QAAO,IAAI,MAAM,SAAS;cACjC,EAAE,OAAO;YACX,MAAM;gBACA,UAAU,SAAQ;aACrB,YAAY,OAAO,KAAK,IAAI,IAAI,WAAW,KAAK,UAAU,QACzD,OACA,QAAQ,SAAS,OACjB,SAAS,OAAO,EAAE,OAAO;AAAA;eAI1B;AAAA;AAAA;AAAA;AAAA;AC1GvB,MAAMA,OAAK;MACE,aAAa,aAAa;MAC1B,SAAS,WAAiB,CAAC,UAAU;QACxC,QAAQ,MAAM,SAChB,CAAC,GAAG,EAAE,UACF;AAAA;AAAA;SAID;AAAA,QACHA;AAAAA,IACA,QAAQ;MACJ,UAAU;AAAA,QACN,EAAE,KAAK;AAAA,QACP,EAAE,KAAK;AAAA,QACP,EAAE,OAAO,cAAc,UAAU,CAAC,UAAW,UAAU;AAAA;AAAA,MAE3D,OAAO,CAAC,SAAS,CAAC,UAAU,EAAE,OAAO,MAAM,aAAa,KAAK,OAAOA,MAAI;AAAA,MACxE,eAAe;AAAA,QACX,OAAO,CAAC,SAAS,KAAK,SAAS;AAAA,QAC/B,QAAQ,CAAC,OAAO,MAAM,aAAa;gBACzB,SAAS;gBACT,KAAK,KAAK;gBACV,UAAU;AAAA;AAAA;AAAA,MAGxB,YAAY;AAAA,QACR,OAAO,CAAC,SAAS,KAAK,KAAK,SAASA;AAAAA,QACpC,QAAQ,CAAC,OAAO,SAAS;gBACf,SAAS,MAAM;AAAA;AAAA;AAAA;AAAA,IAIjC,YAAY,CAAC,aAAa;AAAA,MACtB,SAAS,wBAAwB;AAAA,MACjC,SAAS,4BAA4B;AAAA;AAAA,IAEzC,UAAU,CAAC,aAAa,CAAC,UAAU,YAAY,MAAM,WAAW;AAAA,IAChE,WAAW;AAAA,OACN,cAAc,OAAO,eAAe,YAAY;AAAA;AAAA;AAAA;MCzChD,QAAQ,CAAC,cAAc,MAAM,UAAU;ACGpD,MAAMA,OAAK;MAEE,mBAAmB,aAAa;MAEhC,aAAa,WAAiB,CAAC,UAAU;QAC5C,QAAQ,MAAM,SAChB,CAAC,WAAW,EAAE,UACV;AAAA;AAAA;AAAA,yCAG6B,UAAU,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;SAQhD;AAAA,QACHA;AAAAA,IACA,QAAQ;MACJ,SAAS;AAAA,MACT,OAAO;AAAA,MACP,UAAU;AAAA,MACV,UAAU,CAAC,EAAE,KAAK;AAAA,MAClB,OAAO,CAAC,SAAS,CAAC,cAAc,EAAE,OAAO,MAAM,aAAa,KAAK,OAAOA,MAAI,UAAU;AAAA,MACtF,eAAe;AAAA,QACX,OAAO,CAAC,EAAE,WAAW,SAASA;AAAAA,QAC9B,QAAQ,CAAC,OAAO,MAAM,SAAS;gBACrB,SAAS,MAAM,KAAK,KAAK,UAAU;AAAA;AAAA;AAAA,MAGjD,YAAY;AAAA,QACR,OAAO,CAAC,SAAS,KAAK,KAAK,SAASA;AAAAA,QACpC,QAAQ,CAAC,OAAO,SAAS;gBACf,SAAS,cAAc,KAAK,KAAK,SAAS;AAAA;AAAA;AAAA;AAAA,IAI5D,YAAY,CAAC,aAAa,CAAC,kBAAkB,YAAY;AAAA,IACzD,UAAU,CAAC,aAAa,CAAC,UAAU,kBAAkB,MAAM,OAAO;AAAA,IAClE,WAAW;AAAA,OACN,cAAc,aAAa,eAAe,kBAAkB;AAAA;AAAA;AAAA;MC1C5D,mBAAmB,aAAa;MAEhC,aAAa,WAAiB,CAAC,UAAU;QAC5C,MAAK;SACJ;AAAA,IACH;AAAA,IACA,QAAQ;MACJ,SAAS;AAAA,MACT,OAAO;AAAA,MACP,UAAU,CAAC,EAAE,KAAK;AAAA,MAClB,OAAO,CAAC,SAAS;eACN,CAAC,MAAM,EAAE,OAAO,MAAM,aAAa,KAAK,OAAO,kBAAkB;AAAA;AAAA,MAE5E,eAAe;AAAA,QACX,OAAO,CAAC,EAAE,MAAM,cAAc,SAAS,UAAU,CAAC;AAAA,QAClD,QAAQ,CAAC,OAAO,MAAM,SAAS;gBACrB,SAAS,MAAM,KAAK,KAAK,UAAU;AAAA;AAAA;AAAA,MAGjD,YAAY;AAAA,QACR,OAAO,CAAC,SAAS,KAAK,KAAK,SAAS;AAAA,QACpC,QAAQ,CAAC,OAAO,SAAS;gBACf,SAAS,QAAQ,QAAW,EAAE,SAAS,SAAS,KAAK,KAAK,SAAS;AAAA;AAAA;AAAA;AAAA,IAIrF,YAAY,CAAC,aAAa,CAAC,kBAAkB,kBAAkB;AAAA,IAC/D,UAAU,CAAC,aAAa,CAAC,UAAU,kBAAkB,MAAM,OAAO;AAAA,IAClE,WAAW;AAAA,OACN,cAAc,aAAa,eAAe,kBAAkB;AAAA;AAAA;AAAA;AC7BzE,MAAM,kBAAkB;AAAA,EACpB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;MAGS,qBAAqB;MACrB,kBAAkB;MAElB,oBAAoB,aAAa;AAE9C,MAAMA,OAAK;MACE,YAAY,WAA8C,CAAC,OAAO,YAAY;QACjF,QAAQ,MAAM,SAAS,CAAC,EAAE,SAAS,OAAO,MAAM,QAAQ,EAAE,UAAU;UAChE,EAAE,QAAQ,WAAW,WAAW;UAChC,EAAE,WAAW,WAAW;WACvB;AAAA,gCACiB,QAAQ;AAAA,qBACnB,QAAQ;AAAA;AAAA;AAAA,6BAGA;AAAA,2BACF,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAaC,KAAK;AAAA;AAAA,kBAEpB;AAAA,kBACA;AAAA;AAAA,oCAEkB,QAAQ;AAAA;AAAA;AAAA,yBAGnB,QAAQ,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAWf,QAAQ,SAAS;AAAA,mCACX,mBAAmB,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA,sCAKxB,QAAQ;AAAA,iCACb,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAiBP,QAAQ,aAAa;AAAA,6BAC1B,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAkBnB;AAAA,kBACA;AAAA,oCACkB,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAM1B,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA,+BAKG,KAAK;AAAA;AAAA;AAAA;AAAA,+BAIL,KAAK;AAAA;AAAA;AAAA;AAAA,kBAIlB,UAAU;AAAA;AAAA;AAAA;SAKjB;AAAA,QACHA;AAAAA,IACA,QAAQ;MACJ,SAAS;AAAA,MACT,OAAO;AAAA,MACP,OAAO;AAAA,MACP,UAAU;AAAA,MACV,MAAM;AAAA,MACN,OAAO;AAAA,QACH,UAAU;AAAA,UACN,SAAS;AAAA;AAAA,QAEb,MAAM;AAAA,UACF,SAAS;AAAA;AAAA;AAAA,MAGjB,UAAU;AAAA,QACN;AAAA,UACI,KAAK;AAAA,UACL,oBAAoB;AAAA,UACpB,UAAU,CAAC,QAAQ;gBACX,iBAAiB,cAAc;oBACzB,IAAI,MAAM;AAAA;mBAEb,EAAE,UAAU,IAAI,QAAQ;AAAA;AAAA;AAAA;AAAA,MAI3C,OAAO,CAAC,SAAS;eACN;AAAA,UACH;AAAA,UACA;AAAA,YACI,iBAAiB,KAAK,MAAM;AAAA,YAC5B,OAAO,MAAM,aAAa,KAAK,OAAO,cAAc;AAAA;AAAA,UAExD,CAAC,QAAQ,EAAE,YAAY,WAAW;AAAA;AAAA;AAAA,MAG1C,eAAe;AAAA,QACX,OAAO,CAAC,EAAE,WAAW,SAAS;AAAA,QAC9B,QAAQ,CAAC,OAAO,MAAM,SAAS;gBACrB,WAAW,KAAK;gBAChB,QAAQ,KAAK;gBACb,SAAS,MAAM,EAAE;cACnB,OAAO;kBACD,QAAQ;AAAA;gBAEZ;AAAA;AAAA;AAAA,MAGd,YAAY;AAAA,QACR,OAAO,CAAC,SAAS,KAAK,KAAK,SAASA;AAAAA,QACpC,QAAQ,CAAC,OAAO,SAAS;;gBACf,QAAQ,QAAQ,QAAW,YAAK,QAAQ,eAAb,mBAAyB,SAAQ,IAAI;AAAA,YAClE,MAAM,KAAK,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA,IAKjC,YAAY,CAAC,aAAa;AAAA,MACtB,uBAAuB,oBAAoB,UAAU,CAAC,UAAU;cACtD,CAAC,IAAI,YAAY;YACnB,CAAC;;eACE,EAAE;AAAA;AAAA,MAEb,uBAAuB,iBAAiB,UAAU,CAAC,UAAU;cACnD,CAAC,IAAI,YAAY;YACnB,CAAC;;eACE,EAAE;AAAA;AAAA;AAAA,IAGjB,UAAU,CAAC,aAAa,CAAC,UAAU,mBAAmB,MAAM,aAAa;AAAA,IACzE,WAAW;AAAA,OACN,cAAc,YAAY,eAAe,mBAAmB;AAAA;AAAA,IAEjE,MAAM,CAAC,QAAQ,CAAC,MAAM,MAAM,WAAW;YAC7B,YAAY,SAAS,cAAc;YACnC,gBAAgB,SAAS,cAAc;YACvC,SAAS,SAAS,cAAc;YAChC,MAAM,SAAS,cAAc;YAC7B,OAAO,SAAS,cAAc;YAE9B,eAAe,SAAS,cAAc;mBAC/B,YAAY;YACnB,QAAQ,SAAS,cAAc;mBACxB,YAAY;UACrB,KAAK,UAAU;qBACF,YAAY,IAAI,IAAI,cAAc,MAAM,KAAK;AAAA;aAGvD,YAAY;aACZ,iBAAiB,aAAa,CAAC,MAAM;UACtC;UACA;YAEE,CAAC,KAAK;;cAEJ,KAAK,EAAE;YACT,gBAAgB;;cACd,EAAE,OAAO,KAAK;aAEf,SACD,GAAG,cAAc,UAAU,QAAW;AAAA,UAClC,MAAM;AAAA,UACN,UAAU,GAAG,QAAQ;AAAA;AAAA;mBAIpB,iBAAiB,aAAa,CAAC,MAAM;UAC5C;UACA;YAEE,CAAC,KAAK;;cACJ,EAAE,OAAO,KAAK;aAEf,SACD,GAAG,cAAc,UAAU,QAAW;AAAA,UAClC,MAAM;AAAA,UACN,UAAU,UAAU,QAAQ;AAAA;AAAA;eAI/B,iBAAiB,aAAa,MAAM;YACrC,CAAC,KAAK,YAAY,OAAO,QAAQ,YAAY;;cAE3C,EAAE,OAAO,KAAK;aAEf,SACD,GAAG,cAAc,UAAU,QAAW;AAAA,UAClC,MAAM;AAAA,UACN,UAAU,UAAU,QAAQ;AAAA;AAAA;AAKvC,2CAAS,iBAAgB,iBAAiB,QAAQ,CAAC,SAAS;cACnD,SAAS,SAAS,cAAc;eAC/B,YAAY;eACZ,YAAY,QAAQ;eACpB,YAAY;eACZ,aAAa,cAAc;AAAA;WAGjC,aAAa;oBACJ,YAAY;oBACZ,kBAAkB;oBAClB,OAAO;oBACP,OAAO;UACjB,OAAO;YACL,cAAc,SAAS,cAAc;WACtC,OAAO;kBACA,MAAM,aAAa;gBAErB,OAAO,eAAe;gBACtB,aAAa,SAAS,MAAM,aAAa,KAAK,OAAO,cAAc;gBACnE,aAAa,iBAAiB,KAAK,MAAM;YAC7C,YAAY,KAAK,MAAM,eAAe;aACrC,aAAa,aAAa,KAAK,MAAM,UAAU,SAAS;aAExD;AAAA,QACH,KAAK;AAAA,QACL,YAAY;AAAA,QACZ,QAAQ,CAAC,gBAAgB;cACjB,YAAY,KAAK,SAASA;mBAAW;gBAEnC,OAAO,YAAY,MAAM;oBACrB,QAAQ,cAAc;gBAC1B,YAAY,QAAQ;iBACnB,aAAa,aAAa,YAAY,MAAM,UAAU,SAAS;iBAE/D;AAAA;AAAA;AAAA;AAAA;AAAA;MCxTd,MAAM,WAAW,MAAM;SACzB;AAAA,IACH,IAAI;AAAA,IACJ,QAAQ;MACJ,SAAS;AAAA,MACT,eAAe;AAAA,QACX,OAAO,CAAC,EAAE,WAAW,SAAS;AAAA,QAC9B,QAAQ,CAAC,OAAO,MAAM,SAAS;gBACrB,WAAW,MAAM;AAAA;AAAA;AAAA,MAG/B,YAAY;AAAA,QACR,OAAO,CAAC,SAAS,KAAK,KAAK,SAAS;AAAA,QACpC,QAAQ,CAAC,OAAO,SAAS;gBACf,SAAS;gBACT,KAAK,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;MCTvB,kBAAkB,aAAa;MAE/B,YAAY,WAAiB,CAAC,UAAU;SAC1C;AAAA,IACH,IAAI;AAAA,IACJ,QAAQ;MACJ,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,YAAY;AAAA,MACZ,UAAU,CAAC,EAAE,KAAK;AAAA,MAClB,OAAO,CAAC,SAAS,CAAC,MAAM,EAAE,OAAO,MAAM,aAAa,KAAK,OAAO;AAAA,MAChE,eAAe;AAAA,QACX,OAAO,CAAC,EAAE,WAAW,SAAS;AAAA,QAC9B,QAAQ,CAAC,OAAO,GAAG,SAAS;gBAClB,QAAQ;AAAA;AAAA;AAAA,MAGtB,YAAY;AAAA,QACR,OAAO,CAAC,SAAS,KAAK,KAAK,SAAS;AAAA,QACpC,QAAQ,CAAC,UAAU;gBACT,QAAQ;AAAA;AAAA;AAAA;AAAA,IAI1B,UAAU,CAAC,SAAS;AAAA,MAChB,UAAU,iBAAiB,MAAM,CAAC,OAAO,aAAa;6CACvC,MAAM,GAAG,QAAQ,aAAa,MAAM,qBAAqB,KAAK,UAAU;eAC5E;AAAA;AAAA;AAAA,IAGf,WAAW;AAAA,OACN,cAAc,YAAY,eAAe,iBAAiB;AAAA;AAAA,IAE/D,cAAc,CAAC,SAAS;AAAA,MACpB,IAAI,OAAO;AAAA,QACP,KAAK,IAAI,UAAU;AAAA,QACnB,mBAAmB,CAAC,KAAK,WAAW,aAAa;cACzC,CAAC,IAAI;;gBACH,CAAC,MAAM;cACT,CAAC;;gBAEC,CAAC,QAAQ,GAAG;gBAEZ,aAAa,GAAG,QAAQ;cAC1B,YAAY;gBACR,kBAAkB,cAAc;;;kBAG9B,EAAE,SAAS;mBACV,SAAS,GAAG,cAAc,MAAM,MAAM,QAAW;AAAA;gBAGtD,gBAAgB,gBAAgB;cAClC,eAAe;gBACX,MAAM,SAAS;kBACb,EAAE,MAAM,OAAO;qBACZ,IAAI,aAAa,MAAM,IAAI,CAAC,MAAM,QAAQ;kBAC3C,KAAK,SAAS,MAAM;sBACd,IAAI,cAAc,KAAK,MAAM,QAAW;AAAA;AAAA;mBAI/C;AAAA;;;;;;;ACxD/B,MAAM,eAAe,MAAM,GACtB,KAAK,GACL,IAAI,CAAC,GAAG,MAAM,IAAI;MAUV,kBAAkB,aAAqB;MAEvC,mBAAmB,IAAI,UAAU;MAEjC,UAAU,WAAiB,CAAC,UAAU;QACzC,MAAK;QAEL,QAAQ,CAAC,UACX,MAAM,SAAS,CAAC,GAAG,EAAE,UAAU;UACrB,aAAqC;AAAA,MACvC,GAAG;AAAA;AAAA;AAAA;AAAA,MAIH,GAAG;AAAA;AAAA;AAAA;AAAA,MAIH,GAAG;AAAA;AAAA;AAAA;AAAA,MAIH,GAAG;AAAA;AAAA;AAAA;AAAA,MAIH,GAAG;AAAA;AAAA;AAAA;AAAA,MAIH,GAAG;AAAA;AAAA;AAAA;AAAA;WAMA;AAAA,kBACD,WAAW,UAAU;AAAA;AAAA;AAAA;AAAA;SAM5B;AAAA,IACH;AAAA,IACA,QAAQ;MACJ,SAAS;AAAA,MACT,OAAO;AAAA,MACP,UAAU;AAAA,MACV,OAAO;AAAA,QACH,IAAI;AAAA,UACA,SAAS;AAAA;AAAA,QAEb,OAAO;AAAA,UACH,SAAS;AAAA;AAAA;AAAA,MAGjB,UAAU,aAAa,IAAI,CAAC;QACxB,KAAK,IAAI;AAAA,QACT,UAAU,CAAC,SAAS;cACZ,kBAAkB,cAAc;kBAC1B,IAAI;AAAA;iBAEP,EAAE,OAAO,GAAG,IAAI,KAAK;AAAA;AAAA;AAAA,MAGpC,OAAO,CAAC,SAAS;eACN;AAAA,UACH,IAAI,KAAK,MAAM;AAAA,UACf;AAAA,YACI,IAAI,KAAK,MAAM,SAAS,KAAK,YAAY,MAAM,KAAK,KAAK,KAAK;AAAA,YAC9D,OAAO,MAAM,aACT,KAAK,OACL,YAAY,KAAK,MAAM,YACvB,MAAM,KAAK,MAAM;AAAA;AAAA,UAGzB;AAAA;AAAA;AAAA,MAGR,eAAe;AAAA,QACX,OAAO,CAAC,EAAE,WAAW,SAAS;AAAA,QAC9B,QAAQ,CAAC,OAAO,MAAM,SAAS;gBACrB,QAAQ,KAAK;gBACb,SAAS,MAAM,EAAE,OAAO;gBACxB,KAAK,KAAK;gBACV;AAAA;AAAA;AAAA,MAGd,YAAY;AAAA,QACR,OAAO,CAAC,SAAS,KAAK,KAAK,SAAS;AAAA,QACpC,QAAQ,CAAC,OAAO,SAAS;gBACf,SAAS,WAAW,QAAW,EAAE,OAAO,KAAK,MAAM;gBACnD,KAAK,KAAK;gBACV;AAAA;AAAA;AAAA;AAAA,IAIlB,YAAY,CAAC,SACT,aAAa,IAAI,CAAC,MACd,uBAAuB,IAAI,OAAO,SAAS,YAAY,MAAM;MACzD,OAAO;AAAA;AAAA,IAGnB,UAAU,CAAC,SAAS,CAAC,UAAU,iBAAiB,CAAC,QAAQ,MAAM,aAAa,MAAM,EAAE;AAAA,IACpF,WAAW;AAAA,OACN,cAAc,KAAK,eAAe,iBAAiB,aAAa;AAAA,OAChE,cAAc,KAAK,eAAe,iBAAiB,aAAa;AAAA,OAChE,cAAc,KAAK,eAAe,iBAAiB,aAAa;AAAA,OAChE,cAAc,KAAK,eAAe,iBAAiB,aAAa;AAAA,OAChE,cAAc,KAAK,eAAe,iBAAiB,aAAa;AAAA,OAChE,cAAc,KAAK,eAAe,iBAAiB,aAAa;AAAA;AAAA,IAErE,cAAc,CAAC,MAAM,QAAQ;UACrB,OAAO;YACL,WAAW,CAAC,SAAe;eACtB,KAAK,YACP,QAAQ,kBAAkB,IAC1B,QAAQ,OAAO,IACf;AAAA;YAEH,cAAc,CAAC,OAAoB,aAAwC;cACvE,KAAK,MAAM;cACX,IAAI,YAAY,CAAC,MAAM,QAAQ;cAC7B,KAAK,SAAS,QAAQ,CAAC,MAAM;gBACzB,KAAK,YAAY,OAAO,WAAW,GAAG;;;kBAGpC,QAAQ,KAAK;kBACb,OAAK,SAAS;gBAEhB,MAAM,UAAU,MAAI;iBACjB,QAAQ,kBAAkB,MAAM,cAAc,KAAK,QAAW,iCAC1D,QAD0D;AAAA,gBAE7D;;;;;iBAKP;AAAA;aAEN;AAAA,QACH,IAAI,OAAO;AAAA,UACP,KAAK;AAAA,UACL,OAAO;AAAA,YACH,iBAAiB;AAAA,cACb,kBAAkB,MAAM;uBACb;uBACA;AAAA;AAAA,cAEX,gBAAgB,MAAM;uBACX;sBACD,OAAO,IAAI,IAAI;2BACV,MAAM;8BACD,KAAK,OAAO,CAAC,OAAO,KAAK,SAAS;AAAA,mBAC/C;uBACI;AAAA;AAAA;AAAA;AAAA,UAInB,mBAAmB,CAAC,cAAc,GAAG,cAAc;gBAC3C,KAAyB;gBAGzB,aAAa,MAAM,CAAC,gBAAgB,CAAC,YAAY,QAAQ,sBACzD,aAAa,KAAK,CAAC,gBAAgB,YAAY,aACjD;0BACc,WAAW,CAAC,MAAM;qBACrB;AAAA;AAAA;mBAIN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AClM/B,MAAMA,OAAK;MACE,WAAW,aAAqB;MAChC,KAAK,WAAW,CAAC,UAAU;QAC9B,QAAQ,MAAM,SAChB,CAAC,WAAW,EAAE,UAAU;AAAA,sBACV,UAAU,KAAK;AAAA,gCACL,UAAU,QAAQ;AAAA;AAAA;SAIvC;AAAA,QACHA;AAAAA,IACA,QAAQ;MACJ,OAAO;AAAA,MACP,UAAU,CAAC,EAAE,KAAK;AAAA,MAClB,OAAO,CAAC,SAAS,CAAC,MAAM,EAAE,OAAO,MAAM,aAAa,KAAK,OAAOA,MAAI;AAAA,MACpE,eAAe;AAAA,QACX,OAAO,CAAC,EAAE,WAAW,SAAS;AAAA,QAC9B,QAAQ,CAAC,OAAO,GAAG,SAAS;gBAClB,QAAQ;AAAA;AAAA;AAAA,MAGtB,YAAY;AAAA,QACR,OAAO,CAAC,SAAS,KAAK,KAAK,SAASA;AAAAA,QACpC,QAAQ,CAAC,UAAU;gBACT,QAAQ;AAAA;AAAA;AAAA;AAAA,IAI1B,YAAY,CAAC,SAAS;AAAA,MAClB,IAAI,UAAU,4BAA4B,CAAC,OAAO,OAAO,OAAO,QAAQ;cAC9D,EAAE,OAAO;YAEX,MAAM,IAAI;aACP,YAAY,QAAQ,GAAG,KAAK,KAAK;AAAA;eAGjC;AAAA;AAAA;AAAA,IAGf,UAAU,CAAC,MAAM,QAAQ;AAAA,MACrB,UAAU,UAAU,MAAM,CAAC,OAAO,aAAa;YACvC,CAAC;iBAAiB;cAChB,EAAE,IAAI,cAAc;cACpB,OAAO,UAAU;cACjB,OAAO,KAAK;YACd,CAAC,MAAM;iBACA;AAAA;cAEL,MAAM,GAAG,qBAAqB,MAAM,OAAO,MAAM,IAAI,IAAI,WAAW,KAAK;cACzE,MAAM,UAAU,SAAS,IAAI,IAAI,QAAQ,OAAO,GAAG;YACrD,CAAC,KAAK;iBACC;AAAA;iBAEF,IAAI,aAAa,KAAK;eACxB;AAAA;AAAA;AAAA;AAAA;MCtDV,cAAc,aAAqB;MACnC,cAAc,aAAqB;AAChD,MAAMA,OAAK;MAUE,QAAQ,WAAiC,CAAC,OAAO,YAAY;;QAChE,cAAc;AAAA,IAChB,SAAS;AAAA,IACT,OAAO;AAAA,IACP,QAAQ;AAAA,KACJ,yCAAS,gBAAT,YAAwB;QAE1B,UAAU,yCAAS,YAAT,YAAoB;QAC9B,iBAAiB,MAAM,SACzB,CAAC,WAAW,EAAE,UACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAQM,UACI;AAAA;AAAA;AAAA,oBAIA;AAAA;AAAA;AAAA;AAAA,kCAIY,UAAU,QAAQ,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAoCzB,UAAU,QAAQ;AAAA,qCACrB,UAAU,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAWf,UAAU,QAAQ,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAQ1B,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAQZ,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAQZ,YAAY;AAAA;AAAA;AAAA;AAAA;QAO1C,QAAQ,MAAM,SAChB,CAAC,GAAG,EAAE,UACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;SAWD;AAAA,IACH,IAAI;AAAA,IACJ,QAAQ;MACJ,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,YAAY;AAAA,MACZ,WAAW;AAAA,MACX,OAAO;AAAA,MACP,MAAM;AAAA,MACN,UAAU;AAAA,MACV,WAAW;AAAA,MACX,OAAO;AAAA,QACH,KAAK,EAAE,SAAS;AAAA,QAChB,KAAK,EAAE,SAAS;AAAA,QAChB,OAAO,EAAE,SAAS;AAAA,QAClB,QAAQ,EAAE,SAAS;AAAA,QACnB,SAAS,EAAE,SAAS;AAAA,QACpB,OAAO,EAAE,SAAS;AAAA;AAAA,MAEtB,UAAU;AAAA,QACN;AAAA,UACI,KAAK;AAAA,UACL,UAAU,CAAC,QAAQ;gBACX,iBAAiB,cAAc;oBACzB,IAAI;AAAA;mBAEP;AAAA,cACH,QAAQ,IAAI,UAAU,SAAS;AAAA,cAC/B,SAAS,IAAI,UAAU,SAAS;AAAA,cAChC,KAAK,IAAI,aAAa,UAAU;AAAA,cAChC,KAAK,IAAI,aAAa;AAAA,cACtB,OAAO,IAAI,aAAa,YAAY,IAAI,aAAa;AAAA,cACrD,OAAO,IAAI,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA,MAKxC,OAAO,CAAC,SAAS;eACN;AAAA,UACH;AAAA,UACA,iCACO,KAAK,QADZ;AAAA,YAEI,OAAO,MAAM,aACT,KAAK,OACLA,MACA,KAAK,MAAM,YAAY,WAAW,IAClC,KAAK,MAAM,aAAa,YAAY,IACpC;AAAA;AAAA;AAAA;AAAA,MAKhB,eAAe;AAAA,QACX,OAAO,CAAC,EAAE,WAAW,SAASA;AAAAA,QAC9B,QAAQ,CAAC,OAAO,MAAM,SAAS;gBACrB,MAAM,KAAK;gBACX,MAAM,KAAK;gBACX,QAAQ,KAAK;gBACb,QAAQ,MAAM;AAAA,YAChB,KAAK;AAAA,YACL;AAAA,YACA;AAAA;AAAA;AAAA;AAAA,MAIZ,YAAY;AAAA,QACR,OAAO,CAAC,SAAS,KAAK,KAAK,SAASA;AAAAA,QACpC,QAAQ,CAAC,OAAO,SAAS;gBACf,QAAQ,SAAS,QAAW,QAAW;AAAA,YACzC,OAAO,KAAK,MAAM;AAAA,YAClB,KAAK,KAAK,MAAM;AAAA,YAChB,KAAK,KAAK,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA,IAKhC,UAAU,CAAC,SAAS;AAAA,MAChB,UAAU,aAAa,CAAC,MAAM,OAAO,CAAC,OAAO,aAAa;YAClD,CAAC;iBAAiB;cAChB,EAAE,OAAO;cACT,OAAO,KAAK,OAAO,EAAE;YACvB,CAAC,MAAM;iBACA;AAAA;cAEL,MAAM,GAAG,qBAAqB;iBAC3B,IAAI;eACN;AAAA;AAAA,MAEX,UAAU,aAAa,CAAC,MAAM,OAAO,CAAC,OAAO,aAAa;cAChD,OAAO,uBAAuB,MAAM,WAAW;YACjD,CAAC;iBAAa;cAEZ,EAAE,OAAO;6CAEX,GAAG,cAAc,KAAK,KAAK,QAAW,iCAAK,KAAK,KAAK,QAAf,EAAsB,SAAS,MAAM,QAAO;eAG/E;AAAA;AAAA;AAAA,IAGf,YAAY,CAAC,SAAS;AAAA,MAClB,IAAI,UACA,sEACA,CAAC,OAAO,OAAO,OAAO,QAAQ;cACpB,CAAC,MAAM,KAAK,MAAM,IAAI,SAAS;cAC/B,EAAE,OAAO;YACX,MAAM;aACH,YAAY,OAAO,KAAK,KAAK,OAAO,EAAE,KAAK,KAAK;AAAA;eAGhD;AAAA;AAAA;AAAA,IAInB,MAAM,CAAC,QAAQ,CAAC,MAAM,MAAM,WAAW;YAC7B,WAAW,KAAK;YAChB,aAAa,IAAI,IAAI,cAAc,MAAM;YACzC,YAAY,SAAS,cAAc;gBAC/B,YAAY,MAAM,aAAa,KAAK,OAAOA,MAAI;YAEnD,UAAU,SAAS,cAAc;gBAE7B,OAAO;UACb,OAAO,WAAW;YAChB,eAAc,SAAS,cAAc;mBAC/B,UAAU,IAAI;gBAChB,OAAO,MAAM;YAEjB,UAAU,CAAC,SAAe;cACtB,WAAW,WAAW;kBAClB,aAAa,UAAU;eAC1B;AAAA;YAGL,YAAY,CAAC,SAAgB;kBACrB,UAAU,IAAI,UAAU;gBAC1B;cACF,MAAM,SAAS,cAAc;YAC/B,MAAM;YAEN,UAAU,MAAM;gBACV,MAAM;cACR,CAAC;;gBAEC,EAAE,OAAO,KAAK;gBACd,MAAM,GAAG,cAAc,KAAK,UAAU,iCACrC,KAAK,QADgC;AAAA,YAExC;YACA,SAAS;AAAA,YACT,QAAQ;AAAA;eAEP,SAAS;AAAA;YAGd,SAAS,MAAM;gBACT,EAAE,OAAO,KAAK;gBAEd,MAAM;cACR,CAAC;;gBAEC,MAAM,GAAG,cAAc,KAAK,UAAU,iCACrC,KAAK,QADgC;AAAA,YAExC,OAAO,IAAI;AAAA,YACX;YACA,SAAS;AAAA,YACT,QAAQ;AAAA;eAEP,SAAS;AAAA;AAAA;YAIhB,EAAE,KAAK,SAAS,OAAO,KAAK,UAAU,KAAK;cACzC,MAAM;cACN,QAAQ,SAAS;cACjB,MAAM;UACV,OAAO;gBACC,QAAQ;AAAA;UAGhB,IAAI,WAAW,GAAG;kBACR,UAAU,IAAI,UAAU;gBAC1B;AAAA,iBACD,SAAS;kBACN;AAAA;aAGP;AAAA,QACH,KAAK;AAAA,QACL,QAAQ,CAAC,gBAAgB;cACjB,YAAY,KAAK,SAASA;mBAAW;gBAEnC,EAAE,WAAK,WAAK,eAAO,mBAAS,QAAQ,kBAAU,YAAY;kBACxD,MAAM;kBACN,MAAM;kBACN,QAAQ,UAAS;cACrB,QAAO;oBACC,QAAQ;AAAA;cAEhB,UAAS;sBACC;mBACH;AAAA;cAEP,QAAQ;sBACE,UAAU,OAAO,WAAW;sBAC5B,UAAU,IAAI,UAAU;oBAC1B;mBACD;AAAA;cAEP,KAAI,SAAS,GAAG;sBACN,UAAU,OAAO,UAAU,SAAS;mBACvC;AAAA;oBAGD,UAAU,IAAI,UAAU;kBAC1B;iBACD;AAAA;AAAA,QAEX,YAAY,MAAM;oBACJ,UAAU,IAAI;AAAA;AAAA,QAE5B,cAAc,MAAM;oBACN,UAAU,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AC7V/C,MAAMA,OAAK;MAEE,gBAAgB,aAAa;MAC7B,eAAe,aAAa;MAC5B,eAAe,aAAa;MAE5B,WAAW,WAAiB,CAAC,UAAU;QAC1C,QAAQ,MAAM,SAChB,CAAC,WAAW,EAAE,UACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCASqB,UAAU,QAAQ;AAAA;AAAA;AAAA;SAMxC;AAAA,QACHA;AAAAA,IACA,QAAQ;MACJ,OAAO;AAAA,MACP,SAAS;AAAA,MACT,UAAU;AAAA,MACV,UAAU,CAAC,EAAE,KAAK;AAAA,MAClB,OAAO,CAAC,SAAS,CAAC,MAAM,EAAE,OAAO,MAAM,aAAa,KAAK,OAAO,aAAa,UAAU;AAAA,MACvF,eAAe;AAAA,QACX,OAAO,CAAC,EAAE,MAAM,cAAc,SAAS,cAAc,YAAY;AAAA,QACjE,QAAQ,CAAC,OAAO,MAAM,SAAS;gBACrB,SAAS;gBACT,KAAK,KAAK;gBACV;AAAA;AAAA;AAAA,MAGd,YAAY;AAAA,QACR,OAAO,CAAC,SAAS,KAAK,KAAK,SAASA;AAAAA,QACpC,QAAQ,CAAC,OAAO,SAAS;gBACf,SAAS;gBACT,KAAK,KAAK;gBACV;AAAA;AAAA;AAAA;AAAA,IAIlB,YAAY,CAAC,aAAa,CAAC,kBAAkB,kBAAkB;AAAA,IAC/D,UAAU,CAAC,aAAa;AAAA,MACpB,UAAU,eAAe,MAAM,cAAc;AAAA,MAC7C,UAAU,cAAc,MAAM,aAAa;AAAA,MAC3C,UAAU,cAAc,MAAM,aAAa;AAAA;AAAA,IAE/C,WAAW;AAAA,OACN,cAAc,eAAe,eAAe,eAAe;AAAA,OAC3D,cAAc,eAAe,eAAe,cAAc;AAAA,OAC1D,cAAc,eAAe,eAAe,cAAc;AAAA;AAAA;AAAA;MC1D1D,oBAAoB,aAAa;AAE9C,MAAMA,OAAK;MACE,cAAc,WAAiB,CAAC;MACzCA;AAAAA,EACA,QAAQ;IACJ,SAAS;AAAA,IACT,OAAO;AAAA,IACP,OAAO;AAAA,MACH,OAAO;AAAA,QACH,SAAS;AAAA;AAAA;AAAA,IAGjB,UAAU;AAAA,MACN;AAAA,QACI,KAAK;AAAA,QACL,UAAU,CAAC,QAAQ;cACX,iBAAiB,cAAc;kBACzB,IAAI;AAAA;iBAEP,EAAE,OAAO,IAAI,aAAa,WAAW,OAAO,IAAI,aAAa,YAAY;AAAA;AAAA;AAAA;AAAA,IAI5F,OAAO,CAAC,SAAS;AAAA,MACb;AAAA,MACA,iCACQ,KAAK,MAAM,aAAa,IAAI,KAAK,KAAK,MAAM,WADpD;AAAA,QAEI,OAAO,MAAM,aAAa,KAAK,OAAO;AAAA;AAAA,MAE1C;AAAA;AAAA,IAEJ,eAAe;AAAA,MACX,OAAO,CAAC,EAAE,MAAM,cAAc,SAAS,UAAU,CAAC,CAAC;AAAA,MACnD,QAAQ,CAAC,OAAO,MAAM,SAAS;cACrB,SAAS,MAAM,KAAK,KAAK,UAAU;AAAA;AAAA;AAAA,IAGjD,YAAY;AAAA,MACR,OAAO,CAAC,SAAS,KAAK,KAAK,SAASA;AAAAA,MACpC,QAAQ,CAAC,OAAO,SAAS;cACf,SAAS,QAAQ,QAAW,EAAE,SAAS,MAAM,OAAO;cACpD,KAAK,KAAK;cACV;AAAA;AAAA;AAAA;AAAA,EAIlB,YAAY,CAAC,aAAa;AAAA,IACtB,kBACI,eACA,UACA,CAAC,aAAa,OAAO,OAAO,MAAM,QAClC,CAAC,OAAO,SAAS,KAAK,aAAa,KAAK,MAAM,aAAa,OAAO,MAAM;AAAA;AAAA,EAGhF,UAAU,CAAC,aAAa,CAAC,UAAU,mBAAmB,MAAM,OAAO;AAAA,EACnE,WAAW;AAAA,KACN,cAAc,cAAc,eAAe,mBAAmB;AAAA;AAAA;MCzD1D,eAAe,aAAa;AAEzC,MAAM,KAAK;MACE,YAAY,WAAiB,CAAC,UAAU;QAC3C,QAAQ,MAAM,SAAS,CAAC,GAAG,EAAE,UAAU;WAClC;AAAA;AAAA;AAAA;AAAA;AAAA;SAOJ;AAAA,IACH;AAAA,IACA,QAAQ;MACJ,SAAS;AAAA,MACT,OAAO;AAAA,MACP,UAAU,CAAC,EAAE,KAAK;AAAA,MAClB,OAAO,CAAC,SAAS,CAAC,KAAK,EAAE,OAAO,MAAM,aAAa,KAAK,OAAO,IAAI,UAAU;AAAA,MAC7E,eAAe;AAAA,QACX,OAAO,CAAC,SAAS,KAAK,SAAS;AAAA,QAC/B,QAAQ,CAAC,OAAO,MAAM,SAAS;gBACrB,SAAS;cACX,KAAK,UAAU;kBACT,KAAK,KAAK;AAAA,iBACb;kBACG,QAAQ,KAAK;AAAA;gBAEjB;AAAA;AAAA;AAAA,MAGd,YAAY;AAAA,QACR,OAAO,CAAC,SAAS,KAAK,KAAK,SAAS;AAAA,QACpC,QAAQ,CAAC,OAAO,SAAS;gBACf,SAAS;gBACT,KAAK,KAAK;gBACV;AAAA;AAAA;AAAA;AAAA,IAIlB,UAAU,CAAC,aAAa,CAAC,UAAU,cAAc,MAAM,aAAa;AAAA,IACpE,WAAW;AAAA,OACN,cAAc,OAAO,eAAe,cAAc;AAAA;AAAA;AAAA;MChDlD,OAAO,WAAW;EAC3B,IAAI;AAAA,EACJ,QAAQ;IACJ,OAAO;AAAA,IACP,eAAe;AAAA,MACX,OAAO,CAAC,EAAE,WAAW,SAAS;AAAA,MAC9B,QAAQ,CAAC,OAAO,SAAS;cACf,QAAQ,KAAK;AAAA;AAAA;AAAA,IAG3B,YAAY;AAAA,MACR,OAAO,CAAC,SAAS,KAAK,KAAK,SAAS;AAAA,MACpC,QAAQ,CAAC,OAAO,SAAS;cACf,QAAQ,QAAQ,QAAW,KAAK;AAAA;AAAA;AAAA;AAAA;MCFzC,QAAQ;AAAA,EACjB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;ACvBJ,MAAM,WAAW,CAAC,SAA+B,CAAC,CAAE,KAAgB;AACpE,MAAM,SAAS,CAAC,SAAwC,KAAK,SAAS;AAEtE,0BAA0B,KAAW,IAAgE;SAC1F,UAAU,KAAK,GAAG,MAAM;qBAEZ,MAAY,OAAe,QAAqB;QAC3D,SAAS,OAAO;YACV,MAAM;eACH,IAAI,GAAG,IAAI,KAAK,SAAS,QAAQ,IAAI,GAAG,KAAK;cAC5C,WAAW,KAAK,SAAS;YAC3B,UAAU;gBACJ,KAAK,UAAU,UAAU,GAAG;cAC9B,IAAI;qBACK,IAAI,GAAG,IAAI,GAAG,QAAQ,IAAI,GAAG,KAAK;oBACjC,OAAO,GAAG;kBACZ,MAAM;oBACF,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;WAMxB,WAAW;AAAA;WAGb,GAAG,MAAM,OAAO;AAAA;AAAA;MAIlB,mBAAmB,MAAM;uBACb,MAAY;qBACZ,MAAM,CAAC,SAAS;UACzB,CAAC,OAAO,OAAO;eACR,CAAC;AAAA;aAGL;AAAA;AAAA;SAGR;AAAA;MCrCE,oBAAoB;AAAA,EAC7B,aAAa;IACT,eAAe,MAAM,CAAC,OAAO;AAAA;AAAA;MCkBxB,kBAAkB,SAAS,OAAO,CAAC,GAAG,OAAO,GAAG;MAEhD,aAAa,SAAS,OAAO,CAAC,GAAG,mBAAmB,GAAG;MAEvD,WAAW;AAAA,EACpB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAEA;AAAA,EACA;AAAA,EAEA;AAAA,EACA;AAAA,EACA;AAAA,EAEA;AAAA,EACA;AAAA,EACA;AAAA,EAEA;AAAA,EACA;AAAA,EACA;AAAA,EAEA;AAAA,EACA;AAAA,EACA;AAAA;;"}