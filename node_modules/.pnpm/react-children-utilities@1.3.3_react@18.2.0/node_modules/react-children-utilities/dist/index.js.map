{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import { Children, cloneElement } from 'react';\n\nexport const hasChildren = (child) => Boolean(child && child.props && child.props.children);\n\nexport const hasComplexChildren = (child) =>\n  hasChildren(child) && typeof child.props.children === 'object';\n\nexport const filter = (children, filterFn) => {\n  return Children.toArray(children).filter(filterFn);\n};\n\nexport const deepFilter = (children, deepFilterFn) => {\n  return Children.toArray(children)\n    .filter(deepFilterFn)\n    .map((child) => {\n      if (hasComplexChildren(child)) {\n        // Clone the child that has children and filter them too\n        return cloneElement(child, {\n          ...child.props,\n          children: deepFilter(child.props.children, deepFilterFn),\n        });\n      }\n      return child;\n    });\n};\n\nexport const groupByType = (children, types, rest) => {\n  return Children.toArray(children).reduce((group, child) => {\n    const isGrouped = types.includes(child.type);\n    const addChild = isGrouped ? child.props.children : child;\n    const key = isGrouped ? child.type : rest;\n\n    return {\n      ...group,\n      [key]: [...(group[key] || []), addChild],\n    };\n  }, {});\n};\n\nexport const deepMap = (children, deepMapFn) => {\n  return Children.map(children, (child) => {\n    if (hasComplexChildren(child)) {\n      // Clone the child that has children and map them too\n      return deepMapFn(\n        cloneElement(child, {\n          ...child.props,\n          children: deepMap(child.props.children, deepMapFn),\n        }),\n      );\n    }\n    return deepMapFn(child);\n  });\n};\n\nexport const deepForEach = (children, deepForEachFn) => {\n  Children.forEach(children, (child) => {\n    if (hasComplexChildren(child)) {\n      // Each inside the child that has children\n      deepForEach(child.props.children, deepForEachFn);\n    }\n    deepForEachFn(child);\n  });\n};\n\nexport const deepFind = (children, deepFindFn) => {\n  let found;\n  Children.toArray(children).find((child) => {\n    if (hasComplexChildren(child)) {\n      // Find inside the child that has children\n      found = deepFind(child.props.children, deepFindFn);\n      return typeof (found) !== 'undefined';\n    }\n    if (deepFindFn(child)) {\n      found = child;\n      return true;\n    }\n    return false;\n  });\n  return found;\n};\n\nexport const onlyText = (children) => {\n  return Children.toArray(children)\n    .reduce(\n      (flattened, child) => [\n        ...flattened,\n        hasChildren(child) ? onlyText(child.props.children) : child,\n      ],\n      [],\n    )\n    .join('');\n};\n\nexport default {\n  ...Children,\n  filter,\n  deepFilter,\n  groupByType,\n  deepMap,\n  deepForEach,\n  deepFind,\n  onlyText,\n  hasChildren,\n  hasComplexChildren,\n};\n"]}