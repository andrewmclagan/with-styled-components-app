import { themeToolCtx } from "@milkdown/core";
import { gapCursor, dropCursor } from "@milkdown/prose";
import { createPlugin } from "@milkdown/utils";
const cursor = createPlugin((utils) => {
  utils.getStyle((themeTool, { injectGlobal }) => {
    const css = injectGlobal;
    css`
            /* copy from https://github.com/ProseMirror/prosemirror-gapcursor/blob/master/style/gapcursor.css */
            .ProseMirror-gapcursor {
                display: none;
                pointer-events: none;
                position: absolute;
                margin: 0 !important;
            }

            .ProseMirror-gapcursor:after {
                content: '';
                display: block;
                position: absolute;
                top: -2px;
                width: 20px;
                border-top: ${themeTool.size.lineWidth} solid ${themeTool.palette("secondary")};
                animation: ProseMirror-cursor-blink 1.1s steps(2, start) infinite;
            }

            @keyframes ProseMirror-cursor-blink {
                to {
                    visibility: hidden;
                }
            }

            .ProseMirror-focused .ProseMirror-gapcursor {
                display: block;
            }
        `;
  });
  return {
    prosePlugins: (_, ctx) => {
      var _a, _b;
      const themeTool = ctx.get(themeToolCtx);
      const lineWidth = themeTool.size.lineWidth;
      const width = Number((_b = (_a = lineWidth == null ? void 0 : lineWidth.match(/\d+/)) == null ? void 0 : _a[0]) != null ? _b : 1);
      return [gapCursor(), dropCursor({ color: themeTool.palette("secondary"), width })];
    }
  };
})();
export { cursor };
//# sourceMappingURL=index.es.js.map
