{"version":3,"file":"index.es.js","sources":["../src/Portals.tsx","../src/ReactNode.tsx","../src/ReactNodeView.tsx","../src/Editor.tsx"],"sourcesContent":["/* Copyright 2021, Milkdown by Mirone. */\nimport type { Ctx } from '@milkdown/core';\nimport { ViewFactory } from '@milkdown/prose';\nimport React from 'react';\n\nexport const portalContext = React.createContext<(Component: React.FC) => (ctx: Ctx) => ViewFactory>(() => () => {\n    throw new Error();\n});\n\nconst getId = (portals: React.ReactPortal[]) => portals.map((x) => x.key).join(',');\nexport const Portals: React.FC<{ portals: React.ReactPortal[] }> = React.memo(\n    ({ portals }) => {\n        return <>{...portals}</>;\n    },\n    (prev, next) => {\n        return getId(prev.portals) === getId(next.portals);\n    },\n);\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { Ctx } from '@milkdown/core';\nimport { Decoration, EditorView, Mark, Node } from '@milkdown/prose';\nimport React from 'react';\n\ntype NodeContext = {\n    ctx: Ctx;\n    node: Node | Mark;\n    view: EditorView;\n    getPos: boolean | (() => number);\n    decorations: Decoration[];\n};\n\nconst nodeContext = React.createContext<NodeContext>({\n    ctx: undefined,\n    node: undefined,\n    view: undefined,\n    getPos: undefined,\n    decorations: undefined,\n} as unknown as NodeContext);\n\nexport const ReactNodeContainer: React.FC<NodeContext> = ({ ctx, node, view, getPos, decorations, children }) => {\n    return <nodeContext.Provider value={{ ctx, node, view, getPos, decorations }}>{children}</nodeContext.Provider>;\n};\n\nexport const useNodeCtx = () => React.useContext(nodeContext);\n\nexport const Content: React.FC<{ isInline?: boolean; dom?: HTMLElement | null }> = ({ dom, isInline }) => {\n    const containerRef = React.useRef<HTMLDivElement>(null);\n\n    React.useEffect(() => {\n        const { current } = containerRef;\n        if (!current || !dom) return;\n\n        current.appendChild(dom);\n    }, [dom]);\n\n    if (isInline) {\n        return <span className=\"content-dom-wrapper\" ref={containerRef} />;\n    }\n\n    return <div className=\"content-dom-wrapper\" ref={containerRef} />;\n};\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { Ctx } from '@milkdown/core';\nimport type { Decoration, EditorView, NodeView, ViewFactory } from '@milkdown/prose';\nimport { Mark, Node } from '@milkdown/prose';\nimport { customAlphabet } from 'nanoid';\nimport React from 'react';\nimport { createPortal } from 'react-dom';\n\nimport { Content, ReactNodeContainer } from './ReactNode';\n\nconst nanoid = customAlphabet('abcedfghicklmn', 10);\n\nexport const createReactView =\n    (addPortal: (portal: React.ReactPortal) => void, removePortalByKey: (key: string) => void) =>\n    (component: React.FC): ((ctx: Ctx) => ViewFactory) =>\n    (ctx) =>\n    (node, view, getPos, decorations) =>\n        new ReactNodeView(ctx, component, addPortal, removePortalByKey, node, view, getPos, decorations);\n\nexport class ReactNodeView implements NodeView {\n    dom: HTMLElement | undefined;\n    contentDOM: HTMLElement | null | undefined;\n    key: string;\n\n    get isInlineOrMark() {\n        return this.node instanceof Mark || this.node.isInline;\n    }\n\n    constructor(\n        private ctx: Ctx,\n        private component: React.FC,\n        private addPortal: (portal: React.ReactPortal) => void,\n        private removePortalByKey: (key: string) => void,\n        private node: Node | Mark,\n        private view: EditorView,\n        private getPos: boolean | (() => number),\n        private decorations: Decoration[],\n    ) {\n        const dom = document.createElement(this.isInlineOrMark ? 'span' : 'div');\n        dom.classList.add('dom-wrapper');\n\n        const contentDOM =\n            node instanceof Node && node.isLeaf\n                ? undefined\n                : document.createElement(this.isInlineOrMark ? 'span' : 'div');\n        if (contentDOM) {\n            contentDOM.classList.add('content-dom');\n            dom.appendChild(contentDOM);\n        }\n        this.dom = dom;\n        this.contentDOM = contentDOM;\n        this.key = nanoid();\n\n        this.renderPortal();\n    }\n\n    renderPortal() {\n        if (!this.dom) return;\n\n        const Component = this.component;\n        const portal = createPortal(\n            <ReactNodeContainer\n                ctx={this.ctx}\n                node={this.node}\n                view={this.view}\n                getPos={this.getPos}\n                decorations={this.decorations}\n            >\n                <Component>\n                    <Content isInline={this.isInlineOrMark} dom={this.contentDOM} />\n                </Component>\n            </ReactNodeContainer>,\n            this.dom,\n            this.key,\n        );\n        this.addPortal(portal);\n    }\n\n    destroy() {\n        this.dom = undefined;\n        this.contentDOM = undefined;\n        this.removePortalByKey(this.key);\n    }\n\n    ignoreMutation(mutation: MutationRecord | { type: 'selection'; target: Element }) {\n        if (!this.contentDOM) {\n            return true;\n        }\n        return !this.contentDOM.contains(mutation.target);\n    }\n}\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { Ctx, Editor, editorViewCtx, rootCtx } from '@milkdown/core';\nimport { ViewFactory } from '@milkdown/prose';\nimport React, { DependencyList, forwardRef, useImperativeHandle } from 'react';\n\nimport { portalContext, Portals } from './Portals';\nimport { createReactView } from './ReactNodeView';\n\ntype GetEditor = (\n    container: HTMLDivElement,\n    renderReact: (Component: React.FC) => (ctx: Ctx) => ViewFactory,\n) => Editor | undefined;\n\nconst useGetEditor = (getEditor: GetEditor) => {\n    const renderReact = React.useContext(portalContext);\n    const divRef = React.useRef<HTMLDivElement>(null);\n    const editorRef = React.useRef<Editor>();\n\n    React.useEffect(() => {\n        const div = divRef.current;\n        if (!div) return;\n\n        const editor = getEditor(div, renderReact);\n\n        if (!editor) return;\n\n        editor\n            .create()\n            .then((editor) => {\n                editorRef.current = editor;\n                return;\n            })\n            .catch(console.error);\n\n        return () => {\n            const view = editorRef.current?.action((ctx) => ctx.get(editorViewCtx));\n            const root = editorRef.current?.action((ctx) => ctx.get(rootCtx)) as HTMLElement;\n\n            root?.firstChild?.remove();\n            view?.destroy();\n        };\n    }, [getEditor, renderReact]);\n\n    return { divRef, editorRef };\n};\n\ntype EditorProps = {\n    editor: GetEditor;\n};\nexport type EditorRef = {\n    get: () => Editor | undefined;\n    dom: () => HTMLDivElement | null;\n};\nexport const EditorComponent = forwardRef<EditorRef, EditorProps>(({ editor }, ref) => {\n    const refs = useGetEditor(editor);\n    useImperativeHandle(ref, () => ({\n        get: () => {\n            return refs.editorRef.current;\n        },\n        dom: () => {\n            return refs.divRef.current;\n        },\n    }));\n    return <div ref={refs.divRef} />;\n});\n\nexport const ReactEditor = forwardRef<EditorRef, EditorProps>(({ editor }, ref) => {\n    const [portals, setPortals] = React.useState<React.ReactPortal[]>([]);\n    const addPortal = React.useCallback((portal: React.ReactPortal) => {\n        setPortals((ps) => [...ps, portal]);\n    }, []);\n    const removePortalByKey = React.useCallback((key: string) => {\n        setPortals((x) => {\n            const index = x.findIndex((p) => p.key === key);\n\n            return [...x.slice(0, index), ...x.slice(index + 1)];\n        });\n    }, []);\n    const renderReact = React.useCallback(\n        (Component: React.FC) => createReactView(addPortal, removePortalByKey)(Component),\n        [addPortal, removePortalByKey],\n    );\n\n    return (\n        <portalContext.Provider value={renderReact}>\n            <Portals portals={portals} />\n            <EditorComponent ref={ref} editor={editor} />\n        </portalContext.Provider>\n    );\n});\n\nexport const useEditor = (getEditor: GetEditor, deps: DependencyList = []) => {\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    return React.useCallback<GetEditor>((...args) => getEditor(...args), deps);\n};\n"],"names":[],"mappings":"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"}