import { jsx, jsxs } from 'react/jsx-runtime';
import { forwardRef } from 'react';
import flattenChildren from 'react-flatten-children';
import { DialogOverlay, DialogContent } from '@reach/dialog';
import cx from 'classnames';
import keyMirror from 'keymirror';
import Box from '../Box/Box.js';
import Button from '../Button/Button.js';
import Icon from '../Icon/Icon.js';
import useLatch from '../../../utils/useLatch.js';
import styles from './Drawer.css.js';

keyMirror({
    fullHeight: null,
    noMaxHeight: null
});
function Header(props) {
    const { children  } = props;
    return jsx("div", Object.assign({
        className: styles.header
    }, {
        children: children
    }), void 0);
}
function Footer(props) {
    const { children  } = props;
    return jsx("div", Object.assign({
        className: styles.footer
    }, {
        children: children
    }), void 0);
}
function CloseButton(props) {
    const { onClick , testHook  } = props;
    return jsx(Button, Object.assign({
        variant: "link",
        onClick: onClick,
        testHook: testHook && `${testHook}-close`
    }, {
        children: jsx(Icon, {
            name: "close",
            size: "sizeIconSmall2X",
            strokeWidth: "2",
            isDecorative: false,
            title: "Close"
        }, void 0)
    }), void 0);
}
function Content(props) {
    const { withPadding =true , children  } = props;
    return jsx("ul", Object.assign({
        className: cx(styles.content, withPadding && styles.withPadding)
    }, {
        children: flattenChildren(children).map((child, i)=>jsx("li", {
                children: child
            }, i)
        )
    }), void 0);
}
keyMirror({
    button: null,
    div: null,
    li: null
});
const Item = /*#__PURE__*/ forwardRef(function Item(props, ref) {
    const { element , onClick , fadedOut , withSeparator , children , testHook , ...otherProps } = props;
    const Component = element || (onClick ? 'button' : 'div');
    return jsx(Component, Object.assign({
        // @ts-ignore TODO-TS[ENHANCEMENT] ref needs to be improved
        ref: ref
    }, otherProps, {
        onClick: onClick,
        type: Component === 'button' ? 'button' : undefined,
        className: cx(styles.item, {
            [styles.fadedOut]: fadedOut,
            [styles.withSeparator]: withSeparator
        }),
        "data-test": testHook
    }, {
        children: jsx(Box, Object.assign({
            className: styles.itemContent
        }, {
            children: children
        }), void 0)
    }), void 0);
});
function Drawer(props) {
    const { ariaLabel , children , footer , header , isOpen , onOpen , onClose , testHook , variant  } = props;
    // @ts-ignore TODO-TS[ENHANCEMENT] need better types for flattenChildren across app
    const hasContent = flattenChildren(children).some((child)=>child.type === Content
    );
    useLatch({
        value: isOpen,
        onChange: (value)=>{
            return value ? onOpen === null || onOpen === void 0 ? void 0 : onOpen() : onClose === null || onClose === void 0 ? void 0 : onClose();
        }
    });
    return jsx(DialogOverlay, Object.assign({
        className: styles.overlay,
        isOpen: isOpen,
        onDismiss: onClose,
        "data-test": testHook && `${testHook}-overlay`
    }, {
        children: jsxs(DialogContent, Object.assign({
            className: cx(styles.root, {
                [String(variant && styles[variant])]: variant
            }),
            "aria-label": ariaLabel
        }, {
            children: [
                header && jsx(Header, {
                    children: header
                }, void 0),
                hasContent ? children : jsx(Content, {
                    children: children
                }, void 0),
                footer && jsx(Footer, {
                    children: footer
                }, void 0)
            ]
        }), void 0)
    }), void 0);
}
Drawer.Header = Header;
Drawer.Footer = Footer;
Drawer.CloseButton = CloseButton;
Drawer.Content = Content;
Drawer.Item = Item;

export { Drawer as default };
