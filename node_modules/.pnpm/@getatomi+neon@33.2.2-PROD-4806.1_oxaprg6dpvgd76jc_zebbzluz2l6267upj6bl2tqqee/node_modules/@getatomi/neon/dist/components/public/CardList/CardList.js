import { jsx, jsxs } from 'react/jsx-runtime';
import cx from 'classnames';
import { Children } from 'react';
import { containerElements } from '../../../constants/allowedHtmlElements.js';
import Button from '../Button/Button.js';
import Container from '../Container/Container.js';
import Icon from '../Icon/Icon.js';
import Spinner from '../Spinner/Spinner.js';
import Tag from '../Tag/Tag.js';
import Text from '../Text/Text.js';
import VerticalSpacing from '../VerticalSpacing/VerticalSpacing.js';
import styles from './CardList.css.js';

function Card(props) {
    const { as: Component = containerElements.div , avatar , ctaProps , description , isLoading , tags , title , ...rest } = props;
    const hasTags = tags && tags.length > 0;
    const isCta = rest.href || rest.to || rest.onClick;
    return jsxs(Component, Object.assign({}, rest, {
        "data-test": rest.testHook,
        className: cx(styles.card, {
            [styles.isCta]: isCta
        })
    }, {
        children: [
            avatar && jsx("div", Object.assign({
                className: styles.avatar
            }, {
                children: avatar
            }), void 0),
            jsxs("div", Object.assign({
                className: styles.details
            }, {
                children: [
                    jsxs("div", Object.assign({
                        className: styles.text
                    }, {
                        children: [
                            jsx(Text, {
                                children: title
                            }, void 0),
                            jsx(Text, Object.assign({
                                fontSize: "fontSizeSmall1X",
                                color: "colorFiftyShadesDark"
                            }, {
                                children: description
                            }), void 0)
                        ]
                    }), void 0),
                    hasTags && jsx(VerticalSpacing, Object.assign({
                        size: "small2X",
                        isUpwards: true
                    }, {
                        children: jsx("ul", {
                            children: tags && hasTags && tags.map((tag, i)=>jsx("li", Object.assign({
                                    className: styles.tag
                                }, {
                                    children: jsx(Tag, Object.assign({}, tag), void 0)
                                }), i)
                            )
                        }, void 0)
                    }), void 0),
                    ctaProps && jsx(VerticalSpacing, Object.assign({
                        isUpwards: true
                    }, {
                        children: jsx(Button, Object.assign({}, ctaProps), void 0)
                    }), void 0)
                ]
            }), void 0),
            isCta && !isLoading && jsx(Icon, {
                name: "arrow-front",
                className: styles.icon
            }, void 0),
            isLoading && jsx("span", Object.assign({
                className: styles.spinner
            }, {
                children: jsx(Spinner, {
                    size: "small"
                }, void 0)
            }), void 0)
        ]
    }), void 0);
}
function CardList(props) {
    const { children , testHook , containerProps ={}  } = props;
    return jsx(Container, Object.assign({
        maxWidth: "sizeSmall"
    }, containerProps, {
        children: jsx("ul", Object.assign({
            "data-test": testHook
        }, {
            children: Children.map(children, (child, i)=>jsx("li", Object.assign({
                    className: styles.cardListItem
                }, {
                    children: child
                }), i)
            )
        }), void 0)
    }), void 0);
}
CardList.Card = Card;

export { Card, CardList as default };
