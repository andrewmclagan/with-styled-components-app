import { jsxs, jsx } from 'react/jsx-runtime';
import { useHover } from '@react-aria/interactions';
import Box from '../Box/Box.js';
import Icon from '../Icon/Icon.js';

const defaultStyles = {
    alignItems: 'center',
    borderRadius: 'borderRadiusSmall',
    boxShadow: 'boxShadowBorderInset',
    color: 'colorCoreText',
    display: 'flex',
    fontFamily: 'fontFamilySystem',
    fontSize: 'fontSizeRoot',
    gap: 'spacingRoot',
    letterSpacing: 'letterSpacingSmall',
    lineHeight: 'lineHeightRoot',
    paddingBlock: 'spacingSmall',
    paddingInline: 'spacingRoot',
    textAlign: 'left',
    transition: 'transitionRoot',
    width: 'sizeFull',
    _focus: {
        boxShadow: 'boxShadowBorderInsetFocused',
        outlineStyle: 'none'
    },
    _activeEnabled: {
        backgroundColor: 'colorAtomiBluesLighter'
    }
};
const selectedStyles = {
    ...defaultStyles,
    boxShadow: 'boxShadowBorderInsetSelected'
};
const correctStyles = {
    ...defaultStyles,
    // prevent the focus styles from overwritting the variant styles
    _focus: undefined,
    boxShadow: 'boxShadowBorderInsetLargeCorrect'
};
const incorrectStyles = {
    ...defaultStyles,
    _focus: undefined,
    boxShadow: 'boxShadowBorderInsetLargeError'
};
const skippedStyles = {
    ...defaultStyles,
    backgroundColor: 'colorFiftyShadesLightest',
    color: 'colorFiftyShadesDarker'
};
const variantStylesMapping = {
    correct: correctStyles,
    incorrect: incorrectStyles,
    skipped: skippedStyles
};
function getOptionStyles(isHighlighted, variant) {
    if (variant === 'skipped') {
        return variantStylesMapping.skipped;
    }
    if (isHighlighted) {
        return variant ? variantStylesMapping[variant] : selectedStyles;
    }
    return defaultStyles;
}
function Option(props) {
    const { children , withHover , isHighlighted , onClick , testHook , variant , ...otherProps } = props;
    const isCorrect = variant === 'correct';
    const isIncorrect = variant === 'incorrect';
    const withIcon = isHighlighted && (isCorrect || isIncorrect);
    const { hoverProps , isHovered  } = useHover({
        isDisabled: !withHover
    });
    return jsxs(Box, Object.assign({}, getOptionStyles(isHighlighted, variant), isHovered && {
        boxShadow: 'boxShadowBorderInsetFocused'
    }, hoverProps, otherProps, {
        onClick: onClick,
        testHook: testHook
    }, {
        children: [
            children,
            withIcon && jsx(Box, {
                as: Icon,
                name: isCorrect ? 'circle-solid-check' : 'circle-solid-cross',
                color: isCorrect ? 'colorGreenMonsterDark' : 'colorStrawberryFieldsRoot',
                marginLeft: "auto"
            }, void 0)
        ]
    }), void 0);
}

export { Option as default, defaultStyles };
