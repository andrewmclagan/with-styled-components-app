import 'core-js/modules/es.string.replace.js';
import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import { InlineMath } from 'react-katex';
import Box from '../Box/Box.js';
import Markdown from '../Markdown/Markdown.js';
import markdownStyles from '../Markdown/Markdown.css.js';

const renderers = {
    // spaces are intentionally added in these elements to format text correctly
    heading (param) {
        let { children  } = param;
        return jsxs("span", {
            children: [
                children,
                " "
            ]
        }, void 0);
    },
    inlineMath (param) {
        let { value  } = param;
        return jsxs("span", {
            children: [
                ' ',
                jsx(InlineMath, {
                    children: value
                }, void 0)
            ]
        }, void 0);
    },
    list (param) {
        let { children  } = param;
        return children;
    },
    listItem (param) {
        let { children  } = param;
        return jsxs("span", {
            children: [
                " ",
                children,
                " "
            ]
        }, void 0);
    },
    paragraph (param) {
        let { children  } = param;
        return jsxs("span", {
            children: [
                children,
                " "
            ]
        }, void 0);
    },
    neonPanel (param) {
        let { children  } = param;
        return children;
    },
    // drag and drop
    neonTerms (param) {
        let { children  } = param;
        return jsxs(Fragment, {
            children: [
                jsx(Box, Object.assign({
                    as: "span",
                    backgroundColor: "colorAtomiBluesLighter",
                    borderRadius: "borderRadiusSmall",
                    display: "inline-block",
                    paddingInline: "spacingSmall2X"
                }, {
                    children: children
                }), void 0),
                ' '
            ]
        }, void 0);
    },
    strong (param) {
        let { children  } = param;
        return jsxs("span", {
            children: [
                children,
                " "
            ]
        }, void 0);
    }
};
function MarkdownPreview(props) {
    const { children , lines =2  } = props;
    const allowedElements = [
        'emphasis',
        'root',
        'paragraph',
        'text',
        'strong',
        'html',
        'heading',
        'list',
        'listItem', 
    ];
    const regexPatterns = {
        editorContent: /(::(.*?)})/g,
        editorPanels: /:::.*/g
    };
    // strip out Editor markdown syntax
    const strippedMarkdown = children.replace(regexPatterns.editorContent, '').replace(regexPatterns.editorPanels, '');
    return jsx(Markdown, Object.assign({
        className: markdownStyles.preview,
        as: "p",
        customRenderers: renderers,
        allowedElements: allowedElements,
        vars: {
            [markdownStyles['--preview-line-clamp']]: lines.toString()
        }
    }, {
        children: strippedMarkdown
    }), void 0);
}

export { MarkdownPreview as default };
