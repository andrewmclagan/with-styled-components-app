import { jsxs, jsx } from 'react/jsx-runtime';
import keyMirror from 'keymirror';
import Container from '../Container/Container.js';
import Heading from '../Heading/Heading.js';
import Media from '../Media/Media.js';
import Stack from '../Stack/Stack.js';
import Text from '../Text/Text.js';
import VerticalSpacing from '../VerticalSpacing/VerticalSpacing.js';
import DialogBase from './DialogBase.js';
import CloseButton from './CloseButton/CloseButton.js';
import styles from './Dialog.css.js';

keyMirror({
    fullscreen: null
});
function Dialog(props) {
    const { appElement , children , closeText , containerSize ='sizeRoot' , heading , headingContent , isContainerGutterless , isContainerGutterlessOnMobile , isOpen , onClose , subheading , variant , withSeparator =true ,  } = props;
    /* The headingId is used for a11y so that the modal heading is read when
    opening the modal. It doesn't need to be unique since there will always be
    only one modal opened at a time. */ const headingId = 'dialog-heading';
    // eslint-disable-next-line no-nested-ternary
    const containerPaddingInline = isContainerGutterless ? 'spacingNone' : isContainerGutterlessOnMobile ? {
        base: 'spacingNone',
        tablet: 'spacingRoot',
        desktop: 'spacingLarge3X'
    } : undefined;
    return jsxs(DialogBase, Object.assign({
        className: variant && styles[variant],
        appElement: appElement,
        headingId: headingId,
        isOpen: isOpen,
        onClose: onClose
    }, {
        children: [
            jsxs("header", Object.assign({
                className: styles.header
            }, {
                children: [
                    jsx(Container, Object.assign({
                        maxWidth: "sizeFull",
                        textAlign: "right"
                    }, {
                        children: jsx(CloseButton, {
                            label: closeText,
                            onClick: onClose
                        }, void 0)
                    }), void 0),
                    heading && jsxs(Container, Object.assign({
                        maxWidth: containerSize
                    }, {
                        children: [
                            jsxs("div", Object.assign({
                                className: styles.heading
                            }, {
                                children: [
                                    jsxs(Stack, Object.assign({
                                        spacing: "spacingSmall1X"
                                    }, {
                                        children: [
                                            jsx(Media, {
                                                element: jsx(Heading, Object.assign({
                                                    id: headingId,
                                                    size: "large"
                                                }, {
                                                    children: heading
                                                }), void 0),
                                                queries: {
                                                    [styles['--breakpoint']]: {
                                                        size: 'large1X'
                                                    }
                                                }
                                            }, void 0),
                                            subheading && jsx(Text, Object.assign({
                                                as: "p",
                                                variant: "lead"
                                            }, {
                                                children: subheading
                                            }), void 0)
                                        ]
                                    }), void 0),
                                    headingContent && jsx(VerticalSpacing, Object.assign({
                                        size: "large2X",
                                        isUpwards: true
                                    }, {
                                        children: headingContent
                                    }), void 0)
                                ]
                            }), void 0),
                            withSeparator && jsx("div", {
                                className: styles.lineSeparator
                            }, void 0)
                        ]
                    }), void 0)
                ]
            }), void 0),
            jsx(Container, Object.assign({
                paddingInline: containerPaddingInline,
                maxWidth: containerSize
            }, {
                children: jsx("div", Object.assign({
                    className: styles.content
                }, {
                    children: children
                }), void 0)
            }), void 0)
        ]
    }), void 0);
}

export { Dialog as default };
