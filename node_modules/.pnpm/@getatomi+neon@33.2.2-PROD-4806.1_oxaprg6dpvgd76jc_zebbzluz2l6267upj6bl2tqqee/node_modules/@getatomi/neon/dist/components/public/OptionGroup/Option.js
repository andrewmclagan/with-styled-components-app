import { jsxs, jsx } from 'react/jsx-runtime';
import { useHover } from '@react-aria/interactions';
import Box from '../Box/Box.js';
import HideVisually from '../HideVisually/HideVisually.js';
import Icon from '../Icon/Icon.js';
import Stack from '../Stack/Stack.js';
import Text from '../Text/Text.js';
import Tooltip from '../Tooltip/Tooltip.js';
import useFocusRing from '../../../utils/useFocusRing.js';
import useId from '../../../utils/useId.js';
import { useOptionGroupContext } from './OptionGroupContext.js';

const defaultStyles = {
    alignItems: 'center',
    borderRadius: 'borderRadiusRoot',
    boxShadow: 'boxShadowBorderInset',
    color: 'colorCoreText',
    display: 'flex',
    fontFamily: 'fontFamilySystem',
    fontSize: 'fontSizeSmall',
    width: 'sizeFull',
    justifyContent: 'center',
    letterSpacing: 'letterSpacingRoot',
    lineHeight: 'lineHeightSmall1X',
    padding: 'spacingRoot',
    textAlign: 'center',
    transition: 'transitionRoot',
    _activeEnabled: {
        backgroundColor: 'colorAtomiBluesLighter',
        color: 'colorCoreText'
    }
};
const hoverStyles = {
    boxShadow: 'boxShadowBorderInsetFocused',
    color: 'colorInteractiveLink'
};
const selectedStyles = {
    boxShadow: 'boxShadowBorderInsetSelected',
    color: 'colorInteractiveLink'
};
const disabledStyles = {
    backgroundColor: 'colorFiftyShadesLightest',
    boxShadow: 'boxShadowBorderInsetDisabled',
    color: 'colorFiftyShadesRoot',
    cursor: 'not-allowed'
};
const squareStyles = {
    ...defaultStyles,
    aspectRatio: '1 / 1',
    // padding-block for browsers which don't support the aspect-ratio property
    paddingBlock: `spacingLarge4X`,
    paddingInline: 'spacingSmall2X',
    // @ts-ignore using custom size for that specific component
    maxHeight: '200px'
};
const errorStyles = {
    boxShadow: 'boxShadowBorderInsetError'
};
const errorHoverStyles = {
    boxShadow: 'boxShadowBorderInsetErrorFocused',
    color: 'colorCoreText'
};
const warningStyles = {
    boxShadow: 'boxShadowBorderInsetWarning'
};
const warningHoverStyles = {
    boxShadow: 'boxShadowBorderInsetWarningFocused',
    color: 'colorCoreText'
};
const variantStylesMapping = {
    square: squareStyles
};
const errorVariantStylesMapping = {
    error: errorStyles,
    warning: warningStyles
};
const errorVariantHoverStylesMapping = {
    error: errorHoverStyles,
    warning: warningHoverStyles
};
function Option(props) {
    const { children , iconName , info , isDisabled , tooltip , inputProps , isSelected , inputRef  } = props;
    const { errorVariant , variant  } = useOptionGroupContext();
    const infoId = useId('OptionInfo');
    const { focusProps , focusStyles , isFocusVisible  } = useFocusRing();
    const { hoverProps , isHovered  } = useHover({
        isDisabled
    });
    const hasCustomIconColor = !isFocusVisible && !isHovered && !isDisabled && !isSelected;
    const option = jsxs(Box, Object.assign({
        as: "label"
    }, {
        children: [
            jsx(HideVisually, {
                children: jsx("input", Object.assign({}, inputProps, focusProps, {
                    ref: inputRef,
                    "aria-describedby": info ? infoId : undefined
                }), void 0)
            }, void 0),
            jsxs(Stack, Object.assign({
                spacing: "spacingSmall2X"
            }, {
                children: [
                    jsx(Box, Object.assign({}, hoverProps, variant ? variantStylesMapping[variant] : defaultStyles, errorVariant && errorVariantStylesMapping[errorVariant], focusStyles, isHovered && (errorVariant ? errorVariantHoverStylesMapping[errorVariant] : hoverStyles), isSelected && selectedStyles, isDisabled && disabledStyles, {
                        children: jsxs(Stack, Object.assign({
                            spacing: "spacingSmall1X"
                        }, {
                            children: [
                                iconName && jsx(Icon, {
                                    name: iconName,
                                    size: "sizeIconLarge1X",
                                    color: hasCustomIconColor ? 'colorFiftyShadesDark' : undefined,
                                    display: "inline-block",
                                    strokeWidth: isSelected ? '2' : undefined
                                }, void 0),
                                children
                            ]
                        }), void 0)
                    }), void 0),
                    info && jsx(Text, Object.assign({
                        id: infoId,
                        variant: "bodySmall2X",
                        color: isDisabled ? 'colorFiftyShadesLight' : 'colorFiftyShadesDark',
                        textAlign: "center"
                    }, {
                        children: info
                    }), void 0)
                ]
            }), void 0)
        ]
    }), void 0);
    return tooltip ? jsx(Tooltip, Object.assign({
        content: tooltip,
        appendTo: "parent"
    }, {
        children: jsx("button", Object.assign({
            type: "button"
        }, {
            children: option
        }), void 0)
    }), void 0) : option;
}

export { Option as default };
