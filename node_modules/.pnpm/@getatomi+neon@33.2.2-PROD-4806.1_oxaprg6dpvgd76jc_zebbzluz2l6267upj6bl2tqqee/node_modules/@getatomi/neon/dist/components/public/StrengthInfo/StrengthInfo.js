import { jsx, jsxs } from 'react/jsx-runtime';
import Box from '../Box/Box.js';
import Diff from '../Diff/Diff.js';
import Strength from '../Strength/Strength.js';
import Stack from '../Stack/Stack.js';
import Text from '../Text/Text.js';
import { toPercent } from '../../../utils/number.js';
import { strengthLabel } from '../../../utils/strength.js';
import styles from './StrengthInfo.css.js';

function StrengthInfo(props) {
    const { diffs , renderStrengthLabel , renderSuccessRate , strengthLabels , strengthProps , successRate , testHook ,  } = props;
    return jsx(Text, Object.assign({
        variant: "bodySmall1X",
        lineHeight: "lineHeightRoot",
        textAlign: "left"
    }, {
        children: jsxs(Stack, Object.assign({
            spacing: "spacingSmall"
        }, {
            children: [
                jsxs(Stack, Object.assign({
                    spacing: "spacingSmall1X"
                }, {
                    children: [
                        successRate != null && jsx(Box, Object.assign({
                            testHook: testHook && `${testHook}-success-rate`
                        }, {
                            children: renderSuccessRate(jsx("strong", {
                                children: toPercent(successRate)
                            }, void 0))
                        }), void 0),
                        diffs && diffs.map((diff, i)=>jsx(Box, Object.assign({
                                testHook: testHook && `${testHook}-comparison-rate-${i}`
                            }, {
                                children: diff.render(jsx("strong", {
                                    children: jsx(Diff, {
                                        value: diff.value,
                                        size: "small"
                                    }, void 0)
                                }, void 0))
                            }), i)
                        )
                    ]
                }), void 0),
                strengthProps.limits && renderStrengthLabel && jsxs("div", Object.assign({
                    className: styles.strengthWrapper
                }, {
                    children: [
                        jsx("div", Object.assign({
                            className: styles.strength
                        }, {
                            children: jsx(Strength, Object.assign({}, strengthProps, {
                                isInline: true
                            }), void 0)
                        }), void 0),
                        jsx(Box, Object.assign({
                            as: "span",
                            testHook: testHook && `${testHook}-strength-label`
                        }, {
                            children: renderStrengthLabel(jsx("strong", {
                                children: strengthLabel(strengthProps.value, strengthProps.limits, strengthLabels)
                            }, void 0))
                        }), void 0)
                    ]
                }), void 0)
            ]
        }), void 0)
    }), void 0);
}

export { StrengthInfo as default };
