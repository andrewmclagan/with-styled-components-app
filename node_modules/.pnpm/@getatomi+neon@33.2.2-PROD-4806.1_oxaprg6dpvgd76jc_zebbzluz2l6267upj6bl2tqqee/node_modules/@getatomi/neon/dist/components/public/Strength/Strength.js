import { jsxs, jsx } from 'react/jsx-runtime';
import { Component, cloneElement, forwardRef } from 'react';
import cx from 'classnames';
import { strengthLabel } from '../../../utils/strength.js';
import { toPercent } from '../../../utils/number.js';
import labelCounter from '../../../utils/counter.js';
import HideVisually from '../HideVisually/HideVisually.js';
import Text from '../Text/Text.js';
import Tooltip from '../Tooltip/Tooltip.js';
import VerticalSpacing from '../VerticalSpacing/VerticalSpacing.js';
import styles from './Strength.css.js';

const defaultLimits = [
    0,
    0.25,
    0.5,
    0.75
];
class BaseStrength extends Component {
    render() {
        const { assistiveText , color , innerRef , isAnimated , isDanger , isInline , labels , limits =defaultLimits , size , testHook , tooltipProps , value ,  } = this.props;
        const strength = jsxs("div", Object.assign({
            ref: innerRef,
            className: cx({
                [styles.isDanger]: isDanger,
                [styles.isInline]: isInline,
                [styles.isAnimated]: isAnimated,
                [styles.withLabel]: labels
            }),
            "data-test": testHook
        }, {
            children: [
                jsxs(HideVisually, {
                    children: [
                        assistiveText && jsx("label", Object.assign({
                            htmlFor: this.labelId
                        }, {
                            children: assistiveText
                        }), void 0),
                        jsx("meter", Object.assign({
                            id: assistiveText && this.labelId,
                            value: value
                        }, {
                            children: toPercent(value)
                        }), void 0)
                    ]
                }, void 0),
                jsx("div", Object.assign({
                    "aria-hidden": true,
                    className: cx(styles.bars, size && styles[size])
                }, {
                    children: limits.map((limit, i)=>{
                        const isFilled = value > limit;
                        return jsx("span", {
                            className: cx(styles.bar, {
                                [styles.barFilled]: isFilled
                            }),
                            style: {
                                '--index': i,
                                backgroundColor: isFilled && color ? color : undefined
                            }
                        }, `bar-${limit}`);
                    })
                }), void 0),
                labels && jsx(VerticalSpacing, Object.assign({
                    isUpwards: true
                }, {
                    children: jsx(Text, {
                        children: strengthLabel(value, limits, labels)
                    }, void 0)
                }), void 0)
            ]
        }), void 0);
        return tooltipProps ? jsx(Tooltip, Object.assign({}, tooltipProps, {
            theme: "light-border"
        }, {
            children: /*#__PURE__*/ cloneElement(strength, {
                tabIndex: 1
            })
        }), void 0) : strength;
    }
    // if we don't annotate the constructor ourselves the consumer will have a Flow error
    constructor(props){
        super(props);
        this.labelId = BaseStrength.counter.next();
    }
}
BaseStrength.counter = labelCounter('Strength');
BaseStrength.displayName = 'Strength';
const Strength = /*#__PURE__*/ forwardRef(function Strength(props, ref) {
    return jsx(BaseStrength, Object.assign({
        innerRef: ref
    }, props), void 0);
});

export { Strength as default };
