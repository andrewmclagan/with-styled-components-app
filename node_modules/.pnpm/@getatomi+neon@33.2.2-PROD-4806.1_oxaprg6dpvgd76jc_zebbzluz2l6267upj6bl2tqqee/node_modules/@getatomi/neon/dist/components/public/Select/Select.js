import { jsx, jsxs } from 'react/jsx-runtime';
import cx from 'classnames';
import { StatefulMenu } from '../Menu/Menu.js';
import Label from '../Label/Label.js';
import SelectTrigger from '../SelectTrigger/SelectTrigger.js';
import Box from '../Box/Box.js';
import useId from '../../../utils/useId.js';
import styles from './Select.css.js';

// TODO: this is only used for the insights table grouping filter (Lise will
// look at designs with default SelectTrigger)
function DeprecatedTrigger(props) {
    const { children  } = props;
    return jsx(Box, Object.assign({
        as: "span",
        className: cx(styles.select, styles.nonNativeSelect)
    }, {
        children: children
    }), void 0);
}
function Select(props) {
    const { isNative , label , onChange , options , testHook , value , trigger , ...otherProps } = props;
    const id = useId('Select');
    const select = isNative ? jsx("select", Object.assign({}, otherProps, {
        id: id,
        value: value,
        onChange: (e)=>onChange(e.currentTarget.value)
        ,
        className: styles.select,
        "data-test": testHook && `${testHook}-select`
    }, {
        children: options.map((opt, i)=>jsx("option", Object.assign({
                value: opt.value
            }, {
                children: opt.label
            }), i)
        )
    }), void 0) : jsx(StatefulMenu, Object.assign({}, otherProps, {
        itemVariant: "large",
        trigger: trigger || jsx(SelectTrigger, {}, void 0),
        options: options,
        // we don't use a placeholder so we always get a non-null value in onChange
        onChange: onChange,
        value: value,
        testHook: testHook && `${testHook}-menu`
    }), void 0);
    if (!label) {
        return select;
    }
    return jsxs(Box, Object.assign({
        className: styles.root,
        testHook: testHook
    }, {
        children: [
            jsx(Label, Object.assign({
                className: styles.label,
                size: "large",
                htmlFor: id,
                marginBottom: "spacingNone",
                testHook: testHook && `${testHook}-label`
            }, {
                children: label
            }), void 0),
            select
        ]
    }), void 0);
}
Select.DeprecatedTrigger = DeprecatedTrigger;

export { DeprecatedTrigger, Select as default };
