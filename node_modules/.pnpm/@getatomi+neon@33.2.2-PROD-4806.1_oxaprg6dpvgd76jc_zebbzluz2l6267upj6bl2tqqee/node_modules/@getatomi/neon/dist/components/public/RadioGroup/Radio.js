import { jsxs, jsx } from 'react/jsx-runtime';
import { useRef } from 'react';
import { useFocusRing } from '@react-aria/focus';
import { useHover } from '@react-aria/interactions';
import { useRadio } from '@react-aria/radio';
import { mergeProps } from '@react-aria/utils';
import Box from '../Box/Box.js';
import Flex from '../Flex/Flex.js';
import HideVisually from '../HideVisually/HideVisually.js';
import Text from '../Text/Text.js';
import { useRadioGroupContext } from './RadioGroupContext.js';

const innerCircleStyles = {
    backgroundColor: 'colorCoreBrand',
    borderRadius: 'borderRadiusCircle',
    content: '""',
    display: 'inline-block',
    padding: 'spacingSmall2X'
};
const defaultStyles = {
    display: 'inline-flex',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: 'colorCoreWhite',
    borderRadius: 'borderRadiusCircle',
    borderWidth: 'borderWidthRoot',
    borderStyle: 'solid',
    borderColor: 'colorFiftyShadesLighter',
    marginTop: 'spacingSmall2X',
    size: 'sizeIconSmall',
    transition: 'transitionRoot'
};
const hoveredStyles = {
    borderColor: 'colorFiftyShadesDarkest'
};
const focusedStyles = {
    outlineWidth: 'borderWidthLarge',
    outlineColor: 'colorInteractiveFocusRing',
    outlineStyle: 'solid'
};
const selectedStyles = {
    borderColor: 'colorCoreBrand',
    _before: innerCircleStyles
};
const disabledStyles = {
    backgroundColor: 'colorFiftyShadesLighter',
    borderColor: 'colorFiftyShadesLighter'
};
const disabledSelectedStyles = {
    backgroundColor: 'colorCoreWhite',
    _before: {
        ...innerCircleStyles,
        backgroundColor: 'colorFiftyShadesLighter'
    }
};
const invalidStyles = {
    borderColor: 'colorStatusErrorDark'
};
function Radio(props) {
    const { children  } = props;
    const { state  } = useRadioGroupContext();
    const isDisabled = state.isDisabled || props.isDisabled;
    const isDisabledOrReadOnly = state.isReadOnly || isDisabled;
    const isInvalid = state.validationState === 'invalid';
    const ref = useRef(null);
    const { focusProps , isFocusVisible  } = useFocusRing();
    const { hoverProps , isHovered  } = useHover({
        isDisabled
    });
    const { inputProps , isSelected  } = useRadio(props, state, ref);
    // use mergeProps() to chain event handlers:
    // https://react-spectrum.adobe.com/react-aria/mergeProps.html.
    const mergedInputProps = mergeProps(inputProps, focusProps);
    return jsxs(Box, Object.assign({
        as: "label",
        cursor: isDisabledOrReadOnly ? 'not-allowed' : undefined,
        maxWidth: "fit-content"
    }, hoverProps, {
        children: [
            jsx(HideVisually, {
                children: jsx("input", Object.assign({}, mergedInputProps, {
                    ref: ref
                }), void 0)
            }, void 0),
            jsxs(Flex, Object.assign({
                gap: "spacingSmall"
            }, {
                children: [
                    jsx(Box, Object.assign({}, defaultStyles, isInvalid && invalidStyles, isHovered && hoveredStyles, isFocusVisible && focusedStyles, isSelected && selectedStyles, isDisabledOrReadOnly && disabledStyles, isSelected && isDisabledOrReadOnly && disabledSelectedStyles), void 0),
                    jsx(Text, Object.assign({
                        variant: "bodyRoot",
                        color: isDisabled ? 'colorFiftyShadesDark' : 'colorCoreText'
                    }, {
                        children: children
                    }), void 0)
                ]
            }), void 0)
        ]
    }), void 0);
}

export { Radio };
