import { jsxs, jsx } from 'react/jsx-runtime';
import keyMirror from 'keymirror';
import cx from 'classnames';
import Box from '../Box/Box.js';
import Icon from '../Icon/Icon.js';
import Truncate from '../Truncate/Truncate.js';
import styles from './MenuItem.css.js';

const variants = keyMirror({
    large: null,
    narrow: null
});
function MenuItem(props) {
    const { children , color , iconName , isActive , isDanger , isDisabled , testHook , variant , withActiveIcon , withTruncation =true ,  } = props;
    return jsxs(Box, Object.assign({
        className: cx(styles.root, {
            [styles.withCircle]: color && !iconName,
            [styles.isActive]: isActive,
            [styles.isDanger]: isDanger,
            [styles.isDisabled]: isDisabled,
            [String(variant && styles[variant])]: variant
        }),
        vars: color ? {
            [styles['--symbol-color']]: color
        } : undefined,
        testHook: testHook
    }, {
        children: [
            iconName && jsx(Icon, {
                className: styles.icon,
                name: iconName,
                size: "sizeIconSmall1X"
            }, void 0),
            withTruncation ? jsx(Truncate, {
                children: children
            }, void 0) : children,
            withActiveIcon && isActive && jsx("span", Object.assign({
                className: styles.iconWrap
            }, {
                children: jsx(Icon, {
                    className: cx(styles.icon, styles.isActive),
                    name: "check",
                    size: "sizeIconSmall1X",
                    strokeWidth: "2"
                }, void 0)
            }), void 0)
        ]
    }), void 0);
}

export { MenuItem as default, variants };
