import { jsxs, jsx } from 'react/jsx-runtime';
import Button from '../Button/Button.js';
import Icon from '../Icon/Icon.js';
import HideVisually from '../HideVisually/HideVisually.js';

const getButtonPadding = (size)=>{
    switch(size){
        case 'small':
            return 'spacingSmall';
        case 'root':
            return 'spacingSmall';
        case 'large':
            return 'spacingRoot';
        default:
            return undefined;
    }
};
const iconSizeMap = {
    small1X: 'sizeIconSmall2X',
    small: 'sizeIconSmall2X',
    root: 'sizeIconSmall',
    large: 'sizeIconSmall'
};
function IconButton(props) {
    const { assistiveText , name , size ='root' , strokeWidth , verticalAlign ='middle' , testHook , ...otherProps } = props;
    const paddingInline = getButtonPadding(size);
    return jsxs(Button, Object.assign({}, otherProps, {
        size: size
    }, paddingInline && {
        paddingInline
    }, {
        testHook: testHook
    }, {
        children: [
            jsx(Icon, {
                name: name,
                size: iconSizeMap[size],
                display: "inline-block",
                strokeWidth: strokeWidth,
                testHook: testHook ? `${testHook}-icon` : undefined,
                verticalAlign: verticalAlign
            }, void 0),
            jsx(HideVisually, {
                children: assistiveText
            }, void 0)
        ]
    }), void 0);
}

export { IconButton as default };
