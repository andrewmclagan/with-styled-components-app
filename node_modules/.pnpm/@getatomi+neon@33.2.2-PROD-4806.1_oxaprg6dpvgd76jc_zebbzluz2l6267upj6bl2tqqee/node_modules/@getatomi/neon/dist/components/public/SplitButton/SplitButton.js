import { jsx, jsxs } from 'react/jsx-runtime';
import { useRef } from 'react';
import Button from '../Button/Button.js';
import Box from '../Box/Box.js';
import Menu from '../Menu/Menu.js';
import Icon from '../Icon/Icon.js';
import { popoverPosition } from '../../../utils/popoverPositions.js';

const buttonStyles = {
    borderBottomRightRadius: 'borderRadiusNone',
    borderColor: 'colorCoreWhite',
    borderRightWidth: 'borderWidthRoot',
    borderStyle: 'solid',
    borderTopRightRadius: 'borderRadiusNone'
};
const iconButtonStyles = {
    borderTopLeftRadius: 'borderRadiusNone',
    borderBottomLeftRadius: 'borderRadiusNone'
};
function SplitButton(props) {
    const { ariaLabel , children , isDisabled , isLoading , items , onClick , testHook , ...otherProps } = props;
    const containerRef = useRef(null);
    const IconButton = jsx(Button, Object.assign({
        as: "span",
        isDisabled: isDisabled,
        isLoading: isLoading
    }, iconButtonStyles, otherProps, {
        children: jsx(Icon, {
            name: "chevron",
            display: "inline-block",
            size: "sizeIconSmall3X",
            strokeWidth: "2",
            verticalAlign: "middle"
        }, void 0)
    }), void 0);
    return jsxs(Box, Object.assign({
        display: "flex",
        alignItems: "baseline",
        ref: containerRef
    }, {
        children: [
            jsx(Button, Object.assign({}, buttonStyles, {
                isLoading: isLoading,
                isDisabled: isDisabled,
                onClick: onClick,
                testHook: testHook
            }, otherProps, {
                children: children
            }), void 0),
            jsx(Menu, {
                ariaLabel: ariaLabel,
                items: items,
                itemVariant: "large",
                trigger: IconButton,
                popoverPosition: popoverPosition({
                    targetContainer: containerRef
                }),
                isDisabled: isDisabled || isLoading,
                testHook: testHook ? `${testHook}-menu` : undefined
            }, void 0)
        ]
    }), void 0);
}

export { SplitButton as default };
