import { jsx, jsxs } from 'react/jsx-runtime';
import { useRef } from 'react';
import { AlertDialogLabel, AlertDialogDescription, AlertDialogOverlay as AlertDialogOverlay$1, AlertDialogContent as AlertDialogContent$1 } from '@reach/alert-dialog';
import Box from '../Box/Box.js';
import Button from '../Button/Button.js';
import Flex from '../Flex/Flex.js';
import Stack from '../Stack/Stack.js';
import Text from '../Text/Text.js';

function AlertDialogOverlay(props) {
    return jsx(Box, Object.assign({}, props, {
        as: AlertDialogOverlay$1,
        alignItems: "center",
        display: "flex",
        justifyContent: "center",
        zIndex: "zIndex2"
    }), void 0);
}
function AlertDialogContent(props) {
    return jsx(Box, Object.assign({}, props, {
        as: AlertDialogContent$1,
        borderRadius: "borderRadiusRoot",
        marginInline: {
            base: 'spacingLarge',
            tablet: 'auto'
        },
        maxWidth: "sizeModalSmall",
        padding: {
            base: 'spacingLarge1X',
            tablet: 'spacingLarge3X'
        },
        width: "sizeFull"
    }), void 0);
}
function AlertDialog(props) {
    const { children , heading , isLoading , isOpen , onConfirm , onConfirmLabel , onDismiss , onDismissLabel ='Cancel' , variant ,  } = props;
    const initialFocusRef = useRef(null);
    return jsx(AlertDialogOverlay, Object.assign({
        isOpen: isOpen,
        leastDestructiveRef: initialFocusRef
    }, {
        children: jsx(AlertDialogContent, {
            children: jsxs(Stack, Object.assign({
                spacing: "spacingLarge1X"
            }, {
                children: [
                    jsxs(Stack, Object.assign({
                        spacing: "spacingSmall"
                    }, {
                        children: [
                            jsx(AlertDialogLabel, {
                                children: jsx(Text, Object.assign({
                                    as: "h3",
                                    color: "colorFiftyShadesDarkest",
                                    fontFamily: "fontFamilySystem",
                                    fontWeight: "fontWeightMedium"
                                }, {
                                    children: heading
                                }), void 0)
                            }, void 0),
                            children && jsx(AlertDialogDescription, {
                                children: jsx(Text, Object.assign({
                                    variant: "bodySmall",
                                    color: "colorFiftyShadesDark"
                                }, {
                                    children: children
                                }), void 0)
                            }, void 0)
                        ]
                    }), void 0),
                    jsxs(Flex, Object.assign({
                        gap: "spacingSmall1X",
                        justifyContent: "flex-end"
                    }, {
                        children: [
                            onDismiss && jsx(Button, Object.assign({
                                ref: initialFocusRef,
                                size: "small1X",
                                variant: "info",
                                onClick: onDismiss
                            }, {
                                children: onDismissLabel
                            }), void 0),
                            jsx(Button, Object.assign({
                                ref: !onDismiss ? initialFocusRef : undefined,
                                size: "small1X",
                                variant: variant,
                                onClick: onConfirm,
                                isLoading: isLoading
                            }, {
                                children: onConfirmLabel
                            }), void 0)
                        ]
                    }), void 0)
                ]
            }), void 0)
        }, void 0)
    }), void 0);
}

export { AlertDialog as default };
