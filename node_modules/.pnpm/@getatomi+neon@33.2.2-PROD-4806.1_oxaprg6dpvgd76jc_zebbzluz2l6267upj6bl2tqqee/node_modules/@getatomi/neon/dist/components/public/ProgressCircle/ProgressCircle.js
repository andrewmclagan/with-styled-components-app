import 'core-js/modules/web.dom-collections.iterator.js';
import { jsxs, jsx } from 'react/jsx-runtime';
import cx from 'classnames';
import _ from 'lodash';
import { useState, useMemo } from 'react';
import Icon from '../Icon/Icon.js';
import { toPercent, isAbove } from '../../../utils/number.js';
import { progressCircleSizes } from '../../../constants/sizes.js';
import { progressElements } from '../../../constants/allowedHtmlElements.js';
import HideVisually from '../HideVisually/HideVisually.js';
import ForwardRef from '../Icon/svgs/IconCircleProgress.js';
import Text from '../Text/Text.js';
import { progressCircleSizes as progressCircleSizes$1 } from '../../../constants/tokens/progressCircleSizes.js';
import styles from './ProgressCircle.css.js';

const getRadius = (size, ref)=>{
    const circle = ref.firstChild;
    // TODO-TS[ENHANCEMENT] ooof what is this expression - hard to read. If broken
    // down into multiple lines can type better
    const scale = // @ts-ignore
    +progressCircleSizes$1[// @ts-ignore
    `progressCircleSize${_.upperFirst(progressCircleSizes[size])}-px`] / // @ts-ignore
    (2 * +circle.getAttribute('cx'));
    // @ts-ignore
    return +circle.getAttribute('r') * scale;
};
function ProgressCircle(props) {
    const { backingElement: Element = progressElements.progress , size =progressCircleSizes.root , value , threshold =0 , ariaLabel , label , iconName , isOverlaid , isDisabled , withCompletedState , withStatus , children , testHook ,  } = props;
    const [radius, setRadius] = useState(0);
    const getRadiusMemoized = useMemo(()=>_.memoize(_.partial(getRadius, size))
    , [
        size
    ]);
    const setRef = (element)=>{
        if (element) setRadius(getRadiusMemoized(element));
    };
    const circumference = 2 * Math.PI * radius;
    const offset = (1 - Math.round(value * 100) / 100) * circumference;
    // avoids having a full circle that looks completed but isn't
    const isCompleted = withCompletedState && value > 0.96;
    const isSuccess = withStatus && isAbove(value, threshold);
    const isDanger = withStatus && !isAbove(value, threshold);
    return jsxs("span", Object.assign({
        className: cx(styles.root, {
            [styles[size]]: size,
            [styles.isCompleted]: isCompleted,
            [styles.isOverlaid]: isOverlaid,
            [styles.isDisabled]: isDisabled,
            [styles.withStatus]: withStatus,
            [styles.isDanger]: isDanger,
            [styles.isSuccess]: isSuccess
        }),
        "data-test": testHook
    }, {
        children: [
            jsxs("span", Object.assign({
                className: styles.stack
            }, {
                children: [
                    !isDisabled && jsx(HideVisually, {
                        children: jsx(Element, Object.assign({
                            "aria-label": ariaLabel,
                            value: value
                        }, {
                            children: toPercent(value)
                        }), void 0)
                    }, void 0),
                    jsx(ForwardRef, {
                        ref: setRef,
                        className: styles.track
                    }, void 0),
                    !isDisabled && jsx(ForwardRef, {
                        className: styles.bar,
                        style: {
                            // rounding hack so that 0 progress looks good for larger sizes
                            strokeDasharray: `${Math.ceil(circumference)}`,
                            strokeDashoffset: `${Math.ceil(offset)}px`
                        }
                    }, void 0),
                    isCompleted ? jsx(Icon, {
                        className: styles.check,
                        name: "check",
                        size: "sizeIconSmall1X"
                    }, void 0) : jsxs("span", Object.assign({
                        className: styles.content,
                        "data-test": testHook && `${testHook}-content`
                    }, {
                        children: [
                            iconName && jsx(Icon, {
                                className: styles.icon,
                                name: iconName,
                                size: "sizeIconSmall1X"
                            }, void 0),
                            children
                        ]
                    }), void 0)
                ]
            }), void 0),
            label && jsx(Text, Object.assign({
                as: "span",
                color: "colorFiftyShadesDark",
                variant: "bodySmall1X",
                fontWeight: "fontWeightSemiBold",
                "aria-hidden": true
            }, {
                children: label
            }), void 0)
        ]
    }), void 0);
}

export { ProgressCircle as default };
