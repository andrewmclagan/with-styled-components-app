import { jsx, Fragment, jsxs } from 'react/jsx-runtime';
import cx from 'classnames';
import HelpText from '../../public/HelpText/HelpText.js';
import Label from '../../public/Label/Label.js';
import useId from '../../../utils/useId.js';
import styles from './FormField.css.js';

function useFormField(props) {
    const { label , helpText , isDisabled , isRequired , errorVariant , validationText , secondaryLabel , testHook ,  } = props;
    const id = useId('FormField');
    const helpTextId = useId('HelpText');
    const validationTextId = useId('ValidationText');
    const hasLabels = label || secondaryLabel;
    const classnames = styles.root;
    const containerClassnames = cx(styles.fieldContainer, {
        [styles.isDisabled]: isDisabled,
        [String(errorVariant && styles[errorVariant])]: errorVariant
    });
    const fieldClassnames = styles.field;
    const fieldAttributes = {
        'aria-describedby': cx({
            [String(helpTextId)]: helpText,
            [String(validationTextId)]: validationText
        }) || undefined,
        'aria-invalid': errorVariant === 'error' ? true : undefined,
        disabled: isDisabled,
        id,
        required: isRequired
    };
    const fieldLabel = jsx(Fragment, {
        children: hasLabels && jsxs(Label, Object.assign({
            htmlFor: id,
            testHook: testHook && `${testHook}-label`
        }, {
            children: [
                label,
                secondaryLabel && jsx("span", Object.assign({
                    className: styles.secondaryLabel
                }, {
                    children: secondaryLabel
                }), void 0)
            ]
        }), void 0)
    }, void 0);
    const fieldHelpText = jsxs(Fragment, {
        children: [
            helpText && jsx(HelpText, Object.assign({
                id: helpTextId,
                testHook: testHook && `${testHook}-help-text`
            }, {
                children: helpText
            }), void 0),
            validationText && errorVariant && jsx(HelpText, Object.assign({
                id: validationTextId,
                testHook: testHook && `${testHook}-validation`,
                variant: errorVariant || undefined
            }, {
                children: validationText
            }), void 0)
        ]
    }, void 0);
    return {
        classnames,
        containerClassnames,
        fieldClassnames,
        fieldAttributes,
        fieldLabel,
        fieldHelpText
    };
}

export { useFormField as default };
