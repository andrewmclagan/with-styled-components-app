import 'core-js/modules/web.dom-collections.iterator.js';
import { jsx, Fragment } from 'react/jsx-runtime';
import { useCallback } from 'react';
import Box from '../Box/Box.js';
import Option, { defaultStyles } from './Option.js';
import QuizQuestion from './QuizQuestion.js';

const diffCodes = Object.freeze({
    DELETE: -1,
    EQUAL: 0,
    INSERT: 1
});
function StringDiff(param1) {
    let { children  } = param1;
    // TODO-TS[ENHANCEMENT] Potentially add custom types to allow strings to be returned directly
    // More info here: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/20544
    if (typeof children === 'string') return jsx(Fragment, {
        children: children
    }, void 0);
    return(// a div is used instead of fragment to avoid the flexbox parent properties
    // to impact the diff output
    jsx("div", {
        children: children.map((param, i)=>// eslint-disable-next-line no-nested-ternary
        {
            let [code, part] = param;
            return code === diffCodes.INSERT ? jsx(Box, Object.assign({
                as: "ins",
                backgroundColor: "colorGreenMonsterLightest",
                textDecoration: "none"
            }, {
                children: part
            }), i) : code === diffCodes.DELETE ? jsx(Box, Object.assign({
                as: "del",
                backgroundColor: "colorStrawberryFieldsLightest",
                textDecorationColor: "colorStrawberryFieldsDark",
                textDecorationThickness: "2px"
            }, {
                children: part
            }), i) : part;
        })
    }, void 0));
}
const inputStyles = {
    borderWidth: 'borderWidthNone',
    width: 'sizeFull',
    _hoverAndFocus: {
        boxShadow: 'boxShadowBorderInsetFocused',
        outlineWidth: 'borderWidthNone'
    }
};
function ExactAnswer(props) {
    const { state , value , onChange , onCheckAnswer , testHook , ...questionProps } = props;
    const onKeyDown = useCallback((event)=>{
        if (event.currentTarget.value && event.key === 'Enter') {
            onCheckAnswer();
        }
    }, [
        onCheckAnswer
    ]);
    return jsx(QuizQuestion, Object.assign({}, questionProps, {
        variant: state,
        testHook: testHook
    }, {
        children: jsx(Box, Object.assign({
            marginTop: "spacingLarge3X"
        }, {
            children: state && value ? jsx(Option, Object.assign({
                variant: state,
                isHighlighted: true,
                testHook: testHook ? `${testHook}-answer` : undefined
            }, {
                children: jsx(StringDiff, {
                    children: value
                }, void 0)
            }), void 0) : jsx(Box, Object.assign({
                as: "input",
                type: "text",
                value: typeof value === 'string' ? value : undefined,
                onChange: (e)=>onChange(e.currentTarget.value)
                ,
                onKeyDown: onKeyDown,
                "aria-labelledby": questionProps.labelId,
                testHook: testHook ? `${testHook}-input` : undefined
            }, defaultStyles, inputStyles), void 0)
        }), void 0)
    }), void 0);
}

export { StringDiff, ExactAnswer as default };
