import 'core-js/modules/web.dom-collections.iterator.js';
import { jsxs, jsx } from 'react/jsx-runtime';
import { useState, useCallback } from 'react';
import moment from 'moment';
import 'react-dates/initialize';
import { SingleDatePicker } from 'react-dates';
import { SingleDatePickerPhrases } from 'react-dates/lib/defaultPhrases';
import Box from '../Box/Box.js';
import Icon from '../Icon/Icon.js';
import { useMedia } from '../Media/Media.js';
import Label from '../Label/Label.js';
import useId from '../../../utils/useId.js';
import { tokens } from '../../../constants/tokens/index.js';
import styles from './DatePicker.css.js';

const DATE_FORMATS = {
    default: 'ddd D MMM',
    today: '[Today]',
    tomorrow: '[Tomorrow]',
    withYear: 'ddd D MMM YYYY'
};
function getDateFormat(date, dateFormats) {
    const now = moment();
    if (date.isSame(now, 'day')) return dateFormats.today;
    if (date.isSame(moment().add(1, 'day'), 'day')) return dateFormats.tomorrow;
    if (date.isSame(now, 'year')) return dateFormats.default;
    return dateFormats.withYear;
}
function DatePicker(props) {
    const { dateFormats =DATE_FORMATS , label , value =moment() , onChange , testHook  } = props;
    const isMobile = useMedia({
        maxWidth: tokens.breakpointMedium
    });
    const [date1, setDate] = useState(value);
    const [isFocused, setIsFocused] = useState(false);
    var ref;
    const inputId = (ref = useId('DatePicker')) !== null && ref !== void 0 ? ref : '';
    const onDateChange = useCallback((newDate)=>{
        if (!newDate) return;
        setDate(newDate);
        onChange(newDate);
    }, [
        onChange
    ]);
    return jsxs(Box, Object.assign({
        as: "span",
        className: isFocused ? styles.isFocused : undefined,
        testHook: testHook
    }, {
        children: [
            jsx(Label, Object.assign({
                htmlFor: inputId
            }, {
                children: label
            }), void 0),
            jsx(SingleDatePicker, {
                id: inputId,
                ariaLabel: undefined,
                date: date1,
                readOnly: true,
                keepFocusOnInput: true,
                displayFormat: getDateFormat(date1, dateFormats),
                dayAriaLabelFormat: DATE_FORMATS.withYear,
                // @ts-ignore type mismatch between react-dates and the latest version of moment
                onDateChange: onDateChange,
                focused: isFocused,
                onFocusChange: (param)=>{
                    let { focused  } = param;
                    return setIsFocused(focused);
                },
                block: true,
                noBorder: true,
                verticalSpacing: 0,
                numberOfMonths: 1,
                transitionDuration: 0,
                customInputIcon: jsx(Icon, {
                    name: "calendar",
                    size: "sizeIconSmall1X"
                }, void 0),
                inputIconPosition: "after",
                withPortal: isMobile,
                phrases: {
                    ...SingleDatePickerPhrases,
                    // @ts-ignore focusStartDate is correct but missing from the lib types declarations
                    focusStartDate: 'Select a date',
                    chooseAvailableDate: (param)=>{
                        let { date  } = param;
                        return date;
                    }
                }
            }, void 0)
        ]
    }), void 0);
}DatePicker.DATE_FORMATS = DATE_FORMATS;

export { DatePicker as default };
