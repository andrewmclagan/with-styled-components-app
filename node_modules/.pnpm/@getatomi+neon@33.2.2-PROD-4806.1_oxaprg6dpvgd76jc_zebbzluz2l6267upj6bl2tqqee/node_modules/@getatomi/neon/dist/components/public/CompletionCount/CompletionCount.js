import { jsxs, jsx } from 'react/jsx-runtime';
import Flex from '../Flex/Flex.js';
import HideVisually from '../HideVisually/HideVisually.js';
import Icon from '../Icon/Icon.js';
import { useKeyDown } from '../../../utils/a11y.js';
import useId from '../../../utils/useId.js';
import styles from './CompletionCount.css.js';

function IconWithCircle(props) {
    const { color  } = props;
    return jsx("span", Object.assign({
        className: styles.iconWithCircle,
        style: {
            [styles['--color']]: color
        }
    }, {
        children: jsx(Icon, {
            name: "check",
            size: "sizeIconSmall3X",
            display: "inline-flex"
        }, void 0)
    }), void 0);
}
function CompletionCount(props) {
    const { assistiveText , color , max , onClick , testHook , label , value  } = props;
    const labelId = useId('CompletionCount');
    const onKeyDown = useKeyDown(onClick);
    // this component is consumed inside an anchor in Carbon so it is rendered
    // as a div instead of a button
    return jsxs("div", Object.assign({
        className: styles.root,
        onClick: onClick,
        onKeyDown: onKeyDown,
        "data-test": testHook,
        role: "button",
        tabIndex: 0
    }, {
        children: [
            jsxs(Flex, Object.assign({
                gap: "spacingSmall1X"
            }, {
                children: [
                    jsx(IconWithCircle, {
                        color: color
                    }, void 0),
                    jsxs("span", Object.assign({
                        className: styles.label,
                        id: labelId
                    }, {
                        children: [
                            jsx("span", Object.assign({
                                "aria-hidden": true,
                                className: styles.labelValue
                            }, {
                                children: value
                            }), void 0),
                            jsx("span", Object.assign({
                                className: styles.labelText
                            }, {
                                children: label
                            }), void 0)
                        ]
                    }), void 0)
                ]
            }), void 0),
            jsx(HideVisually, {
                children: jsx("progress", Object.assign({
                    "aria-labelledby": labelId,
                    max: max,
                    value: value
                }, {
                    children: assistiveText
                }), void 0)
            }, void 0)
        ]
    }), void 0);
}
CompletionCount.Icon = IconWithCircle;

export { CompletionCount as default };
