import 'core-js/modules/web.dom-collections.iterator.js';
import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import cx from 'classnames';
import keyMirror from 'keymirror';
import HideVisually from '../HideVisually/HideVisually.js';
import Icon from '../Icon/Icon.js';
import styles from './ResultSummary.css.js';

const statuses = keyMirror({
    success: null,
    error: null
});
keyMirror({
    aggregate: null,
    'multiple-choice': null,
    'self-marked': null,
    'exact-answer': null,
    'drag-and-drop': null
});
function ResultSummary(props) {
    const { result , type , status  } = props;
    const isSuccessful = status === statuses.success;
    let assistiveText = isSuccessful ? 'Correct answer' : 'Incorrect answer';
    let contents;
    const statusIcon = jsx(Icon, {
        name: isSuccessful ? 'check' : 'cross',
        color: isSuccessful ? 'colorStatusSuccessDarker' : 'colorStatusErrorDarker',
        size: "sizeIconSmall2X"
    }, void 0);
    switch(type){
        case 'aggregate':
            assistiveText = `students were ${isSuccessful ? 'successful' : 'unsuccessful'}`;
            contents = jsxs(Fragment, {
                children: [
                    statusIcon,
                    " ",
                    result,
                    " ",
                    jsx(HideVisually, {
                        children: assistiveText
                    }, void 0)
                ]
            }, void 0);
            break;
        case 'multiple-choice':
            contents = jsxs(Fragment, {
                children: [
                    jsx(HideVisually, {
                        children: assistiveText
                    }, void 0),
                    " ",
                    statusIcon,
                    " ",
                    result
                ]
            }, void 0);
            break;
        case 'self-marked':
            if (result) {
                const [userMarks, questionMarks] = result.split('/');
                assistiveText = `${isSuccessful ? 'Successful' : 'Unsuccessful'} score: ${userMarks} out of ${questionMarks}`;
                contents = jsxs(Fragment, {
                    children: [
                        jsx(HideVisually, {
                            children: assistiveText
                        }, void 0),
                        jsx("span", Object.assign({
                            "aria-hidden": "true"
                        }, {
                            children: result
                        }), void 0)
                    ]
                }, void 0);
            }
            break;
        default:
            contents = jsxs(Fragment, {
                children: [
                    jsx(HideVisually, {
                        children: assistiveText
                    }, void 0),
                    " ",
                    statusIcon
                ]
            }, void 0);
    }
    return jsx("span", Object.assign({
        className: cx(styles.root, styles[status])
    }, {
        children: contents
    }), void 0);
}

export { ResultSummary as default };
