import { jsxs, jsx } from 'react/jsx-runtime';
import Flex from '../Flex/Flex.js';
import InfoTip from '../InfoTip/InfoTip.js';
import Illustration from '../Illustration/Illustration.js';
import Markdown from '../Markdown/Markdown.js';
import markdownStyles from '../Markdown/Markdown.css.js';
import Box from '../Box/Box.js';
import Text from '../Text/Text.js';
import Explanation from './Explanation.js';

const feedbackColor = {
    correct: 'colorStatusSuccessDarker',
    incorrect: 'colorStatusErrorDark',
    partlyCorrect: 'colorStatusWarningDarker',
    skipped: 'colorFiftyShadesDarker'
};
function QuizQuestion(props) {
    const { children , copyright , title , meta , source , illustrationName , isFeedbackAnnounced =true , labelId , linkComponent , testHook , explanation , feedback , feedbackRef , variant ,  } = props;
    const hasSourceSpacing = !!(illustrationName || children);
    const sourceFooter = source && jsxs(Flex, Object.assign({
        as: "footer",
        alignItems: "center"
    }, {
        children: [
            jsx(Text, Object.assign({
                as: "small",
                variant: "bodySmall1X",
                color: "colorFiftyShadesDark"
            }, {
                children: source
            }), void 0),
            copyright && jsx(InfoTip, {
                content: copyright,
                iconSize: "sizeIconSmall2X",
                size: "large",
                appendTo: "parent"
            }, void 0)
        ]
    }), void 0);
    return jsxs(Box, Object.assign({
        as: "article",
        testHook: testHook
    }, {
        children: [
            illustrationName && jsx(Box, Object.assign({
                marginBottom: "spacingLarge1X"
            }, {
                children: jsx(Illustration, {
                    size: "small",
                    name: illustrationName
                }, void 0)
            }), void 0),
            jsx(Box, Object.assign({
                id: labelId,
                marginBottom: "spacingSmall",
                testHook: testHook && `${testHook}-title`
            }, {
                children: typeof title === 'string' ? jsx(Markdown, Object.assign({
                    className: markdownStyles.question,
                    linkComponent: linkComponent,
                    isLimited: true
                }, {
                    children: title
                }), void 0) : title
            }), void 0),
            meta && jsx(Box, Object.assign({
                marginBottom: "spacingRoot"
            }, {
                children: jsx(Text, {
                    children: meta
                }, void 0)
            }), void 0),
            sourceFooter && hasSourceSpacing ? jsx(Box, Object.assign({
                marginBottom: {
                    base: 'spacingLarge5X',
                    tablet: 'spacingLarge7X'
                }
            }, {
                children: sourceFooter
            }), void 0) : sourceFooter,
            children,
            jsxs(Box, Object.assign({
                marginTop: "spacingLarge1X",
                ref: feedbackRef,
                "aria-live": isFeedbackAnnounced ? 'polite' : undefined,
                testHook: testHook ? `${testHook}-feedbackContainer` : undefined
            }, {
                children: [
                    feedback && jsx(Text, Object.assign({
                        variant: "bodySmall",
                        color: variant ? feedbackColor[variant] : undefined,
                        testHook: testHook ? `${testHook}-feedback` : undefined
                    }, {
                        children: feedback
                    }), void 0),
                    explanation && jsx(Box, Object.assign({
                        marginTop: "spacingLarge1X"
                    }, {
                        children: jsx(Explanation, Object.assign({
                            testHook: testHook && `${testHook}-explanation`
                        }, {
                            children: explanation
                        }), void 0)
                    }), void 0)
                ]
            }), void 0)
        ]
    }), void 0);
}

export { QuizQuestion as default };
