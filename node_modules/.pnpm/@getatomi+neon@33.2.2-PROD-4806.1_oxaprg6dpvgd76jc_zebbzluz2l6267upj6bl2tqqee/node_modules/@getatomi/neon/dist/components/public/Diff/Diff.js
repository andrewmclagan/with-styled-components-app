import { jsxs, jsx } from 'react/jsx-runtime';
import { forwardRef } from 'react';
import cx from 'classnames';
import keyMirror from 'keymirror';
import Icon from '../Icon/Icon.js';
import HideVisually from '../HideVisually/HideVisually.js';
import Tooltip from '../Tooltip/Tooltip.js';
import { toPercent, isAbove } from '../../../utils/number.js';
import styles from './Diff.css.js';

keyMirror({
    filled: null
});
function Diff(props) {
    const { innerRef , value , threshold =0 , size , tooltip , variant , testHook  } = props;
    const needsAssistiveText = !isAbove(value, 0) || undefined;
    const isUp = isAbove(value, threshold);
    const diff = jsxs("span", Object.assign({
        ref: innerRef,
        className: cx({
            [String(size && styles[size])]: size,
            [String(variant && styles[variant])]: variant,
            [styles.isUp]: isUp,
            [styles.isDown]: !isUp
        })
    }, {
        children: [
            jsx(Icon, {
                className: styles.icon,
                display: "inline-block",
                name: isUp ? 'arrow-up' : 'arrow-down',
                size: "sizeIconSmall2X"
            }, void 0),
            needsAssistiveText && jsx(HideVisually, {
                children: toPercent(value)
            }, void 0),
            jsx("span", Object.assign({
                "aria-hidden": needsAssistiveText,
                className: styles.text,
                "data-test": testHook
            }, {
                children: toPercent(Math.abs(value))
            }), void 0)
        ]
    }), void 0);
    return tooltip ? jsx(Tooltip, Object.assign({
        content: tooltip,
        theme: "light-border"
    }, {
        children: diff
    }), void 0) : diff;
}const DiffWithRef = /*#__PURE__*/ forwardRef(function DiffWithRef(props, ref) {
    return jsx(Diff, Object.assign({
        innerRef: ref
    }, props), void 0);
});

export { DiffWithRef, Diff as default };
