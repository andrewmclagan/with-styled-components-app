import { jsxs, jsx } from 'react/jsx-runtime';
import { forwardRef } from 'react';
import keyMirror from 'keymirror';
import cx from 'classnames';
import { CustomCheckboxContainer, CustomCheckboxInput } from '@reach/checkbox';
import Icon from '../Icon/Icon.js';
import Label, { variants as variants$1 } from '../Label/Label.js';
import useId from '../../../utils/useId.js';
import styles from './Checkbox.css.js';

const variants = keyMirror({
    ghost: null
});
const variantMapping = {
    [variants.ghost]: variants$1.ghost
};
const Checkbox = /*#__PURE__*/ forwardRef(function Checkbox(props, ref) {
    const { checked , isDisabled , label , onChange , size , testHook , variant , ...otherProps } = props;
    const id = useId('Checkbox');
    return jsxs("div", Object.assign({
        className: cx(styles.root, {
            [String(size && styles[size])]: size,
            [String(variant && styles[variant])]: variant,
            [styles.isChecked]: checked,
            [styles.isDisabled]: isDisabled
        }),
        "data-test": testHook
    }, {
        children: [
            jsxs(CustomCheckboxContainer, Object.assign({
                className: styles.checkbox,
                checked: checked,
                disabled: isDisabled,
                onChange: (event)=>onChange(event.target.checked)
            }, {
                children: [
                    jsx(CustomCheckboxInput, Object.assign({}, otherProps, {
                        ref: ref,
                        id: id,
                        "data-test": testHook && `${testHook}-input`
                    }), void 0),
                    checked && jsx(Icon, {
                        className: styles.icon,
                        name: checked === true ? 'check' : 'minus',
                        size: !size ? 'sizeIconSmall2X' : undefined
                    }, void 0)
                ]
            }), void 0),
            label && jsx(Label, Object.assign({
                htmlFor: id,
                variant: variant && variantMapping[variant],
                testHook: testHook && `${testHook}-label`,
                marginBottom: "spacingNone"
            }, {
                children: label
            }), void 0)
        ]
    }), void 0);
});

export { Checkbox as default, variants };
