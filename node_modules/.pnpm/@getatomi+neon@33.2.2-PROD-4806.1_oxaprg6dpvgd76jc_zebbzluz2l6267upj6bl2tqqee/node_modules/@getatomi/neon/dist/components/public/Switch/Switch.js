import { jsxs, jsx } from 'react/jsx-runtime';
import { useRef } from 'react';
import { useHover } from '@react-aria/interactions';
import { useSwitch } from '@react-aria/switch';
import { useToggleState } from '@react-stately/toggle';
import Box from '../Box/Box.js';
import HideVisually from '../HideVisually/HideVisually.js';
import Label from '../Label/Label.js';
import useFocusRing from '../../../utils/useFocusRing.js';
import useTouchTarget from '../../../utils/useTouchTarget.js';
import { spacing } from '../../../constants/tokens/spacing.js';

function mapToReactAriaProps(props) {
    const { ariaDescribedBy , ariaLabel , ariaLabelledBy , label , ...otherProps } = props;
    return {
        ...otherProps,
        children: label,
        'aria-describedby': ariaDescribedBy,
        'aria-label': ariaLabel,
        'aria-labelledby': ariaLabelledBy
    };
}
function getHandleStyles(isSelected, isHovered) {
    let backgroundColor = isHovered ? 'colorFiftyShadesRoot' : 'colorFiftyShadesLight';
    if (isSelected) {
        backgroundColor = isHovered ? 'colorAtomiBluesDarker' : 'colorAtomiBluesDark';
    }
    return {
        backgroundColor,
        borderRadius: 'borderRadiusCircle',
        content: '""',
        left: 0,
        padding: 'spacingSmall',
        position: 'absolute',
        top: 0,
        transform: isSelected ? `translateX(${spacing.spacingRoot})` : undefined,
        transition: 'transitionRoot'
    };
}
function Switch(props) {
    const { isDisabled , label  } = props;
    const inputRef = useRef(null);
    const state = useToggleState(props);
    const { inputProps  } = useSwitch(mapToReactAriaProps(props), state, inputRef);
    const { focusProps , focusStyles  } = useFocusRing();
    const { hoverProps , isHovered  } = useHover({
        isDisabled
    });
    const touchTargetStyles = useTouchTarget();
    const { isSelected  } = state;
    return jsxs(Box, Object.assign({
        as: "label",
        alignItems: "center",
        display: "inline-flex",
        gap: "spacingSmall",
        cursor: isDisabled ? 'default' : undefined
    }, hoverProps, {
        children: [
            label && jsx(Label, Object.assign({
                as: "span",
                marginBottom: "spacingNone"
            }, {
                children: label
            }), void 0),
            jsx(HideVisually, {
                children: jsx("input", Object.assign({}, inputProps, focusProps, {
                    ref: inputRef
                }), void 0)
            }, void 0),
            jsx(Box, Object.assign({
                as: "span",
                backgroundColor: isSelected ? 'colorAtomiBluesLighter' : 'colorFiftyShadesLighter',
                borderColor: isSelected ? 'colorAtomiBluesLighter' : 'colorFiftyShadesLighter',
                borderRadius: "borderRadiusLarge1X",
                borderStyle: "solid",
                borderWidth: "borderWidthLarge",
                opacity: isDisabled ? 0.5 : undefined,
                paddingBlock: "spacingSmall",
                paddingInline: "spacingLarge",
                position: "relative",
                _before: getHandleStyles(isSelected, isHovered)
            }, focusStyles, touchTargetStyles), void 0)
        ]
    }), void 0);
}

export { Switch as default };
