import { jsxs, jsx, Fragment } from 'react/jsx-runtime';
import cx from 'classnames';
import { Children } from 'react';
import { useHover } from '@react-aria/interactions';
import { useFocusRing } from '@react-aria/focus';
import Box from '../Box/Box.js';
import Divider from '../Divider/Divider.js';
import Card from '../Card/Card.js';
import DateTime from '../DateTime/DateTime.js';
import Flex from '../Flex/Flex.js';
import Icon from '../Icon/Icon.js';
import Link from '../../private/Link/Link.js';
import MarkdownPreview from '../MarkdownPreview/MarkdownPreview.js';
import ProgressBar from '../ProgressBar/ProgressBar.js';
import Stack from '../Stack/Stack.js';
import Tag from '../Tag/Tag.js';
import Text from '../Text/Text.js';
import Tooltip from '../Tooltip/Tooltip.js';
import styles from './TaskCard.css.js';
import HideVisually from '../HideVisually/HideVisually.js';

function IconWithText(props) {
    const { iconName , children  } = props;
    return jsxs(Flex, Object.assign({
        alignItems: "center",
        gap: "spacingSmall1X"
    }, {
        children: [
            jsx(Icon, {
                name: iconName,
                size: "sizeIconSmall2X",
                color: "colorFiftyShadesLight"
            }, void 0),
            jsx(Text, Object.assign({
                variant: "bodySmall1X",
                fontWeight: "fontWeightMedium"
            }, {
                children: children
            }), void 0)
        ]
    }), void 0);
}
function TasksList(props) {
    const { children  } = props;
    return jsx(Box, Object.assign({
        as: "ul",
        borderTopWidth: "borderWidthRoot",
        borderTopStyle: "solid",
        borderTopColor: "colorFiftyShadesLighter"
    }, {
        children: children
    }), void 0);
}
function Task(props) {
    const { children  } = props;
    return jsx(Box, Object.assign({
        as: "li",
        className: styles.task
    }, {
        children: children
    }), void 0);
}
function Completion(props) {
    const { isCompleted =false , isDisabled , onClick , colors , text , tooltipProps , testHook  } = props;
    const { hoverProps , isHovered  } = useHover({
        isDisabled
    });
    const { isFocused , focusProps  } = useFocusRing();
    const isCircleFilled = isHovered || !isDisabled && isFocused;
    const iconSize = {
        base: 'sizeIconSmall',
        tablet: 'sizeIconRoot'
    };
    let iconColor = 'colorFiftyShadesLight';
    if (isDisabled && !isCompleted) {
        iconColor = 'colorFiftyShadesLighter';
    } else if (isCompleted || isHovered || isFocused) {
        iconColor = colors.root;
    }
    const button = jsxs(Box, Object.assign({
        as: "button",
        type: "button",
        display: "flex",
        alignItems: "center",
        gap: {
            base: 'spacingSmall',
            tablet: 'spacingRoot'
        },
        cursor: isDisabled ? 'not-allowed' : undefined,
        onClick: isDisabled ? undefined : onClick,
        "aria-disabled": isDisabled,
        testHook: testHook,
        "aria-pressed": isCompleted
    }, hoverProps, focusProps, {
        children: [
            jsx(Box, Object.assign({
                as: "span",
                backgroundColor: isCircleFilled ? colors.lightest : undefined,
                borderRadius: "borderRadiusCircle",
                display: "flex",
                alignItems: "center",
                size: iconSize,
                transition: "transitionRoot"
            }, {
                children: jsx(Icon, {
                    name: isCompleted ? 'circle-solid-check' : 'circle-check',
                    color: iconColor,
                    size: iconSize
                }, void 0)
            }), void 0),
            jsx(Text, Object.assign({
                fontFamily: "fontFamilyRoot",
                fontSize: "fontSizeSmall",
                color: isCompleted ? 'colorFiftyShadesDarker' : 'colorCoreText'
            }, {
                children: text
            }), void 0)
        ]
    }), void 0);
    return isDisabled ? jsx(Tooltip, Object.assign({}, tooltipProps, {
        children: button
    }), void 0) : button;
}
function TaskCard(props) {
    const { avatar , assignedTo , dueDate , label , linkProps , colors , message , meta , actions , attachments , completion , progress , children , withStatus , testHook , title , scheduledDate ,  } = props;
    const { hoverProps , isHovered  } = useHover({});
    const hasTasks = Children.toArray(children).length > 0;
    const hasFooter = completion || progress;
    const hasBodyOrFooter = title || message || attachments || hasTasks || hasFooter;
    const isTasksV3 = !!linkProps;
    const cardTitle = title && jsxs(Text, Object.assign({
        as: "h2",
        variant: "bodySmall1X",
        fontWeight: "fontWeightBold",
        color: isHovered ? 'colorFiftyShadesDarkest' : 'colorFiftyShadesDarker'
    }, {
        children: [
            title,
            jsx(HideVisually, {
                children: "."
            }, void 0)
        ]
    }), void 0);
    const cardMessage = message && jsx(Text, Object.assign({
        variant: "bodySmall1X",
        color: isHovered ? 'colorFiftyShadesDarker' : 'colorFiftyShadesDark',
        whiteSpace: "pre-line",
        testHook: testHook && `${testHook}-message`
    }, {
        children: linkProps ? jsx(MarkdownPreview, {
            children: message
        }, void 0) : message
    }), void 0);
    return jsx(Card, Object.assign({
        as: "article",
        padding: "spacingRoot",
        variant: "elevated",
        withHover: false,
        testHook: testHook
    }, {
        children: jsxs(Stack, {
            children: [
                jsxs(Stack, Object.assign({
                    spacing: "spacingLarge"
                }, {
                    children: [
                        meta,
                        jsxs("div", Object.assign({
                            className: cx(styles.header, label && styles.withLabel)
                        }, {
                            children: [
                                jsxs(Flex, Object.assign({
                                    alignItems: "center",
                                    gap: "spacingRoot"
                                }, {
                                    children: [
                                        jsx(IconWithText, Object.assign({
                                            iconName: "calendar"
                                        }, {
                                            children: jsx(DateTime, {
                                                prefix: "Due ",
                                                value: dueDate,
                                                variant: "noWrap",
                                                withStatus: withStatus,
                                                testHook: testHook && `${testHook}-due-date`
                                            }, void 0)
                                        }), void 0),
                                        assignedTo && jsx(IconWithText, Object.assign({
                                            iconName: "user"
                                        }, {
                                            children: assignedTo
                                        }), void 0)
                                    ]
                                }), void 0),
                                label && jsx("div", Object.assign({
                                    className: styles.label
                                }, {
                                    children: jsx(Tag, Object.assign({
                                        fillColor: colors.lighter,
                                        variant: "filled",
                                        tooltip: scheduledDate && jsx(DateTime, {
                                            value: scheduledDate,
                                            variant: "noWrap"
                                        }, void 0)
                                    }, {
                                        children: label
                                    }), void 0)
                                }), void 0),
                                avatar && jsx("div", Object.assign({
                                    className: styles.avatar
                                }, {
                                    children: avatar
                                }), void 0),
                                actions && jsx("div", Object.assign({
                                    className: styles.actions
                                }, {
                                    children: actions
                                }), void 0)
                            ]
                        }), void 0)
                    ]
                }), void 0),
                hasBodyOrFooter && jsxs(Stack, {
                    children: [
                        isTasksV3 ? jsx(Link, Object.assign({}, linkProps, hoverProps, {
                            children: jsxs(Stack, Object.assign({
                                spacing: "spacingSmall"
                            }, {
                                children: [
                                    cardTitle,
                                    cardMessage,
                                    jsx(Text, Object.assign({
                                        as: "span",
                                        color: "inherit",
                                        fontSize: "fontSizeSmall"
                                    }, {
                                        children: linkProps.children
                                    }), void 0)
                                ]
                            }), void 0)
                        }), void 0) : jsxs(Fragment, {
                            children: [
                                cardTitle,
                                cardMessage
                            ]
                        }, void 0),
                        attachments,
                        (hasTasks || hasFooter) && /* Group tasks and footer to avoid the Stack spacing between the two. */ jsxs(Box, {
                            children: [
                                hasTasks && jsx(TasksList, {
                                    children: children
                                }, void 0),
                                hasFooter && jsxs(Stack, Object.assign({
                                    spacing: "spacingSmall"
                                }, {
                                    children: [
                                        jsx(Divider, {}, void 0),
                                        jsxs(Box, {
                                            children: [
                                                completion && jsx(Completion, Object.assign({}, completion, {
                                                    colors: colors,
                                                    testHook: testHook && `${testHook}-completion`
                                                }), void 0),
                                                progress && jsx(ProgressBar, Object.assign({}, progress, {
                                                    variant: "chunky",
                                                    color: colors.root,
                                                    role: "meter"
                                                }), void 0)
                                            ]
                                        }, void 0)
                                    ]
                                }), void 0)
                            ]
                        }, void 0)
                    ]
                }, void 0)
            ]
        }, void 0)
    }), void 0);
}
TaskCard.Task = Task;
TaskCard.Completion = Completion;

export { Completion, TaskCard as default };
