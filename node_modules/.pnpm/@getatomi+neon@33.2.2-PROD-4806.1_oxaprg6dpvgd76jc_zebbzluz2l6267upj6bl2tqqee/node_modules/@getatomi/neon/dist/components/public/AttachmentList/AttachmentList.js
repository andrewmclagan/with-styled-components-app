import { jsx, jsxs } from 'react/jsx-runtime';
import flattenChildren from 'react-flatten-children';
import cx from 'classnames';
import Box from '../Box/Box.js';
import Icon from '../Icon/Icon.js';
import Link from '../../private/Link/Link.js';
import { TextLoader } from '../Text/Text.js';
import WithIcon from '../../private/WithIcon/WithIcon.js';
import styles from './AttachmentList.css.js';

function ExternalContent(props) {
    const { iconProps , isDisabled , linkProps , meta , name , testHook  } = props;
    return jsx(WithIcon, Object.assign({}, linkProps, {
        as: isDisabled ? 'button' : Link,
        iconProps: iconProps,
        className: cx(styles.externalContent, {
            [styles.isDisabled]: isDisabled
        })
    }, {
        children: jsxs("div", Object.assign({
            className: styles.externalContentDetails
        }, {
            children: [
                jsx("div", Object.assign({
                    className: styles.externalContentName,
                    "data-test": testHook && `${testHook}-name`
                }, {
                    children: name
                }), void 0),
                jsx("div", Object.assign({
                    className: styles.externalContentMeta,
                    "data-test": testHook && `${testHook}-meta`
                }, {
                    children: meta
                }), void 0)
            ]
        }), void 0)
    }), void 0);
}
function Attachment(props) {
    const { children , isTruncated =true , onRemove , removeAssistiveText , testHook , validationTextId ,  } = props;
    return jsxs("div", Object.assign({
        className: cx(styles.attachment, {
            [styles.isTruncated]: isTruncated
        }),
        "aria-describedby": validationTextId,
        "data-test": testHook
    }, {
        children: [
            children,
            onRemove && jsx(Box, Object.assign({
                as: "button",
                type: "button",
                onClick: onRemove,
                className: styles.removeIcon
            }, {
                children: jsx(Icon, {
                    name: "close",
                    size: "sizeIconSmall2X",
                    isDecorative: false,
                    title: removeAssistiveText,
                    testHook: testHook && `${testHook}-remove-button`
                }, void 0)
            }), void 0)
        ]
    }), void 0);
}
function Loader() {
    return jsx(Box, Object.assign({
        alignSelf: "center",
        marginInline: "spacingSmall"
    }, {
        children: jsx(TextLoader, {
            width: "sizeFull"
        }, void 0)
    }), void 0);
}
function AttachmentList(props) {
    const { children , testHook  } = props;
    const attachments = flattenChildren(children);
    const hasSingleChild = attachments.length === 1;
    return jsx("ul", Object.assign({
        className: styles.root,
        "data-test": testHook
    }, {
        children: attachments.map((attachment, i)=>jsx("li", Object.assign({
                className: attachment.props.isFullWidth || hasSingleChild ? styles.isFullWidth : undefined
            }, {
                children: attachment
            }), i)
        )
    }), void 0);
}
AttachmentList.Attachment = Attachment;
AttachmentList.ExternalContent = ExternalContent;
AttachmentList.Loader = Loader;

export { Attachment, AttachmentList as default };
