import 'core-js/modules/web.dom-collections.iterator.js';
import { jsx, Fragment, jsxs } from 'react/jsx-runtime';
import moment from 'moment';
import { useState, cloneElement } from 'react';
import DatePicker from '../DatePicker/DatePicker.js';
import TimePicker from '../TimePicker/TimePicker.js';

const timeInputFormat = 'H:mm';
function useDateTimePicker(props) {
    const { datePickerWrapper =jsx(Fragment, {}, void 0) , datePickerProps , timePickerWrapper =jsx(Fragment, {}, void 0) , timePickerProps , value , onChange , testHook ,  } = props;
    const [dateAndTime, setDateAndTime] = useState(()=>value.clone().startOf('hour')
    );
    const onDateChange = (date)=>{
        const newDate = dateAndTime.clone().set({
            date: date.get('date'),
            month: date.get('month'),
            year: date.get('year')
        });
        setDateAndTime(newDate);
        onChange(newDate);
    };
    const onTimeChange = (timeString)=>{
        const time = moment(timeString, timeInputFormat);
        const newDate = dateAndTime.clone().set({
            hour: time.get('hour'),
            minute: time.get('minute')
        });
        setDateAndTime(newDate);
        onChange(newDate);
    };
    return {
        datePicker: /*#__PURE__*/ cloneElement(datePickerWrapper, {}, jsx(DatePicker, Object.assign({}, datePickerProps, {
            value: dateAndTime,
            onChange: onDateChange,
            testHook: testHook && `${testHook}-date`
        }), void 0)),
        timePicker: /*#__PURE__*/ cloneElement(timePickerWrapper, {}, jsx(TimePicker, Object.assign({}, timePickerProps, {
            inputFormat: timeInputFormat,
            value: dateAndTime.format(timeInputFormat),
            onChange: onTimeChange,
            testHook: testHook && `${testHook}-time`
        }), void 0))
    };
}function DateTimePicker(props) {
    const { datePicker , timePicker  } = useDateTimePicker(props);
    return jsxs(Fragment, {
        children: [
            datePicker,
            timePicker
        ]
    }, void 0);
}

export { DateTimePicker, useDateTimePicker as default };
