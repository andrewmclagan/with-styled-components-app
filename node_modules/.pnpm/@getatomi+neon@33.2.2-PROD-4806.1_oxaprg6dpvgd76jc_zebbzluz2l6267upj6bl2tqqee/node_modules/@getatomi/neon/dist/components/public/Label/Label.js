import { jsx } from 'react/jsx-runtime';
import keyMirror from 'keymirror';
import cx from 'classnames';
import Box from '../Box/Box.js';
import styles from './Label.css.js';

const variants = keyMirror({
    ghost: null
});
function Label(props) {
    const { // There are cases when we don't want to render as a `label` element e.g.
    // when the wrapped children already contain a `label` which would be invalid.
    // See https://html.spec.whatwg.org/multipage/forms.html#the-label-element
    as ='label' , children , className , marginBottom ='spacingSmall1X' , size , variant , testHook , ...otherProps } = props;
    return jsx(Box, Object.assign({}, otherProps, {
        as: as,
        className: cx(styles.root, className, {
            [String(size && styles[size])]: size,
            [String(variant && styles[variant])]: variant
        }),
        marginBottom: marginBottom,
        testHook: testHook
    }, {
        children: children
    }), void 0);
}

export { Label as default, variants };
