import 'core-js/modules/web.dom-collections.iterator.js';
import { jsxs, jsx } from 'react/jsx-runtime';
import cx from 'classnames';
import { StatefulMenu } from '../../public/Menu/Menu.js';
import styles from './Pagination.css.js';

const pageSizes = [
    10,
    20,
    50,
    100
];
function Trigger(param) {
    let { children  } = param;
    return jsx("div", Object.assign({
        className: styles.pageSizeTrigger
    }, {
        children: children
    }), void 0);
}
function Option(param) {
    let { children  } = param;
    return jsx("div", Object.assign({
        className: styles.pageSizeOption
    }, {
        children: children
    }), void 0);
}
function Page(props) {
    const { title , isActive =false , isShortcut =false , isDisabled =false , isSkip =false , children , testHook , ...buttonProps } = props;
    return isSkip ? jsx("span", Object.assign({
        "aria-hidden": true,
        className: styles.pageSkip
    }, {
        children: children
    }), void 0) : jsx("button", Object.assign({
        type: "button",
        className: cx(styles.page, {
            [styles.isActive]: isActive,
            [styles.isShortcut]: isShortcut
        }),
        "aria-label": title,
        title: title,
        disabled: isDisabled,
        "data-test": testHook
    }, buttonProps, {
        children: jsx("span", Object.assign({
            "aria-hidden": true
        }, {
            children: children
        }), void 0)
    }), void 0);
}
function Pagination(props) {
    const { ariaLabel , pages , currentPage , pageSize =pageSizes[0] , renderPageSize , pageSizeOnChange , labels: [firstLabel, previousLabel, nextLabel, lastLabel] , renderPageLabel , gotoPage , testHook ,  } = props;
    const firstPage = pages[0];
    const lastPage = pages[pages.length - 1];
    const SKIP = 'â€¦';
    return jsxs("div", Object.assign({
        className: styles.root,
        "data-test": testHook
    }, {
        children: [
            jsx(StatefulMenu, {
                itemVariant: "large",
                ariaLabel: "Results per page",
                trigger: jsx(Trigger, {}, void 0),
                options: pageSizes.map((size)=>({
                        label: jsx(Option, {
                            children: renderPageSize(size)
                        }, void 0),
                        value: size
                    })
                ),
                value: pageSize,
                onChange: (val)=>pageSizeOnChange(val)
                ,
                testHook: testHook && `${testHook}-pageSize-menu`
            }, void 0),
            jsx("nav", Object.assign({
                "aria-label": ariaLabel,
                className: styles.nav
            }, {
                children: jsxs("ul", Object.assign({
                    className: styles.pages
                }, {
                    children: [
                        jsx("li", Object.assign({
                            "data-rank": "0"
                        }, {
                            children: jsx(Page, Object.assign({
                                title: firstLabel,
                                onClick: ()=>gotoPage(firstPage)
                                ,
                                isDisabled: currentPage === firstPage,
                                isShortcut: true,
                                testHook: testHook && `${testHook}-first`
                            }, {
                                children: "\u00AB"
                            }), void 0)
                        }), void 0),
                        jsx("li", Object.assign({
                            "data-rank": "0"
                        }, {
                            children: jsx(Page, Object.assign({
                                title: previousLabel,
                                onClick: ()=>gotoPage(currentPage - 1)
                                ,
                                isDisabled: currentPage === firstPage,
                                isShortcut: true,
                                testHook: testHook && `${testHook}-previous`
                            }, {
                                children: "\u2039"
                            }), void 0)
                        }), void 0),
                        pages // determine the pages to display around first, last and current
                        .map((index)=>index <= firstPage + 1 || index >= lastPage - 1 || index >= currentPage - 1 && index <= currentPage + 1 ? index : SKIP
                        ).reduce(// the accummulator contains a list of [page, rank] tuples and a
                        // page can have several ranks
                        //
                        // @ts-ignore TODO-TS[ENHANCEMENT] - this code is confusing, i'm
                        // not even going to attempt to correctly type it at this stage
                        (acc, current)=>{
                            const [previous] = acc.length > 1 ? acc[acc.length - 1] : [];
                            // collapse consecutive skips into one
                            if (current === SKIP && previous === SKIP) return acc;
                            // add skips around the current page
                            if (current === currentPage) return [
                                ...acc,
                                [
                                    SKIP,
                                    1
                                ],
                                [
                                    currentPage,
                                    0
                                ],
                                [
                                    SKIP,
                                    1
                                ]
                            ];
                            return [
                                ...acc,
                                // this is achieved by combining the rank 1 (between
                                // small and medium) and rank 2 (above medium)
                                [
                                    current,
                                    current === firstPage || current === lastPage ? [
                                        1,
                                        2
                                    ] : 2
                                ], 
                            ];
                        }, []) // render page numbers and skips
                        // @ts-ignore TODO-TS[ENHANCEMENT] as above. this is also broken,
                        // because TS thinks the above returns a number
                        .map((param, i)=>{
                            let [text, rank] = param;
                            return jsx("li", Object.assign({
                                "aria-current": text === currentPage ? 'page' : undefined,
                                "data-rank": rank.toString()
                            }, {
                                children: jsx(Page, Object.assign({
                                    title: typeof text === 'number' ? renderPageLabel(text) : undefined,
                                    onClick: typeof text === 'number' ? ()=>gotoPage(text)
                                     : undefined,
                                    isActive: text === currentPage,
                                    isSkip: text === SKIP,
                                    testHook: testHook && `${testHook}-page-${text}`
                                }, {
                                    children: text
                                }), void 0)
                            }), i);
                        }),
                        jsx("li", Object.assign({
                            "data-rank": "0"
                        }, {
                            children: jsx(Page, Object.assign({
                                title: nextLabel,
                                onClick: ()=>gotoPage(currentPage + 1)
                                ,
                                isDisabled: currentPage === lastPage,
                                isShortcut: true,
                                testHook: testHook && `${testHook}-next`
                            }, {
                                children: "\u203A"
                            }), void 0)
                        }), void 0),
                        jsx("li", Object.assign({
                            "data-rank": "0"
                        }, {
                            children: jsx(Page, Object.assign({
                                title: lastLabel,
                                onClick: ()=>gotoPage(lastPage)
                                ,
                                isDisabled: currentPage === lastPage,
                                isShortcut: true,
                                testHook: testHook && `${testHook}-last`
                            }, {
                                children: "\u00BB"
                            }), void 0)
                        }), void 0)
                    ]
                }), void 0)
            }), void 0)
        ]
    }), void 0);
}

export { Pagination as default, pageSizes };
