import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import Box from '../Box/Box.js';
import Icon from '../Icon/Icon.js';
import Text from '../Text/Text.js';
import { useMedia } from '../Media/Media.js';
import useTouchTarget from '../../../utils/useTouchTarget.js';
import { breakpoints } from '../../../constants/tokens/breakpoints.js';

function ModalCloseButton(props) {
    const { onClick , withText  } = props;
    const touchTargetStyles = useTouchTarget();
    const isTabletUp = useMedia({
        minWidth: breakpoints.breakpointMediumFrom
    });
    const isTextVisible = withText && isTabletUp;
    return jsxs(Box, Object.assign({
        "aria-label": !isTextVisible ? 'close' : undefined,
        as: "button",
        type: "button",
        onClick: onClick,
        color: "colorInteractiveLink",
        display: "inline-flex",
        alignItems: "center",
        gap: "spacingSmall",
        padding: isTextVisible ? 'spacingSmall' : undefined,
        position: "relative",
        transition: "transitionRoot",
        _hover: {
            color: 'colorInteractiveLinkHover'
        }
    }, !isTextVisible && touchTargetStyles, {
        children: [
            isTextVisible && jsx(Text, Object.assign({
                variant: "bodySmall1X",
                color: "inherit"
            }, {
                children: "Close"
            }), void 0),
            jsx(Icon, {
                name: "close",
                size: "sizeIconSmall2X",
                strokeWidth: "2"
            }, void 0)
        ]
    }), void 0);
}
const actionStyles = {
    borderBottomColor: 'colorFiftyShadesLighter',
    borderBottomStyle: 'solid',
    borderBottomWidth: 'borderWidthRoot',
    alignItems: 'center',
    display: 'flex',
    flexShrink: 0,
    gap: 'spacingLarge',
    justifyContent: 'space-between',
    paddingBlock: 'spacingSmall',
    paddingInline: {
        base: 'spacingRoot',
        tablet: 'spacingLarge3X'
    },
    overflow: 'hidden'
};
const viewStyles = {
    display: 'flex',
    justifyContent: 'flex-end',
    paddingBlock: {
        base: 'spacingRoot',
        tablet: 'spacingSmall2X'
    },
    paddingInline: {
        base: 'spacingRoot',
        tablet: 'spacingLarge'
    }
};
const variantStylesMapping = {
    view: viewStyles
};
function ModalHeader(props) {
    const { children , onClose , size , variant  } = props;
    return jsx(Box, Object.assign({}, variant ? variantStylesMapping[variant] : actionStyles, {
        children: size === 'fullscreen' ? jsxs(Fragment, {
            children: [
                jsx(ModalCloseButton, {
                    onClick: onClose,
                    withText: variant === 'view'
                }, void 0),
                children
            ]
        }, void 0) : jsxs(Fragment, {
            children: [
                children,
                jsx(ModalCloseButton, {
                    onClick: onClose
                }, void 0)
            ]
        }, void 0)
    }), void 0);
}

export { ModalHeader as default };
