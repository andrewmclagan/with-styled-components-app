import 'core-js/modules/web.dom-collections.iterator.js';
import { jsx } from 'react/jsx-runtime';
import { useState, useRef, useLayoutEffect, cloneElement } from 'react';
import keyMirror from 'keymirror';
import cx from 'classnames';
import useWindowSize from '../../../utils/useWindowSize.js';
import styles from './HorizontalScroll.css.js';

const variants = keyMirror({
    fade: null,
    smallShadow: null
});
const setupScrollHandling = (container, wrapper, setIsScrollable, setIsAtEnd, setScrollPosition)=>{
    setIsScrollable(!!(wrapper.scrollWidth > container.offsetWidth));
    const handleScroll = ()=>{
        window.requestAnimationFrame(()=>{
            setIsAtEnd(wrapper.scrollLeft + wrapper.offsetWidth >= wrapper.scrollWidth);
            setScrollPosition({
                left: wrapper.scrollLeft,
                top: wrapper.scrollTop
            });
        });
    };
    wrapper.addEventListener('scroll', handleScroll, false);
    return function cleanup() {
        wrapper.removeEventListener('scroll', handleScroll, false);
    };
};
function HorizontalScroll(props) {
    const { children , forwardScrollPosition =false , variant =variants.fade  } = props;
    const [isScrollable, setIsScrollable] = useState(false);
    const [isAtEnd, setIsAtEnd] = useState(false);
    const [scrollPosition, setScrollPosition] = useState(null);
    const rootContainer = useRef(null);
    const scrollWrapper = useRef(null);
    const { width  } = useWindowSize();
    useLayoutEffect(()=>{
        const container = rootContainer.current;
        const wrapper = scrollWrapper.current;
        if (container && wrapper) {
            return setupScrollHandling(container, wrapper, setIsScrollable, setIsAtEnd, setScrollPosition);
        }
    }, [
        forwardScrollPosition,
        rootContainer,
        scrollWrapper,
        width
    ]);
    return jsx("div", Object.assign({
        className: cx(styles.root, {
            [styles[variant]]: variant,
            [styles.isScrollable]: isScrollable,
            [styles.isAtEnd]: isAtEnd
        }),
        ref: rootContainer
    }, {
        children: jsx("div", Object.assign({
            className: styles.scrollWrapper,
            ref: scrollWrapper
        }, {
            children: forwardScrollPosition ? /*#__PURE__*/ cloneElement(children, {
                scrollPosition
            }) : children
        }), void 0)
    }), void 0);
}

export { HorizontalScroll as default, setupScrollHandling, variants };
