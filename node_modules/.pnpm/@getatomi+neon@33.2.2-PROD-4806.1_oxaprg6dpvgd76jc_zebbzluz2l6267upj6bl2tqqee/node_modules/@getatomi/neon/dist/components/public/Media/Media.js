import 'core-js/modules/web.dom-collections.iterator.js';
import { jsx, Fragment } from 'react/jsx-runtime';
import { isElement, isFragment } from 'react-is';
import { useMediaQuery, Context } from 'react-responsive';
import json2mq from 'json2mq';
import { cloneElement } from 'react';

function useMedia() {
    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
        args[_key] = arguments[_key];
    }
    // eslint-disable-next-line prefer-const
    let [settings, ...other] = args;
    if (settings.query && !settings.query.startsWith('(')) {
        settings.query = `(${settings.query})`;
    }
    return useMediaQuery(settings, ...other);
}
function Media(props) {
    const { element , queries  } = props;
    // We're ignoring Rules of Hooks because the list of queries is not going to
    // change between renders.
    const matches = Object.keys(queries).map((query)=>// eslint-disable-next-line react-hooks/rules-of-hooks
        useMedia({
            query
        })
    );
    return jsx(Fragment, {
        children: Object.keys(queries).reduce((result, query, i)=>{
            const value = queries[query];
            if (matches[i]) {
                if (!value || isElement(value) || isFragment(value)) {
                    return value;
                }
                return element && /*#__PURE__*/ cloneElement(element, value);
            }
            return result;
        }, element)
    }, void 0);
}
Media.query = json2mq;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
Media.Any = Media;
Media.Context = Context;

export { Media as default, useMedia };
