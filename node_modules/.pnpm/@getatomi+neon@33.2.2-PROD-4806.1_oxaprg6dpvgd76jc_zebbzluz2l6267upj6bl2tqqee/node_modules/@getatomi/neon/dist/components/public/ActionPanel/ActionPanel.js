import { jsxs, jsx, Fragment } from 'react/jsx-runtime';
import cx from 'classnames';
import PulsatingDot from '../../private/PulsatingDot/PulsatingDot.js';
import Button, { ButtonLoader } from '../Button/Button.js';
import HideVisually from '../HideVisually/HideVisually.js';
import Icon from '../Icon/Icon.js';
import Link from '../../private/Link/Link.js';
import Media from '../Media/Media.js';
import Stack from '../Stack/Stack.js';
import Text, { TextLoader } from '../Text/Text.js';
import Truncate from '../Truncate/Truncate.js';
import styles from './ActionPanel.css.js';

function ActionPanel(props) {
    const { assistiveText , buttonProps , isLoading , linkProps , testHook , text  } = props;
    return jsxs("aside", Object.assign({
        className: cx(styles.root, {
            [styles.isLoading]: isLoading
        }),
        "data-test": testHook
    }, {
        children: [
            jsx(Media, {
                element: jsx(PulsatingDot, {
                    className: styles.pulsatingDot,
                    size: "small"
                }, void 0),
                queries: {
                    [styles['--fromBreakpoint']]: {
                        size: undefined
                    }
                }
            }, void 0),
            isLoading && assistiveText && jsx(HideVisually, {
                children: assistiveText
            }, void 0),
            jsx("div", Object.assign({
                className: styles.text
            }, {
                children: isLoading ? jsx(Fragment, {
                    children: jsxs(Stack, Object.assign({
                        spacing: "spacingSmall"
                    }, {
                        children: [
                            jsx(TextLoader, {
                                width: {
                                    base: 130,
                                    tablet: 180
                                }
                            }, void 0),
                            jsx(TextLoader, {
                                width: {
                                    base: 230,
                                    tablet: 360
                                }
                            }, void 0)
                        ]
                    }), void 0)
                }, void 0) : jsxs(Fragment, {
                    children: [
                        text && jsx(Text, Object.assign({
                            as: "p",
                            fontSize: "fontSizeSmall1X",
                            color: "colorFiftyShadesDark"
                        }, {
                            children: text
                        }), void 0),
                        linkProps && jsx(Link, Object.assign({}, linkProps, {
                            children: jsx(Truncate, {
                                children: linkProps.children
                            }, void 0)
                        }), void 0)
                    ]
                }, void 0)
            }), void 0),
            isLoading && jsx("div", Object.assign({
                className: styles.cta
            }, {
                children: jsx(Media, {
                    element: jsx(Icon, {
                        name: "arrow-front",
                        strokeWidth: "2"
                    }, void 0),
                    queries: {
                        [styles['--fromBreakpoint']]: jsx(ButtonLoader, {
                            size: "small1X"
                        }, void 0)
                    }
                }, void 0)
            }), void 0),
            buttonProps && jsx("div", Object.assign({
                className: styles.cta
            }, {
                children: jsx(Media, {
                    element: buttonProps.to ? jsx(Button, Object.assign({
                        variant: "link"
                    }, buttonProps, {
                        children: jsx(Icon, {
                            name: "arrow-front",
                            strokeWidth: "2"
                        }, void 0)
                    }), void 0) : null,
                    queries: {
                        [styles['--fromBreakpoint']]: jsx(Button, Object.assign({}, buttonProps, {
                            size: "small",
                            variant: "info"
                        }), void 0)
                    }
                }, void 0)
            }), void 0)
        ]
    }), void 0);
}

export { ActionPanel as default };
