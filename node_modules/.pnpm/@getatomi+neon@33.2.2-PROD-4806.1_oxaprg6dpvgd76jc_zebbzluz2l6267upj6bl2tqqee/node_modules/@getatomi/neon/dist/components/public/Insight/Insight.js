import { jsx, jsxs } from 'react/jsx-runtime';
import cx from 'classnames';
import Card from '../Card/Card.js';
import { DiffWithRef } from '../Diff/Diff.js';
import InsightGraph from '../InsightGraph/InsightGraph.js';
import Skeleton from '../Skeleton/Skeleton.js';
import Text from '../Text/Text.js';
import { useMedia } from '../Media/Media.js';
import styles from './Insight.css.js';

function Insight(props) {
    const { title , description , value , diffDescription , diffTooltip , diffValue , graphProps , isActive , onClick , testHook ,  } = props;
    const withHover = !!onClick;
    const isMobile = useMedia({
        query: styles['--upToBreakpoint']
    });
    const displayAsButton = withHover && !isMobile;
    const InnerElement = displayAsButton ? 'button' : 'div';
    return jsx(Card, Object.assign({
        variant: isMobile ? 'elevated' : 'rounded',
        withHover: displayAsButton,
        testHook: testHook
    }, {
        children: jsxs(InnerElement, Object.assign({
            className: cx(styles.root, {
                [styles.isActive]: isActive,
                [styles.withHover]: withHover
            }),
            onClick: displayAsButton ? onClick : undefined,
            type: displayAsButton ? 'button' : undefined
        }, {
            children: [
                jsx("div", Object.assign({
                    className: styles.title,
                    "data-test": testHook && `${testHook}-title`
                }, {
                    children: jsx(Text, Object.assign({
                        as: "span",
                        color: "colorCoreBlack",
                        fontSize: {
                            base: 'fontSizeSmall1X',
                            tablet: 'fontSizeSmall'
                        },
                        fontWeight: "fontWeightSemiBold",
                        lineHeight: "lineHeightSmall1X"
                    }, {
                        children: title
                    }), void 0)
                }), void 0),
                jsxs("div", Object.assign({
                    className: styles.diff
                }, {
                    children: [
                        jsx(DiffWithRef, {
                            variant: "filled",
                            size: "small",
                            value: diffValue,
                            tooltip: isMobile ? diffTooltip || diffDescription : undefined,
                            testHook: testHook && `${testHook}-diff`
                        }, void 0),
                        jsx("span", Object.assign({
                            className: styles.diffDescription
                        }, {
                            children: diffDescription
                        }), void 0)
                    ]
                }), void 0),
                jsx("div", Object.assign({
                    className: styles.value,
                    "data-test": testHook && `${testHook}-value`
                }, {
                    children: value
                }), void 0),
                jsx("div", Object.assign({
                    className: styles.description,
                    "data-test": testHook && `${testHook}-description`
                }, {
                    children: description
                }), void 0),
                graphProps && jsx("div", Object.assign({
                    className: styles.graph
                }, {
                    children: jsx(InsightGraph, Object.assign({}, graphProps, {
                        isEmbedded: true
                    }), void 0)
                }), void 0)
            ]
        }), void 0)
    }), void 0);
}function InsightLoader() {
    return jsx(Skeleton, {
        height: {
            base: 300,
            tablet: 195
        },
        animation: "wave"
    }, void 0);
}
Insight.Loader = InsightLoader;

export { Insight as default };
