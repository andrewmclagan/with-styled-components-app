import { jsx, jsxs } from 'react/jsx-runtime';
import Box from '../Box/Box.js';
import Flex from '../Flex/Flex.js';
import Markdown from '../Markdown/Markdown.js';
import QuizQuestion from './QuizQuestion.js';
import Option from './Option.js';

function MultipleChoiceQuestionOption(props) {
    const { isDisabled , isSelected , label , onClick , testHook , title , variant  } = props;
    return jsxs(Flex, Object.assign({
        gap: "spacingRoot",
        alignItems: "center",
        marginLeft: label ? {
            base: undefined,
            tablet: 'spacingNegativeLarge6X'
        } : undefined
    }, {
        children: [
            label && jsx(Box, Object.assign({
                backgroundColor: "colorFiftyShadesLightest",
                borderRadius: "borderRadiusCircle",
                color: "colorFiftyShadesDarker",
                flexShrink: 0,
                fontFamily: "fontFamilySystem",
                fontSize: "fontSizeSmall",
                lineHeight: "sizeAvatarSmall",
                textAlign: "center",
                size: "sizeAvatarSmall"
            }, {
                children: label
            }), void 0),
            jsx(Option, Object.assign({
                as: "button",
                type: "button",
                disabled: isDisabled,
                onClick: onClick,
                testHook: testHook,
                isHighlighted: isSelected,
                variant: variant,
                withHover: !isDisabled
            }, {
                children: jsx(Box, Object.assign({
                    flexGrow: 1
                }, {
                    children: jsx(Markdown, Object.assign({
                        isLimited: true
                    }, {
                        children: title
                    }), void 0)
                }), void 0)
            }), void 0)
        ]
    }), void 0);
}
function MultipleChoiceQuestion(props) {
    const { answers , isDisabled , onClick , testHook , variant , ...questionProps } = props;
    return jsx(QuizQuestion, Object.assign({}, questionProps, {
        variant: variant,
        testHook: testHook
    }, {
        children: jsx(Box, Object.assign({
            as: "ul",
            display: "flex",
            flexDirection: "column",
            gap: "spacingSmall1X",
            role: "group",
            "aria-labelledby": questionProps.labelId
        }, {
            children: answers.map((answer)=>jsx(MultipleChoiceQuestionOption, Object.assign({}, answer, {
                    variant: variant,
                    isDisabled: isDisabled,
                    onClick: ()=>onClick(answer.id)
                    ,
                    testHook: testHook && `${testHook}-answer-${answer.id}`
                }), answer.id)
            )
        }), void 0)
    }), void 0);
}

export { MultipleChoiceQuestion as default };
