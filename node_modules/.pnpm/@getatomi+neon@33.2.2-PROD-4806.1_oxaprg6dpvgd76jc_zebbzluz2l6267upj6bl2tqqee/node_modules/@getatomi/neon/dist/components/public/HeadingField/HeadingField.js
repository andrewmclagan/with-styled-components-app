import { jsxs, jsx } from 'react/jsx-runtime';
import { forwardRef } from 'react';
import useFormField from '../../private/FormField/FormField.js';
import Box from '../Box/Box.js';
import HideVisually from '../HideVisually/HideVisually.js';
import Icon from '../Icon/Icon.js';

const variantIcons = {
    error: 'alert-error',
    warning: 'alert-warning'
};
const HeadingField = /*#__PURE__*/ forwardRef(function HeadingField(props, ref) {
    const { isRequired , label , value , testHook , validationText , errorVariant , ...otherProps } = props;
    const { classnames , fieldClassnames , fieldAttributes , fieldLabel , fieldHelpText  } = useFormField({
        isRequired,
        label,
        validationText,
        errorVariant,
        testHook
    });
    const attributes = {
        ...fieldAttributes,
        ...otherProps
    };
    const errorVariantColor = errorVariant === 'error' ? 'colorStatusErrorRoot' : 'colorStatusWarningDark';
    return jsxs(Box, Object.assign({
        testHook: testHook,
        className: classnames
    }, {
        children: [
            jsx(HideVisually, {
                children: fieldLabel
            }, void 0),
            jsxs(Box, Object.assign({
                display: "flex",
                borderBottomStyle: "solid",
                borderBottomWidth: "borderWidthRoot",
                borderBottomColor: errorVariant ? errorVariantColor : 'colorCoreWhite',
                gap: "spacingSmall1X",
                alignItems: "center"
            }, {
                children: [
                    jsx(Box, Object.assign({}, attributes, {
                        as: "input",
                        className: fieldClassnames,
                        fontFamily: "fontFamilyRoot",
                        fontSize: "fontSizeLarge5X",
                        fontWeight: "fontWeightLight",
                        padding: "spacingNone",
                        placeholder: label,
                        ref: ref,
                        type: "text",
                        defaultValue: value,
                        testHook: testHook && `${testHook}-input`
                    }), void 0),
                    errorVariant && jsx(Icon, {
                        name: variantIcons[errorVariant],
                        size: "sizeIconSmall",
                        color: errorVariant ? errorVariantColor : undefined
                    }, void 0)
                ]
            }), void 0),
            fieldHelpText
        ]
    }), void 0);
});

export { HeadingField as default };
