import { jsxs, jsx } from 'react/jsx-runtime';
import { forwardRef } from 'react';
import keyMirror from 'keymirror';
import cx from 'classnames';
import invariant from 'invariant';
import useFormField from '../../private/FormField/FormField.js';
import Box from '../Box/Box.js';
import Icon from '../Icon/Icon.js';
import { inputElements } from '../../../constants/allowedHtmlElements.js';
import styles from './TextField.css.js';

keyMirror({
    email: null,
    number: null,
    password: null,
    search: null,
    tel: null,
    text: null,
    url: null
});
const variantIcons = {
    error: 'alert-error',
    warning: 'alert-warning'
};
const variantIconColors = {
    error: 'colorStatusErrorDark',
    warning: 'colorStatusWarningDark'
};
const TextField = /*#__PURE__*/ forwardRef(function TextField(props, ref) {
    const { as =inputElements.input , containerRef , helpText , insertAfter , isDisabled , isRequired , label , value , rows =4 , secondaryLabel , withVariantIcon =true , testHook , type ='text' , validationText , errorVariant , ...otherProps } = props;
    const isInput = as === inputElements.input;
    const isTextarea = as === inputElements.textarea;
    const withInsertAfter = isInput && (insertAfter || errorVariant && withVariantIcon);
    invariant(!(isTextarea && insertAfter), `You can not use the insertAfter prop on a TextField of type 'textarea'.`);
    const { classnames , containerClassnames , fieldClassnames , fieldAttributes , fieldLabel , fieldHelpText ,  } = useFormField({
        isDisabled,
        isRequired,
        label,
        helpText,
        validationText,
        errorVariant,
        secondaryLabel,
        testHook
    });
    const attributes = {
        ...fieldAttributes,
        ...otherProps
    };
    return jsxs(Box, Object.assign({
        testHook: testHook,
        className: classnames
    }, {
        children: [
            fieldLabel,
            jsxs(Box, Object.assign({
                className: containerClassnames,
                ref: containerRef
            }, {
                children: [
                    jsx(Box, Object.assign({}, attributes, {
                        as: as,
                        className: cx(fieldClassnames, {
                            [styles.withInsertAfter]: withInsertAfter,
                            [styles.input]: isInput,
                            [styles.textarea]: isTextarea
                        }),
                        ref: ref,
                        type: isInput ? type : undefined,
                        value: value,
                        testHook: testHook && `${testHook}-input`,
                        rows: isTextarea ? rows : undefined
                    }), void 0),
                    withInsertAfter && jsx("div", Object.assign({
                        className: styles.insertAfterContainer
                    }, {
                        children: insertAfter || errorVariant && jsx(Icon, {
                            color: variantIconColors[errorVariant],
                            name: variantIcons[errorVariant],
                            size: "sizeIconSmall"
                        }, void 0)
                    }), void 0)
                ]
            }), void 0),
            fieldHelpText
        ]
    }), void 0);
});

export { TextField as default };
