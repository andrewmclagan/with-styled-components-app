import 'core-js/modules/web.dom-collections.iterator.js';
import { jsx } from 'react/jsx-runtime';
import flattenChildren from 'react-flatten-children';
import _ from 'lodash';
import cx from 'classnames';
import keyMirror from 'keymirror';
import sizes from '../../../constants/sizes.js';
import Box from '../Box/Box.js';
import { getSpacing } from '../../../utils/tokens.js';
import styles from './Grid.css.js';

const alignYRules = {
    content: 'baseline',
    bottom: 'end',
    center: 'center'
};
const collapseBelowRules = keyMirror({
    desktop: null,
    tablet: null
});
function Column(props) {
    const { children , width  } = props;
    let classNames;
    if (Array.isArray(width) && width.includes('none')) {
        const [mobile, tablet, desktop] = width;
        classNames = cx({
            [styles.hideOnMobile]: mobile === 'none',
            [styles.hideOnTablet]: tablet === 'none',
            [styles.hideOnDesktop]: desktop === 'none'
        });
    }
    return jsx(Box, Object.assign({
        className: cx(styles.column, classNames)
    }, {
        children: children
    }), void 0);
}
/**
 * Creates `grid-template-columns` values for all the columns for different breakpoints
 * e.g. a first column with ['none', '1', '1'] and second column width ['1', '1, '2']
 * would return [['1fr'], ['1fr 1fr'], ['1fr 2fr']] ('none' values are excluded as hidden)
 */ const getGridTemplateColumns = (children)=>{
    const allColumnsWidths = flattenChildren(children).map((column)=>{
        const { width  } = column.props;
        return Array.isArray(width) ? width : [
            width
        ];
    });
    return _.zipWith(...allColumnsWidths, function() {
        for(var _len = arguments.length, widths = new Array(_len), _key = 0; _key < _len; _key++){
            widths[_key] = arguments[_key];
        }
        return widths.map((width)=>{
            if (width === 'none') {
                return;
            }
            if (width === 'content') {
                return 'auto';
            }
            const fractionalWidth = parseInt(width, 10);
            return fractionalWidth ? `${fractionalWidth}fr` : '1fr';
        }).join(' ');
    });
};
function Grid(props) {
    const { alignY , collapseBelow , height , spacing =sizes.root , children  } = props;
    const [defaultTemplate, tabletTemplate, desktopTemplate] = getGridTemplateColumns(children);
    return jsx(Box, Object.assign({
        className: cx(styles.root, {
            [styles.tablet]: !!tabletTemplate,
            [styles.desktop]: !!desktopTemplate,
            [styles.collapseBelowDesktop]: collapseBelow === collapseBelowRules.desktop,
            [styles.collapseBelowTablet]: collapseBelow === collapseBelowRules.tablet
        }),
        height: height,
        vars: {
            ...alignY && {
                [styles['--alignY']]: alignYRules[alignY]
            },
            [styles['--spacing']]: getSpacing(spacing),
            [styles['--template']]: defaultTemplate,
            ...tabletTemplate && {
                [styles['--templateTablet']]: tabletTemplate
            },
            ...desktopTemplate && {
                [styles['--templateDesktop']]: desktopTemplate
            }
        }
    }, {
        children: children
    }), void 0);
}

export { Column, alignYRules, collapseBelowRules, Grid as default };
