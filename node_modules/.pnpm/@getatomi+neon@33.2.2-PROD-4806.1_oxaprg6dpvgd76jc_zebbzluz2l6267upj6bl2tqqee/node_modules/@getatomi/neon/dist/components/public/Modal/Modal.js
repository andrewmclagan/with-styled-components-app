import 'core-js/modules/web.dom-collections.iterator.js';
import { jsx, jsxs } from 'react/jsx-runtime';
import { DialogContent } from '@reach/dialog';
import Box from '../Box/Box.js';
import ModalActions from './ModalActions.js';
import ModalBody from './ModalBody.js';
import ModalFooter from './ModalFooter.js';
import ModalHeader from './ModalHeader.js';
import ModalOverlay from './ModalOverlay.js';
import useModalHeading from './useModalHeading.js';

const sizes = {
    small: 'small',
    medium: 'medium',
    fullscreen: 'fullscreen'
};
const defaultSize = sizes.medium;
const sharedStyles = {
    padding: 'spacingNone',
    position: 'relative',
    width: 'sizeFull'
};
const smallStyles = {
    ...sharedStyles,
    borderRadius: 'borderRadiusRoot',
    marginInline: {
        base: 'spacingLarge',
        tablet: 'auto'
    },
    maxWidth: 'sizeModalSmall'
};
const mediumStyles = {
    ...sharedStyles,
    borderRadius: {
        base: undefined,
        tablet: 'borderRadiusRoot'
    },
    display: 'flex',
    flexDirection: 'column',
    height: {
        base: 'sizeFull',
        tablet: 'auto'
    },
    marginBlock: {
        base: 'spacingNone',
        tablet: 'spacingLarge'
    },
    maxHeight: {
        base: undefined,
        tablet: `sizeFull`
    },
    maxWidth: {
        base: 'sizeFull',
        tablet: 'sizeModalRoot'
    },
    minHeight: {
        base: undefined,
        tablet: 'sizeSmall3X'
    }
};
const scrollPageStyles = {
    height: undefined,
    maxHeight: undefined,
    minHeight: {
        base: 'sizeFull',
        tablet: 'sizeSmall3X'
    },
    marginTop: {
        base: 'spacingNone',
        tablet: 'spacingLarge9X'
    }
};
const fullscreenStyles = {
    ...sharedStyles,
    display: 'flex',
    flexDirection: 'column',
    height: 'sizeFull',
    margin: 'spacingNone',
    maxWidth: 'sizeFull'
};
const sizeStylesMapping = {
    small: smallStyles,
    medium: mediumStyles,
    fullscreen: fullscreenStyles
};
function ModalContent(props) {
    const { size =defaultSize , scroll: scroll1 , ...otherProps } = props;
    const scrollPage = scroll1 === 'page';
    return jsx(Box, Object.assign({}, otherProps, sizeStylesMapping[size], scrollPage && scrollPageStyles, {
        as: DialogContent
    }), void 0);
}
function Modal(props) {
    const { actions , ariaLabelledBy , children , heading , initialFocusRef , isOpen , onClose , scroll: scroll2 = 'body' , size =defaultSize , variant ,  } = props;
    const [headingId, modalHeading] = useModalHeading({
        heading,
        size
    });
    const isFullscreen = size === 'fullscreen';
    const isSmall = size === 'small';
    const withHeader = !isSmall && (heading || actions || variant === 'view');
    const withFooter = !isFullscreen && actions;
    return jsx(ModalOverlay, Object.assign({
        size: size,
        isOpen: isOpen,
        onDismiss: onClose,
        initialFocusRef: initialFocusRef,
        scroll: scroll2
    }, {
        children: jsxs(ModalContent, Object.assign({
            "aria-labelledby": ariaLabelledBy || (!isSmall ? headingId : undefined),
            "aria-label": isSmall ? heading : undefined,
            size: size,
            scroll: scroll2
        }, {
            children: [
                withHeader && jsxs(ModalHeader, Object.assign({
                    size: size,
                    variant: variant,
                    onClose: onClose
                }, {
                    children: [
                        heading && modalHeading,
                        isFullscreen && actions && jsx(ModalActions, Object.assign({
                            size: size
                        }, {
                            children: actions
                        }), void 0)
                    ]
                }), void 0),
                jsx(ModalBody, Object.assign({
                    size: size,
                    scroll: scroll2
                }, {
                    children: children
                }), void 0),
                withFooter && jsx(ModalFooter, Object.assign({
                    size: size
                }, {
                    children: jsx(ModalActions, Object.assign({
                        size: size
                    }, {
                        children: actions
                    }), void 0)
                }), void 0)
            ]
        }), void 0)
    }), void 0);
}

export { Modal as default, defaultSize, sizes };
