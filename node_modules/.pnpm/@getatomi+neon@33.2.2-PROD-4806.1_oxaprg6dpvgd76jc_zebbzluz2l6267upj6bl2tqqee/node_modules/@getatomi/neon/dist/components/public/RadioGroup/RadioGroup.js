import { jsxs, jsx } from 'react/jsx-runtime';
import { forwardRef } from 'react';
import { useRadioGroup } from '@react-aria/radio';
import { useRadioGroupState } from '@react-stately/radio';
import Box from '../Box/Box.js';
import Flex from '../Flex/Flex.js';
import HelpText from '../HelpText/HelpText.js';
import Label from '../Label/Label.js';
import Text from '../Text/Text.js';
import { RadioGroupContext } from './RadioGroupContext.js';
export { Radio } from './Radio.js';

/**
 * Map this component props to the ones expected by the react-aria hooks.
 */ function mapToReactAriaProps(props) {
    const { ariaLabel , ariaLabelledBy , errorVariant , helpText , validationText , ...otherProps } = props;
    return {
        ...otherProps,
        errorMessage: validationText,
        description: helpText,
        'aria-label': ariaLabel,
        'aria-labelledby': ariaLabelledBy,
        validationState: errorVariant ? 'invalid' : 'valid'
    };
}
const RadioGroup = /*#__PURE__*/ forwardRef(function RadioGroup(props, ref) {
    const { children , errorVariant , helpText , label , orientation ='vertical' , secondaryLabel , validationText ,  } = props;
    const reactAriaProps = mapToReactAriaProps(props);
    const state = useRadioGroupState(reactAriaProps);
    const { radioGroupProps , labelProps , errorMessageProps , descriptionProps  } = useRadioGroup(reactAriaProps, state);
    return jsxs(Box, Object.assign({}, radioGroupProps, {
        ref: ref
    }, {
        children: [
            jsxs(Label, Object.assign({
                as: "div"
            }, labelProps, {
                children: [
                    label,
                    secondaryLabel && jsx(Text, Object.assign({
                        variant: "bodySmall3X",
                        color: "colorFiftyShadesDarker",
                        marginLeft: "auto"
                    }, {
                        children: secondaryLabel
                    }), void 0)
                ]
            }), void 0),
            jsx(RadioGroupContext.Provider, Object.assign({
                value: {
                    state
                }
            }, {
                children: jsx(Flex, Object.assign({
                    direction: orientation === 'vertical' ? 'column' : 'row',
                    rowGap: "spacingSmall",
                    columnGap: "spacingLarge5X",
                    wrap: true
                }, {
                    children: children
                }), void 0)
            }), void 0),
            helpText && jsx(HelpText, Object.assign({
                id: descriptionProps.id
            }, {
                children: helpText
            }), void 0),
            validationText && errorVariant && jsx(HelpText, Object.assign({
                id: errorMessageProps.id,
                variant: errorVariant
            }, {
                children: validationText
            }), void 0)
        ]
    }), void 0);
});

export { RadioGroup as default };
