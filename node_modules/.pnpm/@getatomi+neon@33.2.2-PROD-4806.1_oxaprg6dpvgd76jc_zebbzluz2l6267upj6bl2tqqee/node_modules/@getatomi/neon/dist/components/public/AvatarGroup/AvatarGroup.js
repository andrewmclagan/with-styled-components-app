import { jsxs, jsx } from 'react/jsx-runtime';
import { Children } from 'react';
import { avatarDefaultSize } from '../Avatar/Avatar.js';
import Box from '../Box/Box.js';
import Stack from '../Stack/Stack.js';
import Tooltip from '../Tooltip/Tooltip.js';

// max number of names shown in the +n tooltip
const countMaxDisplayedNames = 10;
function AvatarGroupItem(props) {
    const { children  } = props;
    return jsx(Box, Object.assign({
        as: "li",
        display: "inline-block",
        marginLeft: "spacingNegativeSmall2X",
        verticalAlign: "top",
        _first: {
            marginLeft: 'spacingNone'
        }
    }, {
        children: children
    }), void 0);
}
function AvatarGroup(props) {
    var ref;
    const { max =5 , renderName  } = props;
    const children = Children.toArray(props.children);
    const hiddenAvatars = children.slice(max);
    const countHiddenAvatars = hiddenAvatars.length;
    const countHiddenNamesInTooltip = countHiddenAvatars - countMaxDisplayedNames;
    // extract the size from the first avatar to use for the n+ item
    const avatarSize = ((ref = children[0]) === null || ref === void 0 ? void 0 : ref.props.size) || avatarDefaultSize;
    return jsxs(Box, Object.assign({
        as: "ul"
    }, {
        children: [
            Children.map(children.slice(0, max), (child, i)=>jsx(AvatarGroupItem, {
                    children: child
                }, i)
            ),
            countHiddenAvatars > 0 && jsx(AvatarGroupItem, {
                children: jsx(Tooltip, Object.assign({
                    content: jsxs(Stack, Object.assign({
                        as: "ul",
                        spacing: "spacingSmall4X"
                    }, {
                        children: [
                            Children.map(hiddenAvatars, (hiddenAvatar)=>renderName ? renderName(hiddenAvatar.props) : hiddenAvatar.props.name
                            ),
                            countHiddenNamesInTooltip > 0 && `and ${countHiddenNamesInTooltip} moreâ€¦`
                        ]
                    }), void 0),
                    isTextOnly: true,
                    appendTo: "parent"
                }, {
                    children: jsxs(Box, Object.assign({
                        as: "span",
                        backgroundColor: "colorFiftyShadesLighter",
                        borderRadius: "borderRadiusCircle",
                        display: "block",
                        size: avatarSize,
                        color: "colorFiftyShadesDarker",
                        fontFamily: "fontFamilySystem",
                        fontSize: "fontSizeSmall2X",
                        fontWeight: "fontWeightMedium",
                        lineHeight: avatarSize,
                        textAlign: "center",
                        tabIndex: 0,
                        verticalAlign: "middle"
                    }, {
                        children: [
                            "+",
                            countHiddenAvatars
                        ]
                    }), void 0)
                }), void 0)
            }, void 0)
        ]
    }), void 0);
}

export { AvatarGroup as default };
