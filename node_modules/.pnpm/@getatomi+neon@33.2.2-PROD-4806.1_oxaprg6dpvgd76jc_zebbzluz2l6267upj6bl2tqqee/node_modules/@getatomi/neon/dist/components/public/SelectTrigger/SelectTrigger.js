import { jsxs, jsx } from 'react/jsx-runtime';
import cx from 'classnames';
import keyMirror from 'keymirror';
import Box from '../Box/Box.js';
import Icon from '../Icon/Icon.js';
import Skeleton from '../Skeleton/Skeleton.js';
import Truncate from '../Truncate/Truncate.js';
import styles from './SelectTrigger.css.js';

const variants = keyMirror({
    borderless: null,
    filter: null
});
function SelectTrigger(props) {
    const { children , iconName , isDisabled , testHook , variant  } = props;
    if (!children) return null;
    return jsxs(Box, Object.assign({
        className: cx(styles.root, {
            [styles.isDisabled]: isDisabled,
            [String(variant && styles[variant])]: variant
        }),
        testHook: testHook
    }, {
        children: [
            iconName && jsx(Icon, {
                size: "sizeIconSmall1X",
                name: iconName,
                className: styles.icon
            }, void 0),
            variant === variants.filter ? children : jsx(Truncate, Object.assign({
                flexGrow: 1,
                textAlign: "left",
                testHook: testHook && `${testHook}-label`
            }, {
                children: children
            }), void 0)
        ]
    }), void 0);
}
function SelectTriggerLoader(props) {
    const { variant  } = props;
    const isFilter = variant === variants.filter;
    return jsx(Skeleton, {
        borderRadius: isFilter ? 'borderRadiusLarge1X' : 'borderRadiusSmall',
        height: isFilter ? 34 : 45,
        width: 115
    }, void 0);
}
SelectTrigger.Loader = SelectTriggerLoader;

export { SelectTriggerLoader, SelectTrigger as default, variants };
