import 'core-js/modules/es.string.replace.js';
import 'core-js/modules/web.dom-collections.iterator.js';
import { jsx } from 'react/jsx-runtime';
import { useState, useRef, useCallback, useEffect } from 'react';
import useScript from 'react-script-hook';
import cx from 'classnames';
import _ from 'lodash';
import Box from '../Box/Box.js';
import { colors } from '../../../constants/tokens/colors.js';
import styles from './VideoPlayer.css.js';

const playerColor = colors.colorCoreBrand;
const mapPropToWistiaEventName = (callbackName)=>callbackName.replace('on', '').toLowerCase()
;
function VideoPlayer(props) {
    const { testHook , videoId , ...eventProps } = props;
    const [isSwatchLoaded, setIsSwatchLoaded] = useState(false);
    const player = useRef(null);
    const bindEvents = useCallback(()=>{
        _.forEach(eventProps, (eventProp, name)=>{
            var ref;
            const playerEvent = mapPropToWistiaEventName(name);
            (ref = player.current) === null || ref === void 0 ? void 0 : ref.bind(playerEvent, function() {
                for(var _len = arguments.length, data = new Array(_len), _key = 0; _key < _len; _key++){
                    data[_key] = arguments[_key];
                }
                // @ts-ignore TODO-TS[ENHANCEMENT] need to revisit this. `...data as Rest<eventProp>`
                // or event `...data as any` should work. may require a slight tweak in
                // behaviour, but should wait until runnable again
                // eslint-disable-next-line no-unused-expressions
                player.current && eventProp(player.current, ...data);
            });
        });
    }, [
        eventProps
    ]);
    const onReady = useCallback((wistiaPlayer)=>{
        if (!player.current) {
            player.current = wistiaPlayer;
            bindEvents();
        }
    }, [
        bindEvents
    ]);
    const onLoad = useCallback(()=>{
        window._wq = window._wq || [];
        window._wq.push({
            id: videoId,
            onReady
        });
    }, [
        onReady,
        videoId
    ]);
    useScript({
        src: '//fast.wistia.com/assets/external/E-v1.js',
        checkForExisting: true
    });
    useScript({
        src: `https://fast.wistia.com/embed/medias/${videoId}.jsonp`,
        onload: onLoad
    });
    // prevent the hook from running on mount
    const didMountRef = useRef(false);
    useEffect(()=>{
        if (didMountRef.current) {
            var ref;
            (ref = player.current) === null || ref === void 0 ? void 0 : ref.replaceWith(videoId, {
                transition: 'crossfade',
                playerColor
            });
            // player.replaceWith discards any bound event and doesn't provide any callback (e.g. onReady)
            setTimeout(()=>bindEvents()
            , 1000);
        } else {
            didMountRef.current = true;
        } // only runs when the videoId changes
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        videoId
    ]);
    useEffect(()=>{
        return ()=>{
            var ref1;
            _.forEach(eventProps, (eventProp, name)=>{
                var ref;
                const playerEvent = mapPropToWistiaEventName(name);
                (ref = player.current) === null || ref === void 0 ? void 0 : ref.unbind(playerEvent);
            });
            (ref1 = player.current) === null || ref1 === void 0 ? void 0 : ref1.remove();
        }; // only runs on unmount to clean up the player
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    return jsx(Box, Object.assign({
        className: styles.root,
        testHook: testHook
    }, {
        children: jsx("div", Object.assign({
            className: styles.wrapper
        }, {
            children: jsx("div", Object.assign({
                className: styles.wrapperInner
            }, {
                children: jsx("div", Object.assign({
                    className: cx(styles.player, 'wistia_embed', `wistia_async_${videoId}`, 'seo=false', 'videoFoam=true', `playerColor=${playerColor.replace('#', '')}`, 'wmode=transparent')
                }, {
                    children: jsx("div", Object.assign({
                        className: cx('wistia_swatch', cx(styles.swatch, isSwatchLoaded && styles.isSwatchLoaded))
                    }, {
                        children: jsx("img", {
                            className: styles.swatchImage,
                            src: `https://fast.wistia.com/embed/medias/${videoId}/swatch`,
                            alt: "",
                            "aria-hidden": "true",
                            onLoad: ()=>setIsSwatchLoaded(true)
                            ,
                            "data-test": testHook && `${testHook}-swatch`
                        }, void 0)
                    }), void 0)
                }), void 0)
            }), void 0)
        }), void 0)
    }), void 0);
}

export { VideoPlayer as default };
