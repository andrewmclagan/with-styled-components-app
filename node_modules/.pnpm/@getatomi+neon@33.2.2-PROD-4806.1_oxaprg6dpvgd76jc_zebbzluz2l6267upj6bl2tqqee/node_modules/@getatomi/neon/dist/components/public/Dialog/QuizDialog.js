import 'core-js/modules/web.dom-collections.iterator.js';
import { jsxs, jsx } from 'react/jsx-runtime';
import cx from 'classnames';
import json2mq from 'json2mq';
import Box from '../Box/Box.js';
import Button from '../Button/Button.js';
import Container from '../Container/Container.js';
import Icon from '../Icon/Icon.js';
import Media from '../Media/Media.js';
import ProgressBar from '../ProgressBar/ProgressBar.js';
import { breakpoints } from '../../../constants/tokens/breakpoints.js';
import DialogBase from './DialogBase.js';
import styles from './QuizDialog.css.js';

const queryFromMedium = json2mq({
    minWidth: breakpoints.breakpointMediumFrom
});
function Content(props) {
    const { containerProps ={} , children  } = props;
    return jsx("div", Object.assign({
        className: styles.contentWrapper
    }, {
        children: jsx(Container, Object.assign({}, containerProps, {
            children: jsx("div", Object.assign({
                className: styles.content
            }, {
                children: children
            }), void 0)
        }), void 0)
    }), void 0);
}
function QuizDialog(props) {
    const { appElement , ariaLabel , children , containerProps , isOpen , isScrollable =true , onClose , closeAssistiveText , progressProps , shouldCloseOnEsc =true , skipProps , footer: [footerInfo, footerActions] = [] ,  } = props;
    const withFooter = !!(footerInfo || footerActions);
    return jsxs(DialogBase, Object.assign({
        appElement: appElement,
        ariaLabel: ariaLabel,
        className: cx(styles.root, {
            [styles.withFooter]: withFooter,
            [styles.isScrollable]: isScrollable
        }),
        isOpen: isOpen,
        onClose: onClose,
        overlayClassName: styles.overlay,
        shouldCloseOnOverlayClick: false,
        shouldReturnFocusAfterClose: true,
        shouldCloseOnEsc: shouldCloseOnEsc
    }, {
        children: [
            jsx("header", {
                children: jsx(Container, {
                    children: jsxs("nav", Object.assign({
                        className: styles.header
                    }, {
                        children: [
                            jsx(Box, Object.assign({
                                as: "button",
                                type: "button",
                                onClick: onClose,
                                color: "colorFiftyShadesDark",
                                _hoverAndFocus: {
                                    color: 'colorCoreText'
                                },
                                transition: "transitionRoot",
                                testHook: "quiz-dialog-close-button"
                            }, {
                                children: jsx(Icon, {
                                    name: "close",
                                    isDecorative: false,
                                    title: closeAssistiveText,
                                    strokeWidth: "2px",
                                    size: {
                                        base: 'sizeIconSmall2X',
                                        tablet: 'sizeIconRoot'
                                    }
                                }, void 0)
                            }), void 0),
                            jsx("div", Object.assign({
                                className: styles.progressBar
                            }, {
                                children: jsx(Media, {
                                    element: jsx(ProgressBar, Object.assign({}, progressProps), void 0),
                                    queries: {
                                        [queryFromMedium]: {
                                            variant: 'large'
                                        }
                                    }
                                }, void 0)
                            }), void 0),
                            jsx(Media, {
                                element: jsx(Button, Object.assign({
                                    variant: "link"
                                }, skipProps), void 0),
                                queries: {
                                    [queryFromMedium]: {
                                        size: 'small',
                                        variant: 'info'
                                    }
                                }
                            }, void 0)
                        ]
                    }), void 0)
                }, void 0)
            }, void 0),
            jsx(Content, Object.assign({
                containerProps: containerProps,
                testHook: "content"
            }, {
                children: children
            }), void 0),
            withFooter && jsx("footer", Object.assign({
                className: styles.footer
            }, {
                children: jsx(Container, {
                    children: jsxs("div", Object.assign({
                        className: cx(styles.footerContent, {
                            [styles.withFooterInfo]: !!footerInfo
                        })
                    }, {
                        children: [
                            footerInfo && jsx("div", Object.assign({
                                className: styles.footerInfo
                            }, {
                                children: footerInfo
                            }), void 0),
                            jsx("div", Object.assign({
                                className: styles.footerActions
                            }, {
                                children: footerActions
                            }), void 0)
                        ]
                    }), void 0)
                }, void 0)
            }), void 0)
        ]
    }), void 0);
}
function Validation(props) {
    const { children , explanationId , headingId , isOpen  } = props;
    return(// @ts-ignore we don't need to set the appElement prop on DialogBase because it's been set by QuizDialog
    jsx(DialogBase, Object.assign({
        aria: {
            describedby: explanationId,
            labelledby: headingId
        },
        className: styles.root,
        isOpen: isOpen,
        overlayClassName: styles.overlay,
        portalClassName: styles.validationPrompt,
        role: "alertdialog",
        shouldCloseOnEsc: false,
        shouldCloseOnOverlayClick: false,
        shouldReturnFocusAfterClose: false
    }, {
        children: jsx(Content, Object.assign({
            containerProps: {
                maxWidth: 'sizeSmall'
            },
            testHook: "content"
        }, {
            children: children
        }), void 0)
    }), void 0));
}
QuizDialog.Validation = Validation;

export { Validation, QuizDialog as default };
