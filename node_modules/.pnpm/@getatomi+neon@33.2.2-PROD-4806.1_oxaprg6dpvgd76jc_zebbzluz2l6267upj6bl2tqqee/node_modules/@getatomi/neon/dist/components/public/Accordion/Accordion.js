import 'core-js/modules/web.dom-collections.iterator.js';
import { jsx, jsxs } from 'react/jsx-runtime';
import { useState, cloneElement } from 'react';
import flattenChildren from 'react-flatten-children';
import cx from 'classnames';
import { Accordion as Accordion$1, AccordionItem, AccordionPanel, AccordionButton } from '@reach/accordion';
import HideVisually from '../HideVisually/HideVisually.js';
import Icon from '../Icon/Icon.js';
import styles from './Accordion.css.js';

function Button(props) {
    const { assistiveText , isPlaceholder , testHook  } = props;
    const Component = isPlaceholder ? 'div' : AccordionButton;
    return jsx(Component, Object.assign({
        className: cx(styles.button, isPlaceholder && styles.isPlaceholder),
        "aria-hidden": isPlaceholder,
        "data-test": testHook
    }, {
        children: jsxs("div", Object.assign({
            className: styles.buttonContent
        }, {
            children: [
                assistiveText && jsx(HideVisually, {
                    children: assistiveText
                }, void 0),
                jsx(Icon, {
                    className: styles.icon,
                    name: "chevron",
                    size: "sizeIconSmall2X",
                    strokeWidth: "2"
                }, void 0)
            ]
        }), void 0)
    }), void 0);
}
function Content(props) {
    const { info , toggleButton , children , testHook  } = props;
    return jsxs("div", Object.assign({
        className: styles.content
    }, {
        children: [
            jsx("div", Object.assign({
                className: styles.title
            }, {
                children: children
            }), void 0),
            info && jsx("div", Object.assign({
                className: styles.info
            }, {
                children: info
            }), void 0),
            toggleButton || jsx(Button, {
                isPlaceholder: true,
                testHook: testHook && `${testHook}-placeholder-button`
            }, void 0)
        ]
    }), void 0);
}
function Item(props) {
    const { assistiveText , content , headingLevel , isOpen , children , testHook  } = props;
    const Heading = `h${headingLevel}`;
    return jsxs(AccordionItem, Object.assign({
        className: cx(styles.item, isOpen && styles.isOpen)
    }, {
        children: [
            /*#__PURE__*/ cloneElement(content, {
                toggleButton: // @ts-ignore Box being reworked - see box notes
                jsx(Heading, Object.assign({
                    className: styles.heading
                }, {
                    children: jsx(Button, {
                        assistiveText: assistiveText,
                        testHook: testHook && `${testHook}-button`
                    }, void 0)
                }), void 0)
            }),
            jsx(AccordionPanel, Object.assign({
                className: styles.panel,
                "data-test": testHook && `${testHook}-panel`
            }, {
                children: children
            }), void 0)
        ]
    }), void 0);
}
function Accordion(props) {
    const { children , testHook  } = props;
    const [openIndexes, setOpenIndexes] = useState([]);
    const childrenArray = flattenChildren(children);
    const onChange = (newIndex)=>setOpenIndexes((oldIndexes)=>oldIndexes.includes(newIndex) ? oldIndexes.filter((i)=>i !== newIndex
            ) : oldIndexes.concat(newIndex)
        )
    ;
    return jsx(Accordion$1, Object.assign({
        collapsible: true,
        multiple: true,
        onChange: onChange,
        "data-test": testHook
    }, {
        children: childrenArray.map((child, index)=>/*#__PURE__*/ cloneElement(child, {
                isOpen: openIndexes.includes(index)
            })
        )
    }), void 0);
}
Accordion.Item = Item;
Accordion.Content = Content;

export { Item, Accordion as default };
