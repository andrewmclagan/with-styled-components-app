import 'core-js/modules/web.dom-collections.iterator.js';
import { jsxs, jsx } from 'react/jsx-runtime';
import { cloneElement, Fragment } from 'react';
import keyMirror from 'keymirror';
import cx from 'classnames';
import _ from 'lodash';
import Box from '../Box/Box.js';
import Tooltip from '../Tooltip/Tooltip.js';
import { toPercent } from '../../../utils/number.js';
import styles from './ProgressBar.css.js';

const variants = keyMirror({
    chunky: null,
    large: null
});
function ProgressBar(props) {
    const { role ='progressbar' , max =100 , values =[
        {
            ariaLabel: props.ariaLabel,
            color: props.color,
            value: props.value,
            tooltip: undefined,
            onClick: undefined
        }, 
    ] , withLabel =false , renderLabel =_.identity , variant , testHook ,  } = props;
    const normalize = (value)=>max && (value || 0) / max
    ;
    const normalizedValues = values.map((bar, i)=>({
            ...bar,
            color: bar.color || (i === 0 ? 'colorCoreBrand' : undefined),
            value: normalize(bar.value)
        })
    ) // filter out 0 values but don't skip the first bar as it's used for overall completion
    .filter((param, i)=>{
        let { value  } = param;
        return i > 0 ? value : true;
    });
    const firstValue = normalizedValues[0].value;
    return jsxs(Box, Object.assign({
        className: cx(styles.root, {
            [String(variant && styles[variant])]: variant,
            [styles.chunky]: variant === variants.chunky || values.length > 1
        }),
        testHook: testHook
    }, {
        children: [
            jsx("div", Object.assign({
                className: styles.progress
            }, {
                children: normalizedValues.map((param, i, list)=>{
                    let { ariaLabel , color , tooltip , value , onClick  } = param;
                    var ref, ref1, ref2, ref3;
                    const hasPrevious = !!(((ref = list[i - 1]) === null || ref === void 0 ? void 0 : ref.color) && ((ref1 = list[i - 1]) === null || ref1 === void 0 ? void 0 : ref1.value));
                    const hasNext = !!(((ref2 = list[i + 1]) === null || ref2 === void 0 ? void 0 : ref2.color) && ((ref3 = list[i + 1]) === null || ref3 === void 0 ? void 0 : ref3.value));
                    const width = toPercent(value);
                    const sharedProps = {
                        className: cx(styles.bar, {
                            [styles.noProgress]: value === 0,
                            [styles.flatStart]: hasPrevious,
                            [styles.flatEnd]: value && hasNext
                        }),
                        backgroundColor: color,
                        order: list.length - i,
                        width,
                        testHook: testHook && `${testHook}-bar-${i}`
                    };
                    let bar = jsx(Box, {
                        role: role,
                        "aria-valuemin": 0,
                        "aria-valuemax": max,
                        "aria-valuenow": value * max,
                        "aria-label": ariaLabel
                    }, void 0);
                    bar = onClick ? jsx(Box, Object.assign({
                        as: "button",
                        type: "button",
                        onClick: onClick
                    }, sharedProps, {
                        children: bar
                    }), void 0) : /*#__PURE__*/ cloneElement(bar, sharedProps);
                    return tooltip ? jsx(Tooltip, Object.assign({
                        content: tooltip
                    }, {
                        children: bar
                    }), i) : jsx(Fragment, {
                        children: bar
                    }, i);
                })
            }), void 0),
            withLabel && jsx("span", Object.assign({
                className: cx(styles.label, {
                    [styles.noProgress]: firstValue === 0
                })
            }, {
                children: renderLabel(toPercent(firstValue))
            }), void 0)
        ]
    }), void 0);
}

export { ProgressBar as default, variants };
