import { jsx, jsxs } from 'react/jsx-runtime';
import { forwardRef } from 'react';
import cx from 'classnames';
import Box from '../../public/Box/Box.js';
import HideVisually from '../../public/HideVisually/HideVisually.js';
import Icon from '../../public/Icon/Icon.js';
import Truncate from '../../public/Truncate/Truncate.js';
import styles from './DraggableAnswer.css.js';

const variants = {
    correct: 'correct',
    draggable: 'draggable',
    dropped: 'dropped',
    incorrect: 'incorrect',
    skipped: 'skipped',
    warning: 'warning'
};
const iconNames = {
    correct: 'circle-solid-check',
    incorrect: 'circle-solid-cross',
    draggable: 'drag',
    warning: 'circle-solid-check'
};
function DraggableAnswer(props) {
    const { children , isDisabled , info , onRemove , testHook , variant ='draggable' , isDragged ,  } = props;
    const answer = jsx("span", Object.assign({
        className: styles.answer
    }, {
        children: children
    }), void 0);
    const iconName = iconNames[variant];
    return jsxs(Box, Object.assign({
        className: cx(styles.root, {
            [String(variant && styles[variant])]: variant,
            [styles.isDisabled]: isDisabled,
            [styles.isDragged]: isDragged
        }),
        testHook: testHook,
        as: "span"
    }, {
        children: [
            jsxs("span", Object.assign({
                className: styles.container
            }, {
                children: [
                    jsx(Truncate, {
                        children: answer
                    }, void 0),
                    onRemove ? jsx(Box, Object.assign({
                        as: "button",
                        type: "button",
                        onClick: onRemove,
                        testHook: testHook && `${testHook}-icon`
                    }, {
                        children: jsx(Icon, {
                            className: styles.icon,
                            name: "close",
                            size: "sizeIconSmall2X",
                            isDecorative: false,
                            title: "Remove answer"
                        }, void 0)
                    }), void 0) : iconName && jsx(Icon, {
                        className: styles.icon,
                        name: iconName,
                        size: variant === 'draggable' ? 'sizeIconSmall2X' : undefined,
                        testHook: testHook && `${testHook}-icon`
                    }, void 0)
                ]
            }), void 0),
            info && jsx("span", Object.assign({
                className: styles.info,
                "data-test": testHook && `${testHook}-info`
            }, {
                children: info
            }), void 0)
        ]
    }), void 0);
}const Droppable = /*#__PURE__*/ forwardRef(function Droppable(props, ref) {
    const { assistiveText , children , isFilled , isIncorrect , isOver , testHook  } = props;
    return jsxs("span", Object.assign({
        ref: ref,
        className: cx(styles.placeholder, {
            [styles.placeholderFilled]: isFilled,
            [styles.placeholderIncorrect]: isIncorrect,
            [styles.placeholderOver]: isOver
        }),
        "data-test": testHook
    }, {
        children: [
            assistiveText && jsx(HideVisually, {
                children: assistiveText
            }, void 0),
            !isFilled ? jsx("span", Object.assign({
                className: styles.placeHolderHiddenContent
            }, {
                children: children
            }), void 0) : children
        ]
    }), void 0);
});
DraggableAnswer.Droppable = Droppable;

export { Droppable, DraggableAnswer as default, variants };
