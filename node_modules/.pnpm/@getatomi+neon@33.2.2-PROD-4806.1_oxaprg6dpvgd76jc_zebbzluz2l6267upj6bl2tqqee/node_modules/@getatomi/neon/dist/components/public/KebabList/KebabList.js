import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import cx from 'classnames';
import { Children } from 'react';
import Container from '../Container/Container.js';
import SelectGroup from '../SelectGroup/SelectGroup.js';
import Stack from '../Stack/Stack.js';
import { TextLoader } from '../Text/Text.js';
import { colors } from '../../../constants/tokens/colors.js';
import styles from './KebabList.css.js';

function Section(props) {
    const { title , children , testHook  } = props;
    return jsxs("li", Object.assign({
        className: styles.section,
        "data-test": testHook
    }, {
        children: [
            title && jsx("div", Object.assign({
                className: styles.title
            }, {
                children: jsx("h2", Object.assign({
                    className: styles.titleInner,
                    "data-test": testHook && `${testHook}-title`
                }, {
                    children: title
                }), void 0)
            }), void 0),
            Children.map(children, (item)=>{
                // @ts-ignore TODO-TS: typeguard preferred. we cannot guarantee item is a ReactElement
                const childColor = item.props.colors.root;
                var _childColor;
                // Support both child color as key or value
                const indicatorColor = (_childColor = colors[childColor]) !== null && _childColor !== void 0 ? _childColor : childColor;
                return jsx("div", Object.assign({
                    className: styles.item,
                    style: {
                        '--indicator-color': indicatorColor
                    }
                }, {
                    children: item
                }), void 0);
            })
        ]
    }), void 0);
}
function Loader(props) {
    const { ariaLabel , count , height , testHook , withTitle  } = props;
    return jsxs("li", Object.assign({
        className: cx(styles.section, styles.loader),
        role: "status",
        "aria-label": ariaLabel,
        "data-test": testHook
    }, {
        children: [
            withTitle && jsx("div", Object.assign({
                className: styles.title
            }, {
                children: jsx(TextLoader, {
                    height: 40
                }, void 0)
            }), void 0),
            Array.from({
                length: count
            }, (_, i)=>jsx("div", Object.assign({
                    className: styles.item
                }, {
                    children: jsx(TextLoader, {
                        height: height
                    }, void 0)
                }), i)
            )
        ]
    }), void 0);
}
function Empty(props) {
    return jsx(Fragment, {
        children: props.children
    }, void 0);
}
function KebabList(props) {
    const { alert , cta , filters , children  } = props;
    return jsx(Container, Object.assign({
        maxWidth: "sizeRoot"
    }, {
        children: jsxs("div", Object.assign({
            className: styles.root
        }, {
            children: [
                (filters || cta) && jsxs("div", Object.assign({
                    className: cx(styles.actions, {
                        [styles.multipleActions]: cta && filters
                    })
                }, {
                    children: [
                        filters && jsx(SelectGroup, {
                            children: filters
                        }, void 0),
                        cta && jsx("div", Object.assign({
                            className: styles.cta
                        }, {
                            children: cta
                        }), void 0)
                    ]
                }), void 0),
                jsxs(Stack, {
                    children: [
                        alert,
                        children && children.type !== Empty ? jsx("ol", {
                            children: children
                        }, void 0) : children
                    ]
                }, void 0)
            ]
        }), void 0)
    }), void 0);
}
KebabList.Empty = Empty;
KebabList.Loader = Loader;
KebabList.Section = Section;

export { Empty, Loader, Section, KebabList as default };
