import 'core-js/modules/web.dom-collections.iterator.js';
import { jsx } from 'react/jsx-runtime';
import invariant from 'invariant';
import keyMirror from 'keymirror';
import Box from '../Box/Box.js';
import Flex from '../Flex/Flex.js';
import Tooltip from '../Tooltip/Tooltip.js';
import { sizingsAvatar } from '../../../constants/tokens/sizingsAvatar.js';

const variants = keyMirror({
    muted: null
});
const avatarDefaultSize = 'sizeAvatarRoot';
function initials(name) {
    if (!name) return null;
    const words = name.trim().split(' ');
    const firstInitial = words[0].charAt(0);
    const lastInitial = words[words.length - 1].charAt(0);
    return `${firstInitial}${lastInitial}`.toUpperCase();
}
function AvatarContents(props) {
    const { icon , isDecorative , name , size =avatarDefaultSize , src , tooltip  } = props;
    if (!icon && !src && !name) return null;
    if (icon) {
        return jsx(Flex, Object.assign({
            justifyContent: "center",
            alignItems: "center",
            size: size
        }, {
            children: icon
        }), void 0);
    }
    if (src) {
        // to avoid repetion with screen readers, the alt attribute isn't set if the
        // isDecorative or the tooltip props are set
        return jsx(Box, {
            as: "img",
            src: src,
            alt: !isDecorative && !tooltip && name || '',
            size: size
        }, void 0);
    }
    return jsx(Box, Object.assign({
        as: "abbr",
        color: "colorCoreWhite",
        display: "block",
        fontFamily: "fontFamilySystem",
        fontSize: // eslint-disable-next-line no-nested-ternary
        size === 'sizeAvatarSmall1X' ? 'fontSizeSmall3X' : size === 'sizeAvatarLarge1X' ? 'fontSizeLarge3X' : 'fontSizeSmall2X',
        fontWeight: "fontWeightLight",
        letterSpacing: "letterSpacingLarge2X",
        lineHeight: size,
        textAlign: "center",
        textIndent: "letterSpacingLarge2X",
        // overwrite normalize.css defaults
        _title: {
            textDecoration: 'none'
        },
        "aria-hidden": isDecorative ? 'true' : undefined
    }, {
        children: initials(name)
    }), void 0);
}
function Avatar(props) {
    const { backgroundColor ='colorFiftyShadesLight' , icon , isDecorative , name , size =avatarDefaultSize , src , tooltip , variant , ...otherProps } = props;
    invariant(Object.keys(sizingsAvatar).includes(size), 'The Avatar size must be one of the sizingsAvatar tokens.');
    const contents = jsx(Box, Object.assign({}, otherProps, {
        backgroundColor: backgroundColor,
        borderRadius: "borderRadiusCircle",
        flexShrink: 0,
        opacity: variant === variants.muted ? 0.5 : undefined,
        overflow: "hidden",
        size: size,
        tabIndex: tooltip ? 0 : undefined
    }, {
        children: jsx(AvatarContents, {
            icon: icon,
            isDecorative: isDecorative,
            name: name,
            size: size,
            src: src,
            tooltip: tooltip
        }, void 0)
    }), void 0);
    return tooltip ? jsx(Tooltip, Object.assign({
        content: tooltip,
        appendTo: "parent"
    }, {
        children: contents
    }), void 0) : contents;
}

export { avatarDefaultSize, Avatar as default, variants };
