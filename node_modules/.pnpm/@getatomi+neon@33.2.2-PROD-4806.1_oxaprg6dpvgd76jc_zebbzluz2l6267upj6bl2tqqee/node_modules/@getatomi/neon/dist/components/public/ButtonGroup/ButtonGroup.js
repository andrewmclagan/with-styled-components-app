import { jsxs, jsx } from 'react/jsx-runtime';
import flattenChildren from 'react-flatten-children';
import _ from 'lodash';
import Box from '../Box/Box.js';
import Button, { ButtonLoader } from '../Button/Button.js';
import Flex from '../Flex/Flex.js';
import Icon from '../Icon/Icon.js';
import Menu from '../Menu/Menu.js';
import { useMedia } from '../Media/Media.js';
import { breakpoints } from '../../../constants/tokens/breakpoints.js';

const breakpoint = {
    maxWidth: breakpoints.breakpointMedium
};
function Loader() {
    const isMobile = useMedia(breakpoint);
    const item = jsx(Box, Object.assign({
        as: "li",
        flexShrink: 0
    }, {
        children: jsx(ButtonLoader, {
            size: "small1X"
        }, void 0)
    }), void 0);
    return jsxs(Flex, Object.assign({
        as: "ul",
        display: "inline-flex",
        gap: "spacingSmall1X",
        justifyContent: "center",
        wrap: true
    }, {
        children: [
            item,
            item,
            !isMobile && item,
            !isMobile && item
        ]
    }), void 0);
}
function ButtonGroup(props) {
    const { collapse , children , testHook  } = props;
    const isMobile = useMedia(breakpoint);
    const buttons = flattenChildren(children);
    // eslint-disable-next-line no-nested-ternary
    const collapseAfter = collapse ? isMobile ? 1 : collapse.after : buttons.length;
    return jsxs(Flex, Object.assign({
        as: "ul",
        display: "inline-flex",
        gap: "spacingSmall1X",
        justifyContent: "center",
        wrap: true,
        testHook: testHook
    }, {
        children: [
            _.take(buttons, collapseAfter).map((button, i)=>jsx(Box, Object.assign({
                    as: "li",
                    flexShrink: 0
                }, {
                    children: button
                }), i)
            ),
            collapse && collapseAfter < buttons.length && jsx(Box, Object.assign({
                as: "li",
                flexShrink: 0
            }, {
                children: jsx(Menu, {
                    ariaLabel: collapse.label,
                    drawerProps: collapse.drawerProps,
                    trigger: jsx(Button, Object.assign({
                        as: "span",
                        variant: collapse.variant,
                        iconBefore: jsx(Icon, {
                            name: "menu-more",
                            size: "sizeIconSmall1X"
                        }, void 0)
                    }, {
                        children: collapse.label
                    }), void 0),
                    items: _.slice(buttons, collapseAfter).map((param)=>{
                        let { props: buttonProps  } = param;
                        var ref;
                        return {
                            label: buttonProps.children,
                            iconName: (ref = buttonProps.iconBefore) === null || ref === void 0 ? void 0 : ref.props.name,
                            onSelect: buttonProps.onClick,
                            withSeparator: false,
                            isDanger: buttonProps.variant === 'error'
                        };
                    }),
                    testHook: testHook && `${testHook}-collapse`
                }, void 0)
            }), "collapse")
        ]
    }), void 0);
}ButtonGroup.Loader = Loader;

export { Loader, ButtonGroup as default };
