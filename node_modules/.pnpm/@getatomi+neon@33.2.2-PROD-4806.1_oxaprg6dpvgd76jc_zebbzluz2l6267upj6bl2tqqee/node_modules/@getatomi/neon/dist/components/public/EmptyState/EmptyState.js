import { jsxs, jsx } from 'react/jsx-runtime';
import cx from 'classnames';
import keyMirror from 'keymirror';
import Button from '../Button/Button.js';
import Heading from '../Heading/Heading.js';
import HelpInfo from '../HelpInfo/HelpInfo.js';
import Stack from '../Stack/Stack.js';
import Text from '../Text/Text.js';
import VerticalSpacing from '../VerticalSpacing/VerticalSpacing.js';
import Box from '../Box/Box.js';
import Container from '../Container/Container.js';
import styles from './EmptyState.css.js';

keyMirror({
    coloredBackground: null
});
function EmptyState(props) {
    const { ctaProps , customCta , header , headingProps , helpInfo , isGutterless , testHook , description , descriptionInfo , variant ,  } = props;
    const hasCta = !!(ctaProps || customCta);
    return jsxs(Box, Object.assign({
        as: "article",
        className: cx(styles.root, variant && styles[variant]),
        testHook: testHook
    }, {
        children: [
            header && jsx(Container, Object.assign({
                paddingInline: "spacingNone",
                maxWidth: "sizeSmall1X"
            }, {
                children: jsx(VerticalSpacing, Object.assign({
                    size: "large4X"
                }, {
                    children: header
                }), void 0)
            }), void 0),
            jsxs(Container, Object.assign({
                paddingInline: isGutterless ? 'spacingNone' : undefined,
                maxWidth: "sizeRoot"
            }, {
                children: [
                    headingProps && jsx(VerticalSpacing, Object.assign({
                        size: "large"
                    }, {
                        children: jsx(Heading, Object.assign({}, headingProps, {
                            size: "large1X"
                        }), void 0)
                    }), void 0),
                    jsxs(Stack, Object.assign({
                        spacing: "spacingLarge4X"
                    }, {
                        children: [
                            jsxs(Stack, Object.assign({
                                spacing: "spacingSmall"
                            }, {
                                children: [
                                    jsx(Text, Object.assign({
                                        as: "p",
                                        variant: "lead"
                                    }, {
                                        children: description
                                    }), void 0),
                                    descriptionInfo
                                ]
                            }), void 0),
                            ctaProps ? jsx(Button, Object.assign({}, ctaProps), void 0) : customCta
                        ]
                    }), void 0),
                    helpInfo && jsx(VerticalSpacing, Object.assign({
                        size: hasCta ? 'large1X' : 'large5X',
                        isUpwards: true
                    }, {
                        children: jsx("footer", {
                            children: jsx(HelpInfo, {
                                children: helpInfo
                            }, void 0)
                        }, void 0)
                    }), void 0)
                ]
            }), void 0)
        ]
    }), void 0);
}

export { EmptyState as default };
