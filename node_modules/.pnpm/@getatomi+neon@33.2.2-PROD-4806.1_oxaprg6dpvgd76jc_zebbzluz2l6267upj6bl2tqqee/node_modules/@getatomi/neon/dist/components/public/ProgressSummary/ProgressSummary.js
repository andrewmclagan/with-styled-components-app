import 'core-js/modules/web.dom-collections.iterator.js';
import { jsx, jsxs } from 'react/jsx-runtime';
import cx from 'classnames';
import Flex from '../Flex/Flex.js';
import InfoTip from '../InfoTip/InfoTip.js';
import { breakpoints } from '../../../constants/tokens/breakpoints.js';
import Diff from '../Diff/Diff.js';
import Media from '../Media/Media.js';
import ProgressCircle from '../ProgressCircle/ProgressCircle.js';
import styles from './ProgressSummary.css.js';

const breakpoint = Media.query({
    minWidth: breakpoints.breakpointMediumFrom
});
const getColsCount = (itemCount, withTooltips)=>{
    let [minCols, maxCols] = [
        3,
        3
    ];
    if (itemCount < maxCols) {
        [minCols, maxCols] = [
            itemCount,
            itemCount
        ];
    } else if (itemCount >= 4) {
        [minCols, maxCols] = [
            withTooltips ? 2 : 3,
            3
        ];
    }
    return [
        minCols,
        maxCols
    ];
};
function ProgressSummary(props) {
    const { data , testHook , withFixedColumnGap  } = props;
    const [minCols, maxCols] = getColsCount(data.length, data.some((param)=>{
        let { tooltip  } = param;
        return tooltip;
    }));
    return jsx(Media, {
        element: jsx("div", Object.assign({
            className: cx(styles.root, {
                [styles.withFixedColumnGap]: withFixedColumnGap
            }),
            "data-test": testHook,
            style: {
                '--columns': minCols
            }
        }, {
            children: data.map((param, i)=>{
                let { text , label , tooltip , value , isDisabled , threshold , withStatus  } = param;
                return jsx(ProgressCircle, Object.assign({
                    backingElement: "meter",
                    size: "root",
                    ariaLabel: label,
                    label: jsxs(Flex, Object.assign({
                        alignItems: "center"
                    }, {
                        children: [
                            jsx("span", {
                                children: label
                            }, void 0),
                            tooltip && jsx(InfoTip, {
                                content: tooltip,
                                iconSize: "sizeIconSmall2X",
                                appendTo: "parent"
                            }, void 0)
                        ]
                    }), void 0),
                    value: value,
                    threshold: threshold,
                    withStatus: withStatus,
                    isDisabled: isDisabled,
                    testHook: testHook && `${testHook}-progress-${i}`
                }, {
                    children: text != null ? text : withStatus && jsx(Diff, {
                        value: value,
                        threshold: threshold
                    }, void 0)
                }), label);
            })
        }), void 0),
        queries: {
            [breakpoint]: {
                style: {
                    '--columns': maxCols
                }
            }
        }
    }, void 0);
}

export { ProgressSummary as default };
