import { jsxs, jsx } from 'react/jsx-runtime';
import { forwardRef, useRef } from 'react';
import { useCheckboxGroup, useCheckboxGroupItem } from '@react-aria/checkbox';
import { useRadioGroup, useRadio } from '@react-aria/radio';
import { useCheckboxGroupState } from '@react-stately/checkbox';
import { useRadioGroupState } from '@react-stately/radio';
import _ from 'lodash';
import Box from '../Box/Box.js';
import HelpText from '../HelpText/HelpText.js';
import Label from '../Label/Label.js';
import Skeleton from '../Skeleton/Skeleton.js';
import useId from '../../../utils/useId.js';
import Option from './Option.js';
import { useOptionGroupContext, OptionGroupContext } from './OptionGroupContext.js';
import OptionGroupGrid from './OptionGroupGrid.js';

function mapAriaLabelProps(props) {
    const { ariaLabel , ariaLabelledBy , ...otherProps } = props;
    return {
        ...otherProps,
        'aria-label': ariaLabel,
        'aria-labelledby': ariaLabelledBy
    };
}
const CheckboxGroup = /*#__PURE__*/ forwardRef(function CheckboxGroup(props, ref) {
    const { children , errorVariant , label , variant  } = props;
    const state = useCheckboxGroupState(props);
    const { groupProps , labelProps  } = useCheckboxGroup(mapAriaLabelProps(props), state);
    return jsxs(Box, Object.assign({}, groupProps, {
        ref: ref,
        tabIndex: -1
    }, {
        children: [
            label && jsx(Label, Object.assign({
                as: "span"
            }, labelProps, {
                children: label
            }), void 0),
            jsx(OptionGroupContext.Provider, Object.assign({
                value: {
                    state,
                    selectionMode: 'multiple',
                    errorVariant,
                    variant
                }
            }, {
                children: jsx(OptionGroupGrid, Object.assign({
                    variant: variant
                }, {
                    children: children
                }), void 0)
            }), void 0)
        ]
    }), void 0);
});
function CheckboxGroupItem(props) {
    const state = useOptionGroupContext().state;
    const ref = useRef(null);
    const { inputProps  } = useCheckboxGroupItem(props, state, ref);
    const isSelected = state.isSelected(props.value);
    return jsx(Option, Object.assign({}, props, {
        inputProps: inputProps,
        inputRef: ref,
        isSelected: isSelected
    }), void 0);
}
const RadioGroup = /*#__PURE__*/ forwardRef(function RadioGroup(props, ref) {
    const { children , errorVariant , label , variant  } = props;
    const state = useRadioGroupState(props);
    const { radioGroupProps , labelProps  } = useRadioGroup(mapAriaLabelProps(props), state);
    return jsxs(Box, Object.assign({}, radioGroupProps, {
        ref: ref,
        tabIndex: -1
    }, {
        children: [
            label && jsx(Label, Object.assign({
                as: "span"
            }, labelProps, {
                children: label
            }), void 0),
            jsx(OptionGroupContext.Provider, Object.assign({
                value: {
                    state,
                    selectionMode: 'single',
                    errorVariant,
                    variant
                }
            }, {
                children: jsx(OptionGroupGrid, Object.assign({
                    variant: variant
                }, {
                    children: children
                }), void 0)
            }), void 0)
        ]
    }), void 0);
});
function RadioGroupItem(props) {
    const state = useOptionGroupContext().state;
    const ref = useRef(null);
    const { inputProps  } = useRadio(props, state, ref);
    const isSelected = state.selectedValue === props.value;
    return jsx(Option, Object.assign({}, props, {
        inputProps: inputProps,
        inputRef: ref,
        isSelected: isSelected
    }), void 0);
}
const OptionGroup = /*#__PURE__*/ forwardRef(function OptionGroup(props, ref) {
    const { errorVariant , selectionMode ='single' , validationText  } = props;
    const validationTextId = useId('OptionGroupValidationText');
    const groupProps = {
        ...props,
        'aria-describedby': validationText ? validationTextId : undefined,
        ref
    };
    return jsxs(Box, Object.assign({
        // Workaround for OptionGroup focus issue in dialogs:
        // https://github.com/adobe/react-spectrum/issues/2380
        onMouseDown: (e)=>e.preventDefault()
    }, {
        children: [
            selectionMode === 'single' ? jsx(RadioGroup, Object.assign({}, groupProps), void 0) : jsx(CheckboxGroup, Object.assign({}, groupProps), void 0),
            validationText && jsx(HelpText, Object.assign({
                id: validationTextId,
                variant: errorVariant
            }, {
                children: validationText
            }), void 0)
        ]
    }), void 0);
});
function OptionGroupItem(props) {
    const { selectionMode  } = useOptionGroupContext();
    if (selectionMode === 'single') {
        return jsx(RadioGroupItem, Object.assign({}, props), void 0);
    }
    return jsx(CheckboxGroupItem, Object.assign({}, props), void 0);
}
function OptionGroupLoader(props) {
    const { count , variant  } = props;
    const isSquare = variant === 'square';
    const squareStyles = {
        height: 'unset',
        maxHeight: {
            base: 'inherit',
            tablet: 200
        },
        position: 'relative',
        _before: {
            content: '""',
            display: 'block',
            paddingBottom: '100%'
        }
    };
    return jsx(OptionGroupGrid, Object.assign({
        variant: variant
    }, {
        children: _.times(count, (i)=>jsx(Skeleton, Object.assign({
                height: 50
            }, isSquare && squareStyles), i)
        )
    }), void 0);
}

export { OptionGroup, OptionGroupItem, OptionGroupLoader };
