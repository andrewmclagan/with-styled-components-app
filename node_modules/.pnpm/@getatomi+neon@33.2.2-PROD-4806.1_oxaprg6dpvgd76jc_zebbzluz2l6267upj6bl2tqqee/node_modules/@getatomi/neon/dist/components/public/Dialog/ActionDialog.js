import { jsxs, jsx, Fragment } from 'react/jsx-runtime';
import { cloneElement } from 'react';
import cx from 'classnames';
import keyMirror from 'keymirror';
import Button from '../Button/Button.js';
import Container from '../Container/Container.js';
import Flex from '../Flex/Flex.js';
import Heading from '../Heading/Heading.js';
import VerticalSpacing from '../VerticalSpacing/VerticalSpacing.js';
import DialogBase from './DialogBase.js';
import CloseButton from './CloseButton/CloseButton.js';
import styles from './ActionDialog.css.js';

const variants = keyMirror({
    compact: null
});
function ActionDialog(props) {
    const { appElement , cancelButtonLabel , children , closeAssistiveText , form , heading , isOpen , onClose , submitButtonProps , variant , testHook ,  } = props;
    /* The headingId is used for a11y so that the modal heading is read when
    opening the modal. It doesn't need to be unique since there will always be
    only one modal opened at a time. */ const headingId = 'dialog-heading';
    return jsxs(DialogBase, Object.assign({
        appElement: appElement,
        headingId: headingId,
        className: cx(styles.root, variant && styles[variant]),
        isOpen: isOpen,
        onClose: onClose,
        overlayClassName: styles.overlay
    }, {
        children: [
            heading && jsx("header", {
                children: jsxs("div", Object.assign({
                    className: styles.heading
                }, {
                    children: [
                        jsx(CloseButton, {
                            label: closeAssistiveText,
                            onClick: onClose,
                            variant: "minimal",
                            className: styles.closeButton,
                            testHook: testHook && `${testHook}-close-button`
                        }, void 0),
                        jsx(Container, {
                            children: jsx(Heading, Object.assign({
                                id: headingId,
                                size: "large"
                            }, {
                                children: heading
                            }), void 0)
                        }, void 0)
                    ]
                }), void 0)
            }, void 0),
            /*#__PURE__*/ cloneElement(form, {}, jsxs(Fragment, {
                children: [
                    jsx(VerticalSpacing, Object.assign({
                        size: variant === variants.compact ? 'large' : 'large4X'
                    }, {
                        children: jsx(Container, {
                            children: jsx("div", Object.assign({
                                className: styles.content
                            }, {
                                children: children
                            }), void 0)
                        }, void 0)
                    }), void 0),
                    jsx("div", Object.assign({
                        className: styles.footer
                    }, {
                        children: jsx(Container, {
                            children: jsxs(Flex, Object.assign({
                                gap: "spacingLarge",
                                justifyContent: {
                                    base: 'center',
                                    tablet: 'flex-end'
                                }
                            }, {
                                children: [
                                    jsx(Button, Object.assign({
                                        variant: "link",
                                        onClick: onClose,
                                        testHook: testHook && `${testHook}-cancel-button`,
                                        isDisabled: submitButtonProps.isLoading
                                    }, {
                                        children: cancelButtonLabel
                                    }), void 0),
                                    jsx(Button, Object.assign({
                                        size: "small",
                                        testHook: testHook && `${testHook}-submit-button`,
                                        type: "submit"
                                    }, submitButtonProps), void 0)
                                ]
                            }), void 0)
                        }, void 0)
                    }), void 0)
                ]
            }, void 0))
        ]
    }), void 0);
}

export { ActionDialog as default, variants };
