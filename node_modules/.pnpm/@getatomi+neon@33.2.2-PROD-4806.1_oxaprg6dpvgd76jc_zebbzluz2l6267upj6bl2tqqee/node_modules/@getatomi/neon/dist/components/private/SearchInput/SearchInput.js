import { jsxs, jsx } from 'react/jsx-runtime';
import { useRef } from 'react';
import FieldResetButton from '../FieldResetButton/FieldResetButton.js';
import Icon from '../../public/Icon/Icon.js';
import Box from '../../public/Box/Box.js';
import { inputElements } from '../../../constants/allowedHtmlElements.js';
import styles from './SearchInput.css.js';

function SearchInput(props) {
    const { as: Component = inputElements.input , onReset , value , testHook , ...otherProps } = props;
    const inputRef = useRef(null);
    const handleClearSearch = ()=>{
        var ref;
        (ref = inputRef.current) === null || ref === void 0 ? void 0 : ref.focus();
        onReset();
    };
    return jsxs(Box, Object.assign({
        className: styles.root
    }, {
        children: [
            jsx(Icon, {
                className: styles.icon,
                name: "search",
                size: "sizeIconSmall2X"
            }, void 0),
            jsx(Component, Object.assign({}, otherProps, {
                ref: inputRef,
                className: styles.input,
                value: value,
                "data-test": testHook && `${testHook}-search`
            }), void 0),
            jsx(Box, Object.assign({
                className: styles.resetButtonContainer
            }, {
                children: value && jsx(FieldResetButton, {
                    onClick: handleClearSearch,
                    testHook: testHook && `${testHook}-field-reset-button`
                }, void 0)
            }), void 0)
        ]
    }), void 0);
}

export { SearchInput as default };
