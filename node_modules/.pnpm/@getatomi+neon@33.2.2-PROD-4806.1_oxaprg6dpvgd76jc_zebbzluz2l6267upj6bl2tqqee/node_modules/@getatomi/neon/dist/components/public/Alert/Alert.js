import { jsxs, jsx } from 'react/jsx-runtime';
import { useEffect } from 'react';
import cx from 'classnames';
import keyMirror from 'keymirror';
import Box from '../Box/Box.js';
import Button from '../Button/Button.js';
import Icon from '../Icon/Icon.js';
import styles from './Alert.css.js';

const hideDelays = {
    default: 3000,
    long: 5000,
    longer: 7000
};
const variants = keyMirror({
    general: null,
    error: null,
    info: null,
    success: null,
    warning: null
});
const iconNames = Object.freeze({
    general: 'alert-general',
    error: 'alert-error',
    info: 'alert-info',
    success: 'alert-success',
    warning: 'alert-warning'
});
const roleMapping = Object.freeze({
    general: 'status',
    error: 'alert',
    info: 'status',
    success: 'status',
    warning: 'alert'
});
const getButtonVariant = (variant)=>{
    return variant === variants.error || variant === variants.warning ? variant : undefined;
};
function Alert(props) {
    const { buttonProps , children , dismissAssistiveText , hideDelay ='default' , isAutoDismissible , isContentCentered , isDismissible , isGlobal , onDismiss , testHook , variant ,  } = props;
    var _role;
    // Unless a custom role is provided , use the sensible default based on the
    // variant.
    const role = (_role = props.role) !== null && _role !== void 0 ? _role : roleMapping[variant];
    useEffect(()=>{
        const timeout = isAutoDismissible && onDismiss ? setTimeout(onDismiss, hideDelays[hideDelay]) : null;
        return ()=>{
            if (timeout) clearTimeout(timeout);
        };
    }, [
        hideDelay,
        isAutoDismissible,
        onDismiss
    ]);
    return jsxs(Box, Object.assign({
        className: cx(styles.root, {
            [styles.isContentCentered]: isContentCentered,
            [styles.isGlobal]: isGlobal,
            [String(styles[variant])]: variant
        }),
        role: role,
        testHook: testHook
    }, {
        children: [
            jsx(Icon, {
                name: iconNames[variant],
                size: "sizeIconSmall",
                display: {
                    base: 'none',
                    tablet: 'inline-block'
                },
                className: styles.icon
            }, void 0),
            jsxs("div", Object.assign({
                className: styles.content
            }, {
                children: [
                    jsx("div", Object.assign({
                        className: styles.text
                    }, {
                        children: children
                    }), void 0),
                    buttonProps && jsx("div", Object.assign({
                        className: styles.button
                    }, {
                        children: jsx(Button, Object.assign({}, buttonProps, {
                            size: "small1X",
                            variant: getButtonVariant(variant)
                        }), void 0)
                    }), void 0)
                ]
            }), void 0),
            isDismissible && dismissAssistiveText && onDismiss && jsx(Box, Object.assign({
                as: "button",
                type: "button",
                onClick: onDismiss,
                className: styles.dismissButton,
                testHook: testHook ? `${testHook}-close-button` : undefined
            }, {
                children: jsx(Icon, {
                    name: "close",
                    size: "sizeIconSmall2X",
                    isDecorative: false,
                    title: dismissAssistiveText
                }, void 0)
            }), void 0)
        ]
    }), void 0);
}

export { Alert as default, hideDelays, variants };
