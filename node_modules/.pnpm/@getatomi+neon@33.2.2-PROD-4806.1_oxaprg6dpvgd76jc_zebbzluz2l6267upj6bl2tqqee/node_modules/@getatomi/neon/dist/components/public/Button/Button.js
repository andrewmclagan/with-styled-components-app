import 'core-js/modules/web.dom-collections.iterator.js';
import { jsx, jsxs } from 'react/jsx-runtime';
import { forwardRef } from 'react';
import Box from '../Box/Box.js';
import { spinnerSizes } from '../../../constants/sizes.js';
import Skeleton from '../Skeleton/Skeleton.js';
import Spinner from '../Spinner/Spinner.js';

// PROD-3826 TODO: discuss color palette refinements
const backgroundHoverColors = {
    default: '#0056D6',
    info: '#DFE1E2',
    success: '#006143',
    error: '#C40016',
    warning: '#E06B42'
};
const baseStyles = {
    borderRadius: 'borderRadiusRoot',
    color: 'colorCoreWhite',
    fontFamily: 'fontFamilySystem'
};
const legacyBaseStyles = {
    borderRadius: 'borderRadiusLegacyButton',
    color: 'colorCoreWhite',
    fontFamily: 'fontFamilyRoot',
    letterSpacing: 'letterSpacingLarge1X',
    textTransform: 'uppercase'
};
const defaultStyles = {
    ...baseStyles,
    backgroundColor: 'colorInteractiveLink',
    // @ts-ignore PROD-3826 TODO: discuss color palette refinements
    _hoverAndFocus: {
        backgroundColor: backgroundHoverColors.default
    }
};
const borderedStyles = {
    ...baseStyles,
    boxShadow: 'boxShadowBorder',
    backgroundColor: 'colorCoreWhite',
    color: 'colorInteractiveLink',
    _hoverAndFocus: {
        backgroundColor: 'colorFiftyShadesLightest'
    }
};
const infoStyles = {
    ...baseStyles,
    backgroundColor: 'colorFiftyShadesLightest',
    color: 'colorFiftyShadesDarker',
    // @ts-ignore PROD-3826 TODO: discuss color palette refinements
    _hoverAndFocus: {
        backgroundColor: backgroundHoverColors.info
    }
};
const linkStyles = {
    backgroundColor: 'colorTransparent',
    borderWidth: 'borderWidthNone',
    color: 'colorInteractiveLink',
    fontFamily: 'inherit',
    padding: 'spacingNone',
    _hoverAndFocus: {
        color: 'colorCoreBlack'
    }
};
const successStyles = {
    ...baseStyles,
    backgroundColor: 'colorStatusSuccessDarker',
    // @ts-ignore PROD-3826 TODO: discuss color palette refinements
    _hoverAndFocus: {
        backgroundColor: backgroundHoverColors.success
    }
};
const errorStyles = {
    ...baseStyles,
    backgroundColor: 'colorStatusErrorDark',
    // @ts-ignore PROD-3826 TODO: discuss color palette refinements
    _hoverAndFocus: {
        backgroundColor: backgroundHoverColors.error
    }
};
const warningStyles = {
    ...baseStyles,
    backgroundColor: 'colorStatusWarningRoot',
    color: 'colorCoreBlack',
    // @ts-ignore PROD-3826 TODO: discuss color palette refinements
    _hoverAndFocus: {
        backgroundColor: backgroundHoverColors.warning
    }
};
const legacyStyles = {
    ...defaultStyles,
    ...legacyBaseStyles
};
const ghostStyles = {
    ...legacyBaseStyles,
    backgroundColor: 'colorTransparent',
    borderColor: 'colorCoreWhite',
    borderStyle: 'solid',
    borderWidth: 'borderWidthRoot',
    _hoverAndFocus: {
        backgroundColor: 'colorWhiteTransparent40'
    }
};
const transparentStyles = {
    ...legacyBaseStyles,
    backgroundColor: 'colorWhiteTransparent20',
    _hoverAndFocus: {
        backgroundColor: 'colorWhiteTransparent40'
    }
};
const tagStyles = {
    ...legacyBaseStyles,
    backgroundColor: 'colorCoreWhite',
    borderColor: 'colorFiftyShadesLighter',
    borderStyle: 'solid',
    borderWidth: 'borderWidthLarge',
    borderRadius: 'borderRadiusLegacyButton',
    color: 'colorFiftyShadesDarker',
    fontWeight: 'fontWeightBold',
    _hoverAndFocus: {
        backgroundColor: 'colorFiftyShadesLightest'
    }
};
const variants = {
    default: {
        loadingSpinner: 'inverse',
        styles: defaultStyles
    },
    bordered: {
        styles: borderedStyles
    },
    info: {
        loadingSpinner: 'grey',
        styles: infoStyles
    },
    link: {
        styles: linkStyles
    },
    success: {
        loadingSpinner: 'inverse',
        styles: successStyles
    },
    error: {
        loadingSpinner: 'inverse',
        styles: errorStyles
    },
    warning: {
        loadingSpinner: 'black',
        styles: warningStyles
    },
    legacy: {
        loadingSpinner: 'inverse',
        styles: legacyStyles
    },
    ghost: {
        loadingSpinner: 'inverse',
        styles: ghostStyles
    },
    transparent: {
        loadingSpinner: 'inverse',
        styles: transparentStyles
    },
    tag: {
        styles: tagStyles
    }
};
const sizes = {
    small1X: {
        fontSize: 'fontSizeSmall2X',
        paddingInline: 'spacingSmall1X',
        paddingBlock: 'spacingSmall3X',
        lineHeight: 'lineHeightLarge1X'
    },
    small: {
        fontSize: 'fontSizeSmall1X',
        paddingInline: 'spacingSmall',
        paddingBlock: 'spacingSmall1X',
        lineHeight: 'lineHeightRoot'
    },
    root: {
        fontSize: 'fontSizeSmall',
        paddingInline: 'spacingRoot',
        paddingBlock: 'spacingSmall1X',
        lineHeight: 'lineHeightLarge'
    },
    large: {
        fontSize: 'fontSizeRoot',
        paddingInline: 'spacingLarge1X',
        paddingBlock: 'spacingSmall',
        lineHeight: 'lineHeightLarge'
    }
};
const isValidSpinnerSize = (size)=>{
    return Object.values(spinnerSizes).includes(size);
};
const Button = /*#__PURE__*/ forwardRef(function Button(props, ref) {
    var ref1, ref2, ref3, ref4, ref5, ref6;
    const { _hoverAndFocus , as ='button' , color , children , iconBefore , iconAfter , size ='root' , variant ='default' , isAriaDisabled , isDisabled , isFullWidth , isLoading , testHook , title , type ='button' , ...otherProps } = props;
    const isButton = as === 'button';
    const showLoadingState = isLoading && isButton;
    const loadingSpinner = jsx(Box, Object.assign({
        as: "span",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        position: "absolute",
        top: "0",
        right: "0",
        left: "0",
        bottom: "0",
        testHook: testHook ? `${testHook}-spinner` : undefined
    }, {
        children: jsx(Spinner, {
            size: isValidSpinnerSize(size) ? size : undefined,
            variant: (ref1 = variants[variant]) === null || ref1 === void 0 ? void 0 : ref1.loadingSpinner
        }, void 0)
    }), void 0);
    const content = jsxs(Box, Object.assign({
        as: "span",
        alignItems: "center",
        "aria-hidden": showLoadingState !== null && showLoadingState !== void 0 ? showLoadingState : undefined,
        display: "flex",
        gap: size === 'small' || size === 'small1X' ? 'spacingSmall1X' : 'spacingSmall',
        justifyContent: "center",
        visibility: showLoadingState ? 'hidden' : undefined,
        testHook: testHook ? `${testHook}-content` : undefined
    }, {
        children: [
            iconBefore,
            jsx("span", {
                children: children
            }, void 0),
            iconAfter
        ]
    }), void 0);
    // @ts-ignore  PROD-3826 TODO: discuss color palette refinements
    const hoverAndFocusStyles = {
        color: color || ((ref2 = variants[variant]) === null || ref2 === void 0 ? void 0 : (ref3 = ref2.styles) === null || ref3 === void 0 ? void 0 : ref3.color),
        ...(ref4 = variants[variant]) === null || ref4 === void 0 ? void 0 : (ref5 = ref4.styles) === null || ref5 === void 0 ? void 0 : ref5._hoverAndFocus,
        ..._hoverAndFocus
    };
    return jsxs(Box, Object.assign({
        ref: ref
    }, sizes[size], (ref6 = variants[variant]) === null || ref6 === void 0 ? void 0 : ref6.styles, color && {
        color
    }, otherProps, {
        _active: {
            transform: variant === 'link' ? undefined : 'scale(0.95)'
        },
        // @ts-ignore PROD-3826 TODO: discuss color palette refinements
        _hoverAndFocus: hoverAndFocusStyles
    }, (isDisabled || isAriaDisabled || isLoading) && {
        _active: undefined,
        _hoverAndFocus: undefined
    }, {
        as: as,
        "aria-busy": showLoadingState || undefined,
        "aria-disabled": isAriaDisabled,
        cursor: isAriaDisabled ? 'not-allowed' : undefined,
        disabled: isDisabled || showLoadingState ? true : undefined,
        display: "inline-block",
        opacity: isDisabled || isAriaDisabled ? 0.5 : undefined,
        position: "relative",
        testHook: testHook,
        title: title,
        transition: "transitionRoot",
        type: isButton ? type : undefined,
        width: isFullWidth ? 'sizeFull' : undefined
    }, {
        children: [
            content,
            showLoadingState && loadingSpinner
        ]
    }), void 0);
});
function ButtonLoader(props) {
    const { size ='root' , ...otherProps } = props;
    const heights = {
        small1X: 28,
        small: 36,
        root: 40,
        large: 52
    };
    return jsx(Skeleton, Object.assign({}, otherProps, {
        borderRadius: "borderRadiusRoot",
        width: 115,
        height: heights[size]
    }), void 0);
}

export { ButtonLoader, backgroundHoverColors, baseStyles, Button as default, legacyBaseStyles, sizes, variants };
