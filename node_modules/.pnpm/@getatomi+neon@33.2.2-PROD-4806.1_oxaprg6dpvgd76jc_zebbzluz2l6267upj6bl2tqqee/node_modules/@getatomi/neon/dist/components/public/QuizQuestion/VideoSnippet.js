import { jsxs, jsx } from 'react/jsx-runtime';
import Markdown, { MarkdownTheme } from '../Markdown/Markdown.js';
import markdownStyles from '../Markdown/Markdown.css.js';
import Heading from '../Heading/Heading.js';
import VerticalSpacing from '../VerticalSpacing/VerticalSpacing.js';
import Container from '../Container/Container.js';
import { useMedia } from '../Media/Media.js';
import { breakpoints } from '../../../constants/tokens/breakpoints.js';
import { colors } from '../../../constants/tokens/colors.js';

function VideoSnippet(props) {
    const { videoPlayer , title , duration , description , testHook , themeColor =colors.colorCoreBrand ,  } = props;
    const matches = useMedia({
        minWidth: breakpoints.breakpointMediumFrom
    });
    return jsxs("div", Object.assign({
        "data-test": testHook
    }, {
        children: [
            jsx(VerticalSpacing, Object.assign({
                size: matches ? 'large4X' : 'large2X'
            }, {
                children: videoPlayer
            }), void 0),
            jsxs(Container, Object.assign({
                maxWidth: "sizeRoot"
            }, {
                children: [
                    jsx(VerticalSpacing, Object.assign({
                        size: "large"
                    }, {
                        children: jsx(Heading, Object.assign({
                            size: "large",
                            label: duration,
                            testHook: testHook && `${testHook}-heading`
                        }, {
                            children: title
                        }), void 0)
                    }), void 0),
                    jsx(MarkdownTheme, Object.assign({
                        color: themeColor
                    }, {
                        children: jsx(Markdown, Object.assign({
                            className: markdownStyles.textPost,
                            testHook: testHook && `${testHook}-description`
                        }, {
                            children: description
                        }), void 0)
                    }), void 0)
                ]
            }), void 0)
        ]
    }), void 0);
}

export { VideoSnippet as default };
