import { InputHTMLAttributes, ReactNode, RefObject } from 'react';
import { Props as FormFieldProps } from '../../../components/private/FormField/FormField';
import { inputElements } from '../../../constants/allowedHtmlElements';
declare const validInputTypes: {
    email: "email";
    number: "number";
    password: "password";
    search: "search";
    tel: "tel";
    text: "text";
    url: "url";
};
declare type VariantKey = 'error' | 'warning';
export declare type TextFieldProps = Omit<FormFieldProps, 'errorVariant'> & Pick<InputHTMLAttributes<HTMLInputElement>, 'onChange' | 'onBlur' | 'placeholder' | 'defaultValue'> & {
    as?: keyof typeof inputElements;
    containerRef?: RefObject<HTMLDivElement>;
    errorVariant?: VariantKey;
    insertAfter?: ReactNode;
    rows?: number;
    type?: keyof typeof validInputTypes;
    withVariantIcon?: boolean;
};
declare const TextField: import("react").ForwardRefExoticComponent<Omit<FormFieldProps, "errorVariant"> & Pick<InputHTMLAttributes<HTMLInputElement>, "defaultValue" | "placeholder" | "onBlur" | "onChange"> & {
    as?: "input" | "textarea" | undefined;
    containerRef?: RefObject<HTMLDivElement> | undefined;
    errorVariant?: VariantKey | undefined;
    insertAfter?: ReactNode;
    rows?: number | undefined;
    type?: "number" | "text" | "search" | "tel" | "url" | "email" | "password" | undefined;
    withVariantIcon?: boolean | undefined;
} & import("react").RefAttributes<HTMLInputElement>>;
export default TextField;
