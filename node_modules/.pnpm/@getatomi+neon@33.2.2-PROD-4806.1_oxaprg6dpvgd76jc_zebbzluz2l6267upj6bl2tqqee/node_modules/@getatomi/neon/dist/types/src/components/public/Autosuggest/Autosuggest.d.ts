import { InputHTMLAttributes, ReactElement, ReactNode } from 'react';
import '@reach/combobox/styles.css';
import { Props as FormFieldProps } from '../../../components/private/FormField/FormField';
import { DrawerProps } from '../../../components/public/Drawer/Drawer';
import { Value as ColorValue } from '../../../constants/tokens/colors.types';
export declare type AutoSuggestProps = FormFieldProps & Pick<InputHTMLAttributes<HTMLInputElement>, 'onChange' | 'placeholder'> & {
    buttonText: string;
    drawerProps?: Omit<DrawerProps, 'children' | 'isOpen'>;
    noResultText: string;
    onBlur: () => void;
    onReset?: () => void;
    onSearchReset: () => void;
    onSelect: (value: string | undefined) => void;
    options: Array<{
        color?: ColorValue;
        label: string;
        value: string;
    }>;
    renderAddOptionText?: (value: ReactNode) => ReactElement;
};
declare const Autosuggest: import("react").ForwardRefExoticComponent<FormFieldProps & Pick<InputHTMLAttributes<HTMLInputElement>, "placeholder" | "onChange"> & {
    buttonText: string;
    drawerProps?: Omit<DrawerProps, "children" | "isOpen"> | undefined;
    noResultText: string;
    onBlur: () => void;
    onReset?: (() => void) | undefined;
    onSearchReset: () => void;
    onSelect: (value: string | undefined) => void;
    options: Array<{
        color?: ColorValue;
        label: string;
        value: string;
    }>;
    renderAddOptionText?: ((value: ReactNode) => ReactElement) | undefined;
} & import("react").RefAttributes<HTMLInputElement>>;
export default Autosuggest;
