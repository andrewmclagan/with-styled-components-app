import { ComponentProps, ReactElement, ReactNode } from 'react';
import { Position } from '@reach/popover';
import '@reach/menu-button/styles.css';
import Drawer from '../../../components/public/Drawer/Drawer';
import { IconName } from '../../../components/public/Icon/Icon';
import MenuItem, { MenuItemOption } from '../../../components/public/MenuItem/MenuItem';
export declare const variants: {
    vertical: "vertical";
};
export declare type DrawerProps = ComponentProps<typeof Drawer>;
export declare type Option = MenuItemOption & {
    label: ReactNode;
    withSeparator?: boolean;
};
export declare type CommonProps = {
    ariaLabel?: string;
    drawerProps?: Omit<DrawerProps, 'children' | 'isOpen'>;
    iconName?: IconName;
    /**
     * An optional id for the menu trigger. Provide it only when wanting to override the automatically
     * generated id.
     */
    id?: string;
    isDisabled?: boolean;
    itemVariant?: ComponentProps<typeof MenuItem>['variant'];
    popoverPosition?: Position;
    testHook?: string;
    variant?: keyof typeof variants;
};
export declare type MenuProps = CommonProps & {
    items: ReadonlyArray<Option & {
        readonly onSelect: () => void;
    }>;
    trigger?: ReactNode;
};
declare function Menu(props: MenuProps): JSX.Element;
declare namespace Menu {
    var Item: typeof MenuItem;
}
declare type OptionWithValue<T> = Option & {
    readonly value: T;
};
export declare type StatefulMenuProps<T> = CommonProps & {
    isDisabled?: boolean;
    onChange: (value: T) => void;
    options: ReadonlyArray<OptionWithValue<T>>;
    placeholder?: ReactNode;
    trigger?: ReactElement;
    value?: T;
};
export declare function StatefulMenu<T>(props: StatefulMenuProps<T>): JSX.Element;
export default Menu;
