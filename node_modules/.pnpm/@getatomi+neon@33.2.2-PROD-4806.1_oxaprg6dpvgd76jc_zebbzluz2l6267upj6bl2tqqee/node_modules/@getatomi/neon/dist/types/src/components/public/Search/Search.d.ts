import { ReactNode, ReactElement } from 'react';
import '@reach/combobox/styles.css';
import '@reach/dialog/styles.css';
declare const matchLevels: {
    full: number;
    partial: number;
    none: number;
};
export declare type Hit = {
    _snippetResult: {
        captions: {
            matchLevel: keyof typeof matchLevels;
        } | null | undefined;
        description: {
            matchLevel: keyof typeof matchLevels;
        } | null | undefined;
    };
    access_level: string;
    captions: string | null | undefined;
    categories: Record<string, string>;
    description: string | null | undefined;
    id: number;
    objectID: string;
    tier?: number;
    type: string;
};
declare type AutocompleteProps = {
    closeAssistiveText: string;
    emptyStateDescription: string;
    footer: ReactNode;
    isLocked: (accessLevel: string) => boolean;
    minQueryLength?: number;
    noResultsDescription: ReactNode;
    onSelect: (hit: Hit) => void;
    placeholder: string;
    renderNoResultsHeading: (query: string) => ReactNode;
    renderOption: (hit: Hit, children: ReactNode) => ReactNode;
    renderType: (type: string, tier?: number) => ReactNode;
    resetAssistiveText: string;
};
export declare type SearchProps = AutocompleteProps & {
    indexName: string;
    isOpen?: boolean;
    onClose: (value: string) => void;
    onOpen: () => void;
    resetOnClose?: boolean;
    searchClient: any;
    searchParameters?: Partial<Record<string, any>>;
    testHook?: string;
    trigger?: ReactElement;
};
export default function Search(props: SearchProps): JSX.Element;
export {};
