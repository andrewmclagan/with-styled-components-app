import { ComponentProps, ComponentType, ReactNode } from 'react';
import 'katex/dist/contrib/mhchem.js';
import 'katex/dist/katex.min.css';
import { AriaProps } from '../../../types/neon';
import { containerElements } from '../../../constants/allowedHtmlElements';
import { BoxProps } from '../../../components/public/Box/Box';
import NeonDefinition from '../../../components/private/Definition/Definition';
import NeonImage from '../../../components/private/Image/Image';
import NeonPanel from '../../../components/public/Panel/Panel';
import { AppLinkProps } from '../../../../test/stubs';
import { CustomRenderers } from './createRenderers';
export declare const MarkdownTheme: import("styled-components").StyledComponent<"div", any, {}, never>;
export declare const imageSizes: Readonly<{
    'x-small': "small1X";
    small: "small";
    medium: "root";
    large: "large";
}>;
export declare const Definition: import("styled-components").StyledComponent<typeof NeonDefinition, any, {}, never>;
export declare function DragAndDrop(props: {
    children: ReactNode;
    id: string;
}): JSX.Element;
export declare const Image: typeof NeonImage;
export declare const Link: import("styled-components").StyledComponent<import("react").ForwardRefExoticComponent<import("react").AnchorHTMLAttributes<HTMLAnchorElement> & {
    children?: ReactNode;
    component: ComponentType<AppLinkProps> | null | undefined;
    href?: string | undefined;
    id?: string | undefined;
    isExternal?: boolean | undefined;
    onClick?: import("react").MouseEventHandler<HTMLElement> | undefined;
    testHook?: string | undefined;
    to?: string | undefined;
} & import("react").RefAttributes<HTMLElement | HTMLAnchorElement>>, any, {}, never>;
export declare function Panel({ variant, children, }: {
    children: ReactNode;
    variant?: JSX.LibraryManagedAttributes<typeof NeonPanel, ComponentProps<typeof NeonPanel>>['variant'];
}): JSX.Element;
export declare type MarkdownProps = Pick<BoxProps, 'className' | 'testHook' | 'vars'> & {
    allowedElements?: Array<string>;
    aria?: AriaProps;
    as?: keyof typeof containerElements;
    children: string;
    customRenderers?: CustomRenderers;
    isLimited?: boolean;
    /**
     * Removes the wrapping paragraph tag when set to true.
     */
    isUnwrapped?: boolean;
    linkComponent?: ComponentType<AppLinkProps> | null | undefined;
};
export default function Markdown(props: MarkdownProps): JSX.Element;
