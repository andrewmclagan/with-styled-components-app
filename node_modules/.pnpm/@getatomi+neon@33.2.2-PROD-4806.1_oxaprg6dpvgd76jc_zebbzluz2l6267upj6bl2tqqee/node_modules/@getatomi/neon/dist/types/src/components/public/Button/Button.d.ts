import { AnchorHTMLAttributes, MouseEventHandler, ReactNode } from 'react';
import { Color, ResponsiveValue } from '../../../utils/systemProps';
import { BoxProps, BoxStyleProps } from '../../../components/public/Box/Box';
import { buttonSizes } from '../../../constants/sizes';
import { SkeletonProps } from '../../../components/public/Skeleton/Skeleton';
import { variants as spinnerVariants } from '../../../components/public/Spinner/Spinner';
export declare const backgroundHoverColors: {
    default: string;
    info: string;
    success: string;
    error: string;
    warning: string;
};
declare type HoverAndFocusProps = {
    backgroundColor?: ResponsiveValue<Color> | string;
    color?: ResponsiveValue<Color>;
};
declare type VariantStyleProps = BoxStyleProps & {
    _hoverAndFocus?: HoverAndFocusProps;
};
declare type VariantProps = {
    loadingSpinner?: keyof typeof spinnerVariants;
    styles: VariantStyleProps;
};
export declare const baseStyles: VariantStyleProps;
export declare const legacyBaseStyles: VariantStyleProps;
export declare type Variant = 'default' | 'bordered' | 'info' | 'link' | 'success' | 'error' | 'warning' | 'legacy' | 'ghost' | 'transparent' | 'tag';
export declare const variants: Partial<Record<Variant, VariantProps>>;
export declare type ButtonSizesKeys = keyof typeof buttonSizes;
export declare type ButtonSizes = {
    [key in ButtonSizesKeys]: BoxStyleProps;
};
export declare const sizes: ButtonSizes;
export declare type ButtonProps = Pick<BoxProps, 'as' | 'backgroundColor' | 'color' | 'testHook' | 'paddingInline'> & AnchorHTMLAttributes<HTMLAnchorElement> & {
    _hoverAndFocus?: HoverAndFocusProps;
    children?: ReactNode;
    iconAfter?: ReactNode;
    iconBefore?: ReactNode;
    /**
     * Sets `aria-disabled=true` on the button and applies disabled styles.
     */
    isAriaDisabled?: boolean;
    isDisabled?: boolean;
    isFullWidth?: boolean;
    isLoading?: boolean;
    onClick?: MouseEventHandler;
    size?: keyof typeof buttonSizes;
    title?: string;
    to?: string;
    type?: string;
    variant?: Variant;
};
declare const Button: import("react").ForwardRefExoticComponent<Pick<BoxProps, "testHook" | "as" | "backgroundColor" | "color" | "paddingInline"> & AnchorHTMLAttributes<HTMLAnchorElement> & {
    _hoverAndFocus?: HoverAndFocusProps | undefined;
    children?: ReactNode;
    iconAfter?: ReactNode;
    iconBefore?: ReactNode;
    /**
     * Sets `aria-disabled=true` on the button and applies disabled styles.
     */
    isAriaDisabled?: boolean | undefined;
    isDisabled?: boolean | undefined;
    isFullWidth?: boolean | undefined;
    isLoading?: boolean | undefined;
    onClick?: MouseEventHandler<Element> | undefined;
    size?: "small1X" | "small" | "root" | "large" | undefined;
    title?: string | undefined;
    to?: string | undefined;
    type?: string | undefined;
    variant?: Variant | undefined;
} & import("react").RefAttributes<HTMLButtonElement>>;
export default Button;
export declare type ButtonLoaderProps = SkeletonProps & {
    size?: ButtonProps['size'];
};
export declare function ButtonLoader(props: ButtonLoaderProps): JSX.Element;
