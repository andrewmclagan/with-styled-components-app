import { ComponentProps, ReactElement, ReactNode } from 'react';
import { ColorShades } from '../../../constants/tokens/colors.types';
import AttachmentList from '../../../components/public/AttachmentList/AttachmentList';
import { LinkProps } from '../../../components/private/Link/Link';
import Menu from '../../../components/public/Menu/Menu';
import { ProgressBarProps } from '../../../components/public/ProgressBar/ProgressBar';
import Tooltip from '../../../components/public/Tooltip/Tooltip';
export declare type CompletionProps = {
    colors: ColorShades;
    isCompleted?: boolean;
    isDisabled?: boolean;
    onClick: () => void;
    testHook?: string;
    text: string;
    tooltipProps: Omit<ComponentProps<typeof Tooltip>, 'children'>;
};
export declare function Completion(props: CompletionProps): JSX.Element;
export declare type TaskCardProps = {
    actions?: ReactElement<typeof Menu>;
    assignedTo?: ReactNode;
    attachments?: ReactElement<typeof AttachmentList>;
    avatar?: ReactNode;
    /**
     * The list of posts associated with this task.
     */
    children?: ReactNode;
    colors: ColorShades;
    /**
     * The completion status of the task for a student.
     */
    completion?: Omit<ComponentProps<typeof Completion>, 'colors'>;
    dueDate: Date | moment.Moment;
    /**
     * Task label displayed in the header. Most commonly used for the task
     * subject, but can be used for other purposes such as as 'draft' and
     * 'scheduled'.
     */
    label?: string;
    /**
     * The props for the link wrapping the title and message. This is used to link to
     * a single task page.
     */
    linkProps?: LinkProps;
    message?: string;
    /**
     * Meta data displayed at the top of the card. For example, the author avatar and date the task was created.
     */
    meta?: ReactNode;
    /**
     * The progress made by students on the task displayed as a progress bar (only visible to teachers).
     */
    progress?: ProgressBarProps;
    /**
     * Displayed inside a tooltip on the label.
     */
    scheduledDate?: Date | moment.Moment;
    testHook?: string;
    title?: string;
    /**
     * A flag to indicate if the task is overdue.
     */
    withStatus?: boolean;
};
declare function TaskCard(props: TaskCardProps): JSX.Element;
declare namespace TaskCard {
    var Task: (props: {
        children: ReactNode;
    }) => JSX.Element;
    var Completion: typeof import("./TaskCard").Completion;
}
export default TaskCard;
