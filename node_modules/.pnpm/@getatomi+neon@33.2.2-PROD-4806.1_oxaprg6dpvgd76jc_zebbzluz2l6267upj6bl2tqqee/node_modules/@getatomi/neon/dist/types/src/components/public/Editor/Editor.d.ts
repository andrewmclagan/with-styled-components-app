/// <reference types="react" />
import { NodeWithPos } from '@milkdown/prose';
import { RenderFileAttachment } from './custom/attached-file';
import { RenderAtomiContent } from './custom/atomi-content';
export declare type OnChangeProps = {
    atomiContent: NodeWithPos[];
    attachedFiles: NodeWithPos[];
    attachedLinks: NodeWithPos[];
    markdown: string;
};
interface CommonEditorProps {
    ariaLabel?: string;
    ariaLabelledBy?: string;
    children?: string;
    onChange?: (args: OnChangeProps) => void;
    placeholder?: string;
    renderAtomiContent?: RenderAtomiContent;
    renderFileAttachment?: RenderFileAttachment;
}
export declare type LabelledProps = {
    ariaLabel: string;
    ariaLabelledBy?: never;
    readOnly?: boolean;
} | {
    ariaLabel?: never;
    ariaLabelledBy: string;
    readOnly?: boolean;
} | {
    ariaLabel?: never;
    ariaLabelledBy?: never;
    readOnly: true;
};
export declare type EditorProps = CommonEditorProps & LabelledProps;
export default function useEditor(props: EditorProps): {
    editor: JSX.Element;
    menu: JSX.Element;
    insertAttachedLink: (url: string) => void;
    insertAtomiContent: (postId: string) => void;
    insertAttachedFile: (attachmentId: string) => void;
    update: () => void;
};
export {};
