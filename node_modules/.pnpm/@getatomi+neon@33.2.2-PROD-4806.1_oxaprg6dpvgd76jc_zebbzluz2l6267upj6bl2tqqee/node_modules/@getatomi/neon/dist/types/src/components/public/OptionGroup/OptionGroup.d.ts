import { ReactNode } from 'react';
import { OptionProps } from './Option';
import { OptionGroupErrorVariant, OptionGroupSelectionMode, OptionGroupVariant } from './types';
export declare type CheckboxGroupProps = SharedOptionGroupProps & {
    onChange: (value: string[]) => void;
    selectionMode: 'multiple';
    value?: string[];
};
export declare type RadioGroupProps = SharedOptionGroupProps & {
    onChange: (value: string) => void;
    selectionMode?: 'single';
    value?: string;
};
declare type SharedOptionGroupProps = {
    ariaLabel?: string;
    ariaLabelledBy?: string;
    children: ReactNode[];
    errorVariant?: OptionGroupErrorVariant;
    label?: ReactNode;
    selectionMode?: OptionGroupSelectionMode;
    validationText?: ReactNode;
    variant?: OptionGroupVariant;
} & (// Either label, ariaLabel or ariaLabelledBy have to be provided.
{
    ariaLabel?: never;
    ariaLabelledBy?: never;
    label: ReactNode;
} | {
    ariaLabel: string;
    ariaLabelledBy?: never;
    label?: never;
} | {
    ariaLabel?: never;
    ariaLabelledBy: string;
    label?: never;
});
export declare type OptionGroupProps = CheckboxGroupProps | RadioGroupProps;
export declare const OptionGroup: import("react").ForwardRefExoticComponent<OptionGroupProps & import("react").RefAttributes<HTMLDivElement>>;
export declare type OptionGroupItemProps = Omit<OptionProps, 'inputProps' | 'inputRef' | 'isSelected'>;
export declare function OptionGroupItem(props: OptionGroupItemProps): JSX.Element;
export declare type OptionGroupLoaderProps = {
    count: number;
    variant?: OptionGroupVariant;
};
export declare function OptionGroupLoader(props: OptionGroupLoaderProps): JSX.Element;
export {};
