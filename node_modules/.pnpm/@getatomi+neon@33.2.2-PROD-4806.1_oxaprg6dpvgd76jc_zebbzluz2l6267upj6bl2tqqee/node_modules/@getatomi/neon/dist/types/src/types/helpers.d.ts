import { ComponentType } from 'react';
export declare type ElementType<C> = string | ComponentType<C>;
export declare type Rect = Partial<DOMRect> | null | undefined;
export declare type Query = Record<string, number | string>;
export declare type ValueOf<T> = T[keyof T];
export declare type DeepPartial<T> = {
    [P in keyof T]?: DeepPartial<T[P]>;
};
export declare type Rest<F extends (...args: any[]) => any> = F extends (param0: Parameters<F>[0], ...rest: infer R) => any ? R : never;
