import { AllHTMLAttributes, CSSProperties, ReactNode } from 'react';
import { BorderRadii, BorderWidth, BoxShadow, Color, FontFamily, FontSize, FontWeight, LetterSpacing, LineHeight, PseudoSelectors, ResponsiveValue, Sizing, Spacing, Transition, ZIndexes } from '../../../utils/systemProps';
export declare type BoxBaseStyleProps = {
    alignContent?: ResponsiveValue<CSSProperties['alignContent']>;
    alignItems?: ResponsiveValue<CSSProperties['alignItems']>;
    alignSelf?: ResponsiveValue<CSSProperties['alignSelf']>;
    appearance?: CSSProperties['appearance'];
    aspectRatio?: ResponsiveValue<CSSProperties['aspectRatio']>;
    backgroundColor?: ResponsiveValue<Color>;
    borderBottomColor?: ResponsiveValue<Color>;
    borderBottomLeftRadius?: ResponsiveValue<BorderRadii>;
    borderBottomRightRadius?: ResponsiveValue<BorderRadii>;
    borderBottomStyle?: ResponsiveValue<CSSProperties['borderStyle']>;
    borderBottomWidth?: ResponsiveValue<BorderWidth>;
    borderColor?: ResponsiveValue<Color>;
    borderLeftColor?: ResponsiveValue<Color>;
    borderLeftStyle?: ResponsiveValue<CSSProperties['borderStyle']>;
    borderLeftWidth?: ResponsiveValue<BorderWidth>;
    borderRadius?: ResponsiveValue<BorderRadii>;
    borderRightColor?: ResponsiveValue<Color>;
    borderRightStyle?: ResponsiveValue<CSSProperties['borderStyle']>;
    borderRightWidth?: ResponsiveValue<BorderWidth>;
    borderStyle?: ResponsiveValue<CSSProperties['borderStyle']>;
    borderTopColor?: ResponsiveValue<Color>;
    borderTopLeftRadius?: ResponsiveValue<BorderRadii>;
    borderTopRightRadius?: ResponsiveValue<BorderRadii>;
    borderTopStyle?: ResponsiveValue<CSSProperties['borderStyle']>;
    borderTopWidth?: ResponsiveValue<BorderWidth>;
    borderWidth?: ResponsiveValue<BorderWidth>;
    bottom?: CSSProperties['bottom'];
    boxShadow?: ResponsiveValue<BoxShadow>;
    color?: ResponsiveValue<Color> | 'inherit';
    columnGap?: ResponsiveValue<Spacing>;
    content?: CSSProperties['content'];
    cursor?: CSSProperties['cursor'];
    display?: ResponsiveValue<CSSProperties['display']>;
    flexBasis?: ResponsiveValue<CSSProperties['flexBasis']>;
    flexDirection?: ResponsiveValue<CSSProperties['flexDirection']>;
    flexGrow?: ResponsiveValue<CSSProperties['flexGrow']>;
    flexShrink?: ResponsiveValue<CSSProperties['flexShrink']>;
    flexWrap?: ResponsiveValue<CSSProperties['flexWrap']>;
    fontFamily?: FontFamily | 'inherit';
    fontSize?: ResponsiveValue<FontSize>;
    fontWeight?: ResponsiveValue<FontWeight>;
    gap?: ResponsiveValue<Spacing>;
    gridTemplateColumns?: ResponsiveValue<CSSProperties['gridTemplateColumns']>;
    gridTemplateRows?: ResponsiveValue<CSSProperties['gridTemplateRows']>;
    height?: ResponsiveValue<Sizing>;
    justifyContent?: ResponsiveValue<CSSProperties['justifyContent']>;
    justifySelf?: ResponsiveValue<CSSProperties['justifySelf']>;
    left?: CSSProperties['left'];
    letterSpacing?: LetterSpacing;
    lineHeight?: ResponsiveValue<LineHeight>;
    margin?: ResponsiveValue<Spacing | 'auto'>;
    marginBlock?: ResponsiveValue<Spacing | 'auto'>;
    marginBottom?: ResponsiveValue<Spacing | 'auto'>;
    marginInline?: ResponsiveValue<Spacing | 'auto'>;
    marginLeft?: ResponsiveValue<Spacing | 'auto'>;
    marginRight?: ResponsiveValue<Spacing | 'auto'>;
    marginTop?: ResponsiveValue<Spacing | 'auto'>;
    maxHeight?: ResponsiveValue<Sizing>;
    maxWidth?: ResponsiveValue<Sizing> | 'fit-content';
    minHeight?: ResponsiveValue<Sizing>;
    minWidth?: ResponsiveValue<Sizing>;
    opacity?: ResponsiveValue<CSSProperties['opacity']>;
    order?: ResponsiveValue<CSSProperties['order']>;
    outlineColor?: Color;
    outlineOffset?: Spacing;
    outlineStyle?: CSSProperties['borderStyle'];
    outlineWidth?: BorderWidth;
    overflow?: ResponsiveValue<CSSProperties['overflow']>;
    overflowY?: ResponsiveValue<CSSProperties['overflowY']>;
    padding?: ResponsiveValue<Spacing>;
    paddingBlock?: ResponsiveValue<Spacing>;
    paddingBottom?: ResponsiveValue<Spacing>;
    paddingInline?: ResponsiveValue<Spacing>;
    paddingLeft?: ResponsiveValue<Spacing>;
    paddingRight?: ResponsiveValue<Spacing>;
    paddingTop?: ResponsiveValue<Spacing>;
    position?: CSSProperties['position'];
    resize?: CSSProperties['resize'];
    right?: CSSProperties['right'];
    rowGap?: ResponsiveValue<Spacing>;
    size?: ResponsiveValue<Sizing>;
    strokeWidth?: ResponsiveValue<CSSProperties['strokeWidth']>;
    textAlign?: ResponsiveValue<CSSProperties['textAlign']>;
    textDecoration?: CSSProperties['textDecoration'];
    textDecorationColor?: CSSProperties['textDecorationColor'];
    textDecorationThickness?: CSSProperties['textDecorationThickness'];
    textIndent?: CSSProperties['textIndent'];
    textOverflow?: ResponsiveValue<CSSProperties['textOverflow']>;
    textTransform?: CSSProperties['textTransform'];
    top?: CSSProperties['top'];
    transform?: CSSProperties['transform'];
    transition?: Transition;
    verticalAlign?: ResponsiveValue<CSSProperties['verticalAlign']>;
    visibility?: CSSProperties['visibility'];
    whiteSpace?: ResponsiveValue<CSSProperties['whiteSpace']>;
    width?: ResponsiveValue<Sizing>;
    zIndex?: ZIndexes;
};
export declare type PseudoSystemProps = {
    [key in PseudoSelectors]?: BoxBaseStyleProps;
};
export declare type BoxStyleProps = BoxBaseStyleProps & PseudoSystemProps;
declare type BoxElementProps = Omit<AllHTMLAttributes<HTMLElement>, keyof BoxBaseStyleProps | 'as'> & PseudoSystemProps;
export declare type BoxProps = BoxBaseStyleProps & BoxElementProps & {
    /**
     * The HTML element used for the root node.
     * @default div
     */
    as?: ReactNode;
    /**
     * The className to apply to the root node. Only use as a last resort. Use
     * styling props instead.
     */
    className?: string;
    testHook?: string;
    /**
     * CSS variables passed down as inline styles on the associated DOM element.
     * Only use as a last resort. Use styling props instead.
     */
    vars?: {
        [key: string]: string | undefined;
    };
};
export declare const StyledBox: import("styled-components").StyledComponent<"div", any, BoxProps, never>;
declare const Box: import("react").ForwardRefExoticComponent<BoxBaseStyleProps & Omit<AllHTMLAttributes<HTMLElement>, "as" | keyof BoxBaseStyleProps> & PseudoSystemProps & {
    /**
     * The HTML element used for the root node.
     * @default div
     */
    as?: ReactNode;
    /**
     * The className to apply to the root node. Only use as a last resort. Use
     * styling props instead.
     */
    className?: string | undefined;
    testHook?: string | undefined;
    /**
     * CSS variables passed down as inline styles on the associated DOM element.
     * Only use as a last resort. Use styling props instead.
     */
    vars?: {
        [key: string]: string | undefined;
    } | undefined;
} & import("react").RefAttributes<HTMLElement>>;
export default Box;
