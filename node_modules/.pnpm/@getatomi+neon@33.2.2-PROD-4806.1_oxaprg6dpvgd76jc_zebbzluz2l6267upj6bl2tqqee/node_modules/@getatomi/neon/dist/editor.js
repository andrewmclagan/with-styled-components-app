import { jsx, jsxs } from 'react/jsx-runtime';
import { forwardRef, cloneElement, useRef } from 'react';
import cx from 'classnames';
import { themeFactory, createCmdKey, createCmd, commandsCtx, Editor, rootCtx, editorViewOptionsCtx, serializerCtx, defaultValueCtx, editorViewCtx, parserCtx } from '@milkdown/core';
import { createNode, createPlugin, AtomList } from '@milkdown/utils';
import { deleteSelection, Plugin, Decoration, DecorationSet, setBlockType, wrapIn, findChildren } from '@milkdown/prose';
import { useNodeCtx, useEditor as useEditor$1, ReactEditor } from '@milkdown/react';
import { link, paragraph, blockquote, em, listItem, orderedList, bulletList, heading } from '@milkdown/preset-commonmark';
import { TurnIntoText, TurnIntoHeading, ToggleBold, ToggleItalic, WrapInBulletList, WrapInOrderedList, gfm } from '@milkdown/preset-gfm';
import { cursor } from '@milkdown/plugin-cursor';
import { history } from '@milkdown/plugin-history';
import { listenerCtx, listener } from '@milkdown/plugin-listener';
import { math } from '@milkdown/plugin-math';
import styled, { css, keyframes } from 'styled-components';
import keyMirror from 'keymirror';
import directive from 'remark-directive';
import 'react-markdown';
import '@dnd-kit/core';
import 'react-children-utilities';
import 'katex/dist/contrib/mhchem.js';
import 'core-js/modules/web.dom-collections.iterator.js';
import { pseudoSelectors as pseudoSelectors$1, createSystem, shouldForwardProp as shouldForwardProp$1, border, color as color$1, flexbox, grid, layout, position, space, typography } from 'system-props';
import * as ReactIs from 'react-is';
import Tippy from '@tippyjs/react';
import 'core-js/modules/esnext.map.delete-all.js';
import 'core-js/modules/esnext.map.every.js';
import 'core-js/modules/esnext.map.filter.js';
import 'core-js/modules/esnext.map.find.js';
import 'core-js/modules/esnext.map.find-key.js';
import 'core-js/modules/esnext.map.includes.js';
import 'core-js/modules/esnext.map.key-of.js';
import 'core-js/modules/esnext.map.map-keys.js';
import 'core-js/modules/esnext.map.map-values.js';
import 'core-js/modules/esnext.map.merge.js';
import 'core-js/modules/esnext.map.reduce.js';
import 'core-js/modules/esnext.map.some.js';
import 'core-js/modules/esnext.map.update.js';
import 'invariant';
import 'react-katex';
import 'remark-attr';
import remarkMacroBuilder from 'remark-macro';
import 'remark-math';
import 'remark-terms';
import 'remark-unwrap-images';
import flattenChildren from 'react-flatten-children';
import 'lodash';
import { menu } from '@milkdown/plugin-menu';

var styles$5 = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","--preview-line-clamp":"--neon-MarkdownPreview-lineClamp","root":"Markdown_root__695gl","isLimited":"Markdown_isLimited__xgR9e","em":"Markdown_em__LvLWP","image":"Markdown_image__UIwav","li":"Markdown_li__dfK-w","table":"Markdown_table__oXEPb","ol":"Markdown_ol__cLzz9","ul":"Markdown_ul__y1KUq","paragraph":"Markdown_paragraph__pGbU1","collapse":"Markdown_collapse__TKT9N","dragAndDrop":"Markdown_dragAndDrop__v2qCd","textPost":"Markdown_textPost__j0s2p","blockquote":"Markdown_blockquote__i5hqi","heading":"Markdown_heading__U-Dq2","h1":"Markdown_h1__TJkna","h2":"Markdown_h2__1frw3","h3":"Markdown_h3__Iumds","h4":"Markdown_h4__HRHaE","h5":"Markdown_h5__E9U58","h6":"Markdown_h6__tfCsr","tableWrapper":"Markdown_tableWrapper__ZMhFI","footnoteReference":"Markdown_footnoteReference__P-EMA","footnoteDefinition":"Markdown_footnoteDefinition__d8-p0","link":"Markdown_link__E06LB","panel":"Markdown_panel__KQWJ2","hr":"Markdown_hr__4xKX3","caption":"Markdown_caption__NHI88","preview":"Markdown_preview__DseIP","question":"Markdown_question__-tkNK","explanation":"Markdown_explanation__zujan","quizExplanation":"Markdown_quizExplanation__fcNPW","panelSlideDown":"Markdown_panelSlideDown__6xUTU"};

const fontFamilySystem = `system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"`;
const fontFamilies = Object.freeze({
    fontFamilyMonospace: 'monospace',
    fontFamilyRoot: `'sofia-pro', ${fontFamilySystem}`,
    fontFamilySystem
});

var rootPixelSizes = Object.freeze({
    rootPixelSizeNeon: 16,
    rootPixelSizeUserAgent: 16
});

const { rootPixelSizeNeon , rootPixelSizeUserAgent  } = rootPixelSizes;
const pxToRelativeUnit = (px, unit, root)=>`${Number((px / root).toFixed(3))}${unit}`
;
const pxToRem = (px)=>pxToRelativeUnit(px, 'rem', rootPixelSizeNeon)
;

const borderRadii = Object.freeze({
    borderRadiusNone: '0',
    borderRadiusSmall: pxToRem(3),
    borderRadiusRoot: pxToRem(5),
    borderRadiusLarge: pxToRem(10),
    borderRadiusLarge1X: pxToRem(20),
    borderRadiusCircle: '50%',
    borderRadiusLegacyButton: pxToRem(100)
});

const borderWidths = Object.freeze({
    borderWidthNone: '0',
    borderWidthRoot: '1px',
    borderWidthLarge: '2px',
    borderWidthLarge1X: '4px'
});

// @ts-ignore - expects a emotion style css obj not a styled component string
const mixin = (param)=>{
    let { palette , size  } = param;
    return {
        scrollbar: ()=>''
        ,
        shadow: ()=>''
        ,
        border: (direction)=>{
            if (!direction) {
                return css`
        border: ${size.lineWidth} solid ${palette('line')};
      `;
            }
            return css`
      ${`border-${direction}`}: ${size.lineWidth} solid ${palette('line')};
    `;
        }
    };
};

const shared = {
    colorCoreBlack: '#303338',
    colorCoreBrand: '#177cf9',
    colorInteractiveLink: '#066fef'
};
keyMirror({
    colorArcticIce: null,
    colorAtomiBlues: null,
    colorAwkwardOrchid: null,
    colorBlueSkies: null,
    colorFairyFloss: null,
    colorFiftyShades: null,
    colorGreenMonster: null,
    colorMadMagenta: null,
    colorMatchaLatte: null,
    colorOceanSwim: null,
    colorPurpleRain: null,
    colorStatusError: null,
    colorStatusSuccess: null,
    colorStatusWarning: null,
    colorStrawberryFields: null,
    colorSunnyArvo: null,
    colorTangerineTease: null
});
const colors = Object.freeze({
    // `null` values means product design are yet to define the colour
    // Core
    colorCoreBlack: shared.colorCoreBlack,
    colorCoreBrand: shared.colorCoreBrand,
    colorCoreText: shared.colorCoreBlack,
    colorCoreWhite: '#fff',
    // Interactive
    colorInteractiveFocusRing: shared.colorInteractiveLink,
    colorInteractiveLink: shared.colorInteractiveLink,
    colorInteractiveLinkHover: shared.colorCoreBlack,
    // Arctic ice
    colorArcticIceDark: '#007ea8',
    colorArcticIceDarker: '#006486',
    colorArcticIceDarkest: '#005172',
    colorArcticIceLight: null,
    colorArcticIceLighter: '#c1e9f4',
    colorArcticIceLightest: '#e7f6fa',
    colorArcticIceRoot: '#65cae4',
    // Atomi blues
    colorAtomiBluesDark: shared.colorInteractiveLink,
    colorAtomiBluesDarker: '#1a61ad',
    colorAtomiBluesDarkest: '#344563',
    colorAtomiBluesLight: '#9bc5f8',
    colorAtomiBluesLighter: '#d9e9fc',
    colorAtomiBluesLightest: '#f3f8ff',
    colorAtomiBluesRoot: shared.colorCoreBrand,
    // Awkward orchid
    colorAwkwardOrchidDark: '#935cbc',
    colorAwkwardOrchidDarker: '#804aad',
    colorAwkwardOrchidDarkest: '#6c3997',
    colorAwkwardOrchidLight: null,
    colorAwkwardOrchidLighter: '#e0caf0',
    colorAwkwardOrchidLightest: '#f3ebf9',
    colorAwkwardOrchidRoot: '#b27cda',
    // Blue skies
    colorBlueSkiesDark: null,
    colorBlueSkiesDarker: '#007aa3',
    colorBlueSkiesDarkest: '#006080',
    colorBlueSkiesLight: '#66caeb',
    colorBlueSkiesLighter: '#ceedf8',
    colorBlueSkiesLightest: '#e6f6fb',
    colorBlueSkiesRoot: '#00a7dd',
    // Fairy floss
    colorFairyFlossDark: null,
    colorFairyFlossDarker: '#d33c5f',
    colorFairyFlossDarkest: '#a8304c',
    colorFairyFlossLight: null,
    colorFairyFlossLighter: '#f6cfda',
    colorFairyFlossLightest: '#fbecf0',
    colorFairyFlossRoot: '#e988a3',
    // Fifty shades
    colorFiftyShadesDark: '#6e7680',
    colorFiftyShadesDarker: '#5b636c',
    colorFiftyShadesDarkest: shared.colorCoreBlack,
    colorFiftyShadesLight: '#bfc4cb',
    colorFiftyShadesLighter: '#e1e4e7',
    colorFiftyShadesLightest: '#f8fafb',
    colorFiftyShadesRoot: '#9ca3ac',
    // Green monster
    colorGreenMonsterDark: '#00a87e',
    colorGreenMonsterDarker: '#007a5c',
    colorGreenMonsterDarkest: '#00674a',
    colorGreenMonsterLight: null,
    colorGreenMonsterLighter: '#99ead6',
    colorGreenMonsterLightest: '#d8f7ef',
    colorGreenMonsterRoot: '#00cc99',
    // Mad magenta
    colorMadMagentaDark: null,
    colorMadMagentaDarker: '#a20059',
    colorMadMagentaDarkest: '#810047',
    colorMadMagentaLight: null,
    colorMadMagentaLighter: '#e6afcd',
    colorMadMagentaLightest: '#f5e1ec',
    colorMadMagentaRoot: '#c13883',
    // Matcha latte
    colorMatchaLatteDark: null,
    colorMatchaLatteDarker: '#88b05f',
    colorMatchaLatteDarkest: '#537f24',
    colorMatchaLatteLight: null,
    colorMatchaLatteLighter: '#e3f3d1',
    colorMatchaLatteLightest: '#f4faed',
    colorMatchaLatteRoot: '#bae191',
    // Ocean swim
    colorOceanSwimDark: null,
    colorOceanSwimDarker: '#007c85',
    colorOceanSwimDarkest: '#00636a',
    colorOceanSwimLight: null,
    colorOceanSwimLighter: '#99e9e7',
    colorOceanSwimLightest: '#d9f6f6',
    colorOceanSwimRoot: '#00c9c3',
    // Purple rain
    colorPurpleRainDark: null,
    colorPurpleRainDarker: '#48418b',
    colorPurpleRainDarkest: '#39346f',
    colorPurpleRainLight: null,
    colorPurpleRainLighter: '#c5badd',
    colorPurpleRainLightest: '#e9e5f2',
    colorPurpleRainRoot: '#6f54aa',
    // Status error
    colorStatusErrorDark: '#dd002f',
    colorStatusErrorDarker: '#c82626',
    colorStatusErrorDarkest: '#a01e1e',
    colorStatusErrorLight: null,
    colorStatusErrorLighter: '#ffbdbf',
    colorStatusErrorLightest: '#ffe5e6',
    colorStatusErrorRoot: '#ff5a5f',
    // Status success
    colorStatusSuccessDark: '#00A87E',
    colorStatusSuccessDarker: '#007A5C',
    colorStatusSuccessDarkest: '#00674A',
    colorStatusSuccessLight: null,
    colorStatusSuccessLighter: '#99EAD6',
    colorStatusSuccessLightest: '#D8F7EF',
    colorStatusSuccessRoot: '#00CC99',
    // Status warning
    colorStatusWarningDark: '#f86530',
    colorStatusWarningDarker: '#d43e08',
    colorStatusWarningDarkest: '#9d2e06',
    colorStatusWarningLight: null,
    colorStatusWarningLighter: '#fdd9cd',
    colorStatusWarningLightest: '#feece6',
    colorStatusWarningRoot: '#f9845b',
    // Strawberry fields
    colorStrawberryFieldsDark: '#dd002f',
    colorStrawberryFieldsDarker: '#c82626',
    colorStrawberryFieldsDarkest: '#a01e1e',
    colorStrawberryFieldsLight: null,
    colorStrawberryFieldsLighter: '#ffbdbf',
    colorStrawberryFieldsLightest: '#ffe5e6',
    colorStrawberryFieldsRoot: '#ff5a5f',
    // Sunny arvo
    colorSunnyArvoDark: '#fcb95b',
    colorSunnyArvoDarker: '#de935d',
    colorSunnyArvoDarkest: '#a76553',
    colorSunnyArvoLight: null,
    colorSunnyArvoLighter: '#feefc5',
    colorSunnyArvoLightest: '#fef9e9',
    colorSunnyArvoRoot: '#fed86f',
    // Tangerine tease
    colorTangerineTeaseDark: '#d43e08',
    colorTangerineTeaseDarker: '#bd4428',
    colorTangerineTeaseDarkest: '#622214',
    colorTangerineTeaseLight: null,
    colorTangerineTeaseLighter: '#fdd9cd',
    colorTangerineTeaseLightest: '#feece6',
    colorTangerineTeaseRoot: '#f9845b',
    // Transparency
    colorTransparent: 'transparent',
    colorWhiteTransparent20: '#FFFFFF20',
    colorWhiteTransparent40: '#FFFFFF40',
    colorWhiteTransparent70: '#FFFFFF70'
});

const color = {
    shadow: colors.colorFiftyShadesDarker,
    primary: colors.colorAtomiBluesRoot,
    secondary: colors.colorAtomiBluesRoot,
    neutral: colors.colorCoreText,
    solid: colors.colorCoreText,
    line: colors.colorFiftyShadesLighter,
    background: colors.colorFiftyShadesLighter,
    surface: colors.colorCoreWhite
};

var IconBold = "<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path d=\"M5.334 2v20M5.334 11.565h6.384c2.983 0 5.402-2.14 5.402-4.782C17.12 4.142 14.7 2 11.718 2H5.334M11.718 11.566h1.473c3.253 0 5.893 2.336 5.893 5.217S16.444 22 13.19 22H5.334\" stroke=\"currentColor\" stroke-miterlimit=\"10\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n</svg>";

var IconItalics = "<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path d=\"M14.595 2 9.389 22M2.76 22h13.254M7.967 2H21.22\" stroke=\"currentColor\" stroke-miterlimit=\"10\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n</svg>";

var IconOrderedList = "<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M6.5 3.997h17M6.5 11.997h17M6.5 19.997h17M2 5.997V2.07L.5 3.534M2.57 13.997H.5c1.48-2 2-1.836 2-2.963a.986.986 0 0 0-1-.982.948.948 0 0 0-.965.973M.5 17.997h1.931l-1 1.537c.826 0 1 .482 1 .982s-.174.981-1 .981H.5\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/></svg>";

var IconUnorderedList = "<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M4 4a2 2 0 1 1-4.001-.001A2 2 0 0 1 4 4Z\" fill=\"currentColor\"/>\n  <path d=\"M8 4h15\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n  <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M4 12a2 2 0 1 1-4.001-.001A2 2 0 0 1 4 12Z\" fill=\"currentColor\"/>\n  <path d=\"M8 12h15\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n  <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M4 20a2 2 0 1 1-4.001-.001A2 2 0 0 1 4 20Z\" fill=\"currentColor\"/>\n  <path d=\"M8 20h15\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n</svg>";

const iconMapping = {
    h1: {
        label: 'h1',
        icon: 'looks_one'
    },
    h2: {
        label: 'h2',
        icon: 'looks_two'
    },
    h3: {
        label: 'h3',
        icon: 'looks_3'
    },
    loading: {
        label: 'loading',
        icon: 'hourglass_empty'
    },
    quote: {
        label: 'quote',
        icon: 'format_quote'
    },
    code: {
        label: 'code',
        icon: 'code'
    },
    table: {
        label: 'table',
        icon: 'table_chart'
    },
    divider: {
        label: 'divider',
        icon: 'horizontal_rule'
    },
    image: {
        label: 'image',
        icon: 'image'
    },
    brokenImage: {
        label: 'brokenImage',
        icon: 'broken_image'
    },
    bulletList: {
        label: 'bulletList',
        icon: IconUnorderedList
    },
    orderedList: {
        label: 'orderedList',
        icon: IconOrderedList
    },
    taskList: {
        label: 'taskList',
        icon: 'checklist'
    },
    bold: {
        label: 'bold',
        icon: IconBold
    },
    italic: {
        label: 'italic',
        icon: IconItalics
    },
    inlineCode: {
        label: 'inlineCode',
        icon: 'code'
    },
    strikeThrough: {
        label: 'strikeThrough',
        icon: 'strikethrough_s'
    },
    link: {
        label: 'link',
        icon: 'link'
    },
    leftArrow: {
        label: 'leftArrow',
        icon: 'chevron_left'
    },
    rightArrow: {
        label: 'rightArrow',
        icon: 'chevron_right'
    },
    upArrow: {
        label: 'upArrow',
        icon: 'expand_less'
    },
    downArrow: {
        label: 'downArrow',
        icon: null
    },
    alignLeft: {
        label: 'alignLeft',
        icon: 'format_align_left'
    },
    alignRight: {
        label: 'alignRight',
        icon: 'format_align_right'
    },
    alignCenter: {
        label: 'alignCenter',
        icon: 'format_align_center'
    },
    delete: {
        label: 'delete',
        icon: 'delete'
    },
    select: {
        label: 'select',
        icon: 'select_all'
    },
    unchecked: {
        label: 'unchecked',
        icon: 'check_box_outline_blank'
    },
    checked: {
        label: 'checked',
        icon: 'check_box'
    },
    undo: {
        label: 'undo',
        icon: 'turn_left'
    },
    redo: {
        label: 'redo',
        icon: 'turn_right'
    },
    liftList: {
        label: 'liftList',
        icon: 'format_indent_increase'
    },
    sinkList: {
        label: 'sinkList',
        icon: 'format_indent_decrease'
    }
};
const slots = ()=>({
        icon: (id)=>{
            const span = document.createElement('span');
            span.setAttribute('title', iconMapping[id].label);
            span.className = 'icon';
            span.innerHTML = iconMapping[id].icon || '';
            return span;
        }
    })
;

const font = {
    typography: fontFamilies.fontFamilyRoot.split(','),
    code: fontFamilies.fontFamilyMonospace.split(',')
};
const size = {
    radius: borderRadii.borderRadiusRoot,
    lineWidth: borderWidths.borderWidthRoot
};
const atomiTheme = themeFactory(()=>({
        font,
        size,
        color,
        mixin,
        slots
    })
);

// keep sizes ordered from low to high (not alphabetically) since they are used in docs
const sizes = keyMirror({
    none: null,
    small2X: null,
    small1X: null,
    small: null,
    root: null,
    large: null,
    large1X: null,
    large2X: null,
    large3X: null,
    large4X: null,
    large5X: null,
    large6X: null,
    large7X: null,
    large8X: null,
    large9X: null
});
keyMirror({
    [sizes.small1X]: null,
    [sizes.small]: null,
    [sizes.root]: null,
    [sizes.large]: null
});
keyMirror({
    [sizes.small]: null
});
keyMirror({
    sizeSmall2X: null,
    sizeSmall1X: null,
    sizeSmall: null,
    sizeRoot: null,
    sizeLarge: null,
    sizeLarge1X: null,
    sizeFull: null
});
keyMirror({
    [sizes.small]: null
});
keyMirror({
    [sizes.small]: null
});
keyMirror({
    [sizes.small1X]: null,
    [sizes.small]: null,
    medium: null,
    [sizes.large]: null,
    [sizes.large1X]: null,
    [sizes.large2X]: null
});
keyMirror({
    small3X: null,
    [sizes.small2X]: null,
    [sizes.small1X]: null,
    [sizes.small]: null,
    [sizes.root]: null,
    [sizes.large]: null,
    [sizes.large1X]: null,
    [sizes.large2X]: null,
    [sizes.large3X]: null,
    [sizes.large4X]: null
});
keyMirror({
    [sizes.small1X]: null,
    [sizes.small]: null,
    [sizes.root]: null,
    [sizes.large]: null,
    [sizes.large1X]: null
});
keyMirror({
    [sizes.small]: null
});
const imageSizes = keyMirror({
    [sizes.small1X]: null,
    [sizes.small]: null,
    [sizes.root]: null,
    [sizes.large]: null
});
keyMirror({
    [sizes.large]: null
});
keyMirror({
    [sizes.small]: null
});
keyMirror({
    [sizes.small1X]: null,
    [sizes.small]: null
});
keyMirror({
    [sizes.large]: null
});
keyMirror({
    [sizes.large]: null
});
keyMirror({
    [sizes.large]: null
});

// Custom prop configurations not included in system-props
const customProps = {
    appearance: true,
    aspectRatio: true,
    columnGap: {
        property: 'columnGap',
        scale: 'space'
    },
    content: true,
    cursor: true,
    gap: {
        property: 'gap',
        scale: 'space'
    },
    marginBlock: {
        properties: [
            'marginTop',
            'marginBottom'
        ],
        scale: 'space'
    },
    marginInline: {
        properties: [
            'marginLeft',
            'marginRight'
        ],
        scale: 'space'
    },
    outlineColor: {
        property: 'outlineColor',
        scale: 'colors'
    },
    outlineOffset: {
        property: 'outlineOffset',
        scale: 'space'
    },
    outlineStyle: true,
    outlineWidth: {
        property: 'outlineWidth',
        scale: 'borderWidths'
    },
    paddingBlock: {
        properties: [
            'paddingTop',
            'paddingBottom'
        ],
        scale: 'space'
    },
    paddingInline: {
        properties: [
            'paddingLeft',
            'paddingRight'
        ],
        scale: 'space'
    },
    resize: true,
    rowGap: {
        property: 'rowGap',
        scale: 'space'
    },
    strokeWidth: true,
    textDecoration: true,
    textDecorationColor: true,
    textDecorationThickness: true,
    textIndent: {
        property: 'textIndent',
        scale: 'letterSpacings'
    },
    textOverflow: true,
    textTransform: true,
    transition: {
        property: 'transition',
        scale: 'transitions'
    },
    transform: true,
    visibility: true,
    whiteSpace: true
};
const customPseudoSelectors = {
    _title: '&[title]',
    _activeEnabled: '&:active:enabled'
};
const pseudoSelectors = {
    ...pseudoSelectors$1,
    ...customPseudoSelectors
};
// Custom shouldForwardProp function to filter out custom props so that they are
// not passed to the DOM
const shouldForwardProp = (prop)=>!Object.keys({
        ...customProps,
        ...customPseudoSelectors
    }).includes(prop) && shouldForwardProp$1(prop)
;
// Configure our system props
// https://system-props.com/docs/api-system
const system = createSystem({
    tokenPrefix: 'noprefix',
    pseudoSelectors
});
// Utility function to easily compose prop configurations
//  https://system-props.com/docs/api-prop-configurations
function compose() {
    for(var _len = arguments.length, configurations = new Array(_len), _key = 0; _key < _len; _key++){
        configurations[_key] = arguments[_key];
    }
    return system(Object.assign({}, ...configurations));
}

// Using shouldForwardProp to avoid styling props to be passed down to the HTML element
const StyledBox = styled.div.withConfig({
    shouldForwardProp
})(compose(border, color$1, customProps, flexbox, grid, layout, position, space, typography, {
    boxShadow: {
        property: 'boxShadow',
        scale: 'shadows'
    }
}));
const Box = /*#__PURE__*/ forwardRef(function Box(props, ref) {
    const { children , testHook , vars , ...otherProps } = props;
    return(// @ts-ignore styled-components adds "Non-standard Attribute" "color" of
    // value string | undefined which conflicts
    jsx(StyledBox, Object.assign({}, otherProps, {
        ref: ref,
        style: vars,
        "data-test": testHook
    }, {
        children: children
    }), void 0));
});

const SvgIconActionFlip = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxs("g", Object.assign({
                stroke: "currentColor",
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, {
                children: [
                    jsx("path", {
                        d: "M2 3.093V8.56h5.556"
                    }, void 0),
                    jsx("path", {
                        d: "M22 8.523C20.627 4.7 16.353 2 12 2S3.373 4.74 2 8.56M22 20.549v-5.467h-5.556"
                    }, void 0),
                    jsx("path", {
                        d: "M2 15.082c1.373 3.822 5.647 6.56 10 6.56s8.627-2.74 10-6.56"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$1r = /*#__PURE__*/ forwardRef(SvgIconActionFlip);

const SvgIconAlertError = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: [
                    jsx("circle", {
                        cx: 12,
                        cy: 12,
                        r: 11
                    }, void 0),
                    jsx("path", {
                        d: "M12.522 16.928a.522.522 0 1 1-1.044 0 .522.522 0 0 1 1.044 0ZM12 6v6.615"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$1q = /*#__PURE__*/ forwardRef(SvgIconAlertError);

const SvgIconAlertGeneral = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: jsx("path", {
                    d: "M3.667 1h7v4.333h11l-7.5 6 7.5 6h-15c0-2.25 4-4.333 4-4.333h-7V1ZM10.667 4v9M3.5.5v23"
                }, void 0)
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$1p = /*#__PURE__*/ forwardRef(SvgIconAlertGeneral);

const SvgIconAlertInfo = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: [
                    jsx("circle", {
                        cx: 12,
                        cy: 12,
                        r: 11
                    }, void 0),
                    jsx("path", {
                        d: "M12.522 5.928a.522.522 0 1 1-1.044 0 .522.522 0 0 1 1.044 0ZM12 11v6.615"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$1o = /*#__PURE__*/ forwardRef(SvgIconAlertInfo);

const SvgIconAlertSuccess = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxs("g", Object.assign({
                stroke: "currentColor",
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, {
                children: [
                    jsx("path", {
                        d: "m17.15 8.652-7.175 6.696-2.39-2.391"
                    }, void 0),
                    jsx("path", {
                        d: "M23 12c0 6.076-4.926 11-11 11-6.077 0-11-4.924-11-11S5.923 1 12 1c6.074 0 11 4.924 11 11h0Z"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$1n = /*#__PURE__*/ forwardRef(SvgIconAlertSuccess);

const SvgIconAlertWarning = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxs("g", Object.assign({
                stroke: "currentColor",
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, {
                children: [
                    jsx("path", {
                        d: "M12 16.493V8.507M23.478 23.478H.522L12 .522z"
                    }, void 0),
                    jsx("path", {
                        d: "M12.522 19.826a.522.522 0 0 1-.522.522h0a.522.522 0 0 1-.522-.522h0c0-.288.234-.522.522-.522h0c.288 0 .522.234.522.522h0Z"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$1m = /*#__PURE__*/ forwardRef(SvgIconAlertWarning);

const SvgIconArrowBack = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: jsx("path", {
                    d: "M2 12h21M7 6l-6 6 6 6"
                }, void 0)
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$1l = /*#__PURE__*/ forwardRef(SvgIconArrowBack);

const SvgIconArrowDown = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: jsx("path", {
                    d: "m18 15-6 7-6-7M12 21.5V2.481"
                }, void 0)
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$1k = /*#__PURE__*/ forwardRef(SvgIconArrowDown);

const SvgIconArrowFront = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("g", Object.assign({
                stroke: "currentColor",
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, {
                children: jsx("path", {
                    d: "M22 12H1M17 18l6-6-6-6"
                }, void 0)
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$1j = /*#__PURE__*/ forwardRef(SvgIconArrowFront);

const SvgIconArrowUp = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: jsx("path", {
                    d: "m18 9-6-7-6 7M12 21.772V2.6"
                }, void 0)
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$1i = /*#__PURE__*/ forwardRef(SvgIconArrowUp);

const SvgIconAtom = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxs("g", Object.assign({
                stroke: "currentColor",
                fill: "none",
                fillRule: "evenodd"
            }, {
                children: [
                    jsx("path", {
                        d: "M14.828 4.222c1.563 4.296 1.563 11.26 0 15.556-1.562 4.296-4.094 4.296-5.656 0-1.563-4.296-1.563-11.26 0-15.556 1.562-4.296 4.094-4.296 5.656 0"
                    }, void 0),
                    jsx("path", {
                        d: "M20.012 9.924c-2.655 3.72-8.394 7.667-12.819 8.814-4.424 1.147-5.86-.94-3.205-4.662 2.655-3.72 8.394-7.667 12.819-8.814 4.424-1.147 5.86.94 3.205 4.662"
                    }, void 0),
                    jsx("path", {
                        d: "M16.807 18.738C12.382 17.59 6.643 13.645 3.988 9.924c-2.654-3.722-1.22-5.809 3.205-4.662 4.425 1.147 10.164 5.093 12.819 8.814 2.654 3.722 1.22 5.809-3.205 4.662"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$1h = /*#__PURE__*/ forwardRef(SvgIconAtom);

const SvgIconAttachment = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("path", {
                d: "M9.5 17V9.5c0-1.656.843-3 2.5-3s2.5 1.344 2.5 3V19c0 2.486-1.515 4.5-4 4.5-2.485 0-4-2.014-4-4.5V6.5c0-3.314 2.187-6 5.5-6s5.5 2.686 5.5 6v9",
                stroke: "currentColor",
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$1g = /*#__PURE__*/ forwardRef(SvgIconAttachment);

const SvgIconAvatar = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxs("g", Object.assign({
                transform: "translate(1 1)",
                stroke: "currentColor",
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, {
                children: [
                    jsx("circle", {
                        cx: 11,
                        cy: 11,
                        r: 11
                    }, void 0),
                    jsx("path", {
                        d: "M17.875 11.917A6.874 6.874 0 0 1 11 18.792a6.874 6.874 0 0 1-6.875-6.875M5.042 9.167c0-2.423 3.666-2.426 3.666 0M16.958 9.167c0-2.423-3.666-2.426-3.666 0"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$1f = /*#__PURE__*/ forwardRef(SvgIconAvatar);

const SvgIconBadge = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: [
                    jsx("path", {
                        d: "M4.21 14.068.5 20.478l3.85-.66 1.33 3.66 3.28-5.52M19.672 14.157l3.66 6.32-3.86-.66-1.34 3.66-3.28-5.49"
                    }, void 0),
                    jsx("path", {
                        d: "M12 .5a9 9 0 1 0 0 18 9 9 0 0 0 0-18h0Z"
                    }, void 0),
                    jsx("path", {
                        d: "m12 4.5 1.5 3h3L14 10l1 3.5-3-1.88-3 1.87 1-3.5-2.5-2.5h3z"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$1e = /*#__PURE__*/ forwardRef(SvgIconBadge);

const SvgIconBinDelete = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("path", {
                clipRule: "evenodd",
                d: "M3.5 23.5h16v-20h-16v20ZM7.5 3.5h8v-3h-8v3Z",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0),
            jsx("path", {
                d: "M1 3.5h22M7.5 7v12M11.5 7v12M15.5 7v12",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$1d = /*#__PURE__*/ forwardRef(SvgIconBinDelete);

const SvgIconBlog = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: [
                    jsx("path", {
                        d: "m16 22.5-3.5 1 1-3.5 7.502-7.502 2.5 2.5L16 22.5Zm3-8 2.5 2.5m-8 3 2.5 2.5M3.48 6.5h4.5m-4.5 3h8m-8 3h6m-6 3h5M11 21.5H.5V.5h11l5 5v8"
                    }, void 0),
                    jsx("path", {
                        d: "M11.5.5v5h5"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$1c = /*#__PURE__*/ forwardRef(SvgIconBlog);

const SvgIconBold = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("path", {
                d: "M5.334 2v20m0-10.435h6.384c2.983 0 5.402-2.14 5.402-4.782C17.12 4.142 14.7 2 11.718 2H5.334m6.384 9.566h1.473c3.253 0 5.893 2.336 5.893 5.217S16.444 22 13.19 22H5.334",
                stroke: "currentColor",
                strokeMiterlimit: 10,
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$1b = /*#__PURE__*/ forwardRef(SvgIconBold);

const SvgIconBrowserAdd = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: [
                    jsx("path", {
                        d: "M.5 4.5h20M3.5 2c-.28 0-.5.22-.5.5 0 .27.22.5.5.5.27 0 .5-.23.5-.5 0-.28-.23-.5-.5-.5h0ZM5.5 2c-.28 0-.5.22-.5.5 0 .27.22.5.5.5.27 0 .5-.23.5-.5 0-.28-.23-.5-.5-.5h0ZM7.5 2c-.28 0-.5.22-.5.5 0 .27.22.5.5.5.27 0 .5-.23.5-.5 0-.28-.23-.5-.5-.5h0Z"
                    }, void 0),
                    jsx("path", {
                        d: "M8.5 16.5h-6c-1.104 0-2-.9-2-2v-12c0-1.104.89-2 2-2h16a2 2 0 0 1 2 2v6"
                    }, void 0),
                    jsx("path", {
                        d: "M17.5 11.5a6 6 0 1 0 0 12 6 6 0 0 0 0-12ZM15 17.5h5M17.5 20v-5"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$1a = /*#__PURE__*/ forwardRef(SvgIconBrowserAdd);

const SvgIconCalendarTick = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("path", {
                clipRule: "evenodd",
                d: "M23.5 17.5c0 3.315-2.686 6-6 6s-6-2.685-6-6a6 6 0 1 1 12 0v0Z",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0),
            jsx("path", {
                d: "m20.5 15.5-4 4-2-2M20.5 10V2.5h-4M4.5 2.5h-4v16h9",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0),
            jsx("path", {
                clipRule: "evenodd",
                d: "M4.5 4.5h3v-4h-3v4ZM13.5 4.5h3v-4h-3v4Z",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0),
            jsx("path", {
                d: "M7.5 2.5h6M.5 7.5h20",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$19 = /*#__PURE__*/ forwardRef(SvgIconCalendarTick);

const SvgIconCalendar = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxs("g", Object.assign({
                stroke: "currentColor",
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, {
                children: [
                    jsx("path", {
                        d: "M4.5 2.5h-4v21h23v-21h-4"
                    }, void 0),
                    jsx("path", {
                        d: "M5.5.5h3v6h-3zM15.5.5h3v6h-3zM.5 11.5h23M8.5 2.5h7M19 2.5h4.5M.75 2.5h4.5"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$18 = /*#__PURE__*/ forwardRef(SvgIconCalendar);

const SvgIconCheck = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("path", {
                stroke: "currentColor",
                d: "M22 5 8.667 19 2 12",
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$17 = /*#__PURE__*/ forwardRef(SvgIconCheck);

const SvgIconChevron = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("path", {
                stroke: "currentColor",
                d: "m0 6 12 12L24 6",
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$16 = /*#__PURE__*/ forwardRef(SvgIconChevron);

const SvgIconCircleCheck = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: [
                    jsx("path", {
                        strokeWidth: 1.5,
                        d: "m17 9-6.667 7L7 12.5"
                    }, void 0),
                    jsx("path", {
                        d: "M20.081 3.877c4.475 4.475 4.475 11.73 0 16.204-4.474 4.475-11.73 4.475-16.204 0-4.475-4.474-4.475-11.73 0-16.204 4.475-4.475 11.73-4.475 16.204 0"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$15 = /*#__PURE__*/ forwardRef(SvgIconCircleCheck);

const SvgIconCircleHelp = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                stroke: "currentColor"
            }, {
                children: [
                    jsx("circle", {
                        cx: 12,
                        cy: 12,
                        r: 11.478
                    }, void 0),
                    jsx("path", {
                        d: "M8.87 9.391a3.13 3.13 0 1 1 3.13 3.13v3.131M12.522 18.26a.522.522 0 1 1-1.044 0 .522.522 0 0 1 1.044 0Z"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$14 = /*#__PURE__*/ forwardRef(SvgIconCircleHelp);

const SvgIconCirclePlay = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: [
                    jsx("circle", {
                        cx: 12,
                        cy: 12,
                        r: 11
                    }, void 0),
                    jsx("path", {
                        d: "M9.5 16.5v-9l7 4.5z"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$13 = /*#__PURE__*/ forwardRef(SvgIconCirclePlay);

const SvgIconCirclePractice = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: [
                    jsx("circle", {
                        cx: 12,
                        cy: 12,
                        r: 11
                    }, void 0),
                    jsx("path", {
                        d: "M9.917 15.335 7 16.168l.833-2.916L14.085 7l2.083 2.083zM12.417 8.668l2.083 2.084M7.833 13.252l2.084 2.083M7 16.5h8"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$12 = /*#__PURE__*/ forwardRef(SvgIconCirclePractice);

const SvgIconCircleProgress = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("circle", {
                stroke: "currentColor",
                strokeWidth: 4,
                cx: 12,
                cy: 12,
                r: 10,
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$11 = /*#__PURE__*/ forwardRef(SvgIconCircleProgress);

const SvgIconCircleSolidCheck = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, {
                children: [
                    jsx("path", {
                        d: "M20.081 3.877c4.475 4.475 4.475 11.73 0 16.204-4.474 4.475-11.73 4.475-16.204 0-4.475-4.474-4.475-11.73 0-16.204 4.475-4.475 11.73-4.475 16.204 0",
                        stroke: "currentColor",
                        fill: "currentColor"
                    }, void 0),
                    jsx("path", {
                        stroke: "#FFF",
                        strokeWidth: 1.5,
                        d: "m17 9-6.667 7L7 12.5"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$10 = /*#__PURE__*/ forwardRef(SvgIconCircleSolidCheck);

const SvgIconCircleSolidCross = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd"
            }, {
                children: [
                    jsx("path", {
                        d: "M20.485 3.515c4.687 4.686 4.687 12.284 0 16.97-4.686 4.687-12.284 4.687-16.97 0-4.687-4.686-4.687-12.284 0-16.97 4.686-4.687 12.284-4.687 16.97 0",
                        stroke: "currentColor",
                        fill: "currentColor",
                        strokeLinecap: "round",
                        strokeLinejoin: "round"
                    }, void 0),
                    jsx("path", {
                        d: "M7.237 7.237a.81.81 0 0 0 0 1.144l8.382 8.382a.81.81 0 1 0 1.144-1.144L8.381 7.237a.81.81 0 0 0-1.144 0Z",
                        fill: "#FFF",
                        fillRule: "nonzero"
                    }, void 0),
                    jsx("path", {
                        d: "m15.619 7.237-8.382 8.382a.81.81 0 1 0 1.144 1.144l8.382-8.382a.81.81 0 1 0-1.144-1.144Z",
                        fill: "#FFF",
                        fillRule: "nonzero"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$$ = /*#__PURE__*/ forwardRef(SvgIconCircleSolidCross);

const SvgIconCircleStar = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: [
                    jsx("circle", {
                        cx: 12,
                        cy: 12,
                        r: 12
                    }, void 0),
                    jsx("path", {
                        d: "m11.792 7 1.25 3.333h3.541l-2.916 2.5 1.25 3.75-3.125-2.291-3.125 2.291 1.25-3.75L7 10.333h3.542z"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$_ = /*#__PURE__*/ forwardRef(SvgIconCircleStar);

const SvgIconCircleText = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: [
                    jsx("circle", {
                        cx: 12,
                        cy: 12,
                        r: 11
                    }, void 0),
                    jsx("path", {
                        d: "M8 7.5h5M8 10.5h9M8 13.5h9M8 16.5h9"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$Z = /*#__PURE__*/ forwardRef(SvgIconCircleText);

const SvgIconClassStudents = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 16 16",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("path", {
                clipRule: "evenodd",
                d: "M5.398 13.478h4.834v-2.87c0-.318-1.913-1.275-3.507-1.912V7.42s.637-.223.637-1.594c.444 0 .638-1.275.02-1.275 0-.135.49-.834.3-1.594-.32-1.276-3.508-1.276-3.827 0-1.342-.275-.319 1.41-.319 1.594-.637 0-.444 1.275 0 1.275 0 1.371.638 1.594.638 1.594v1.276C2.58 9.333.667 10.29.667 10.609v2.87h4.73Z",
                stroke: "currentColor",
                strokeLinejoin: "round"
            }, void 0),
            jsx("path", {
                d: "M11.826 13.478h3.507v-2.87c0-.318-1.594-.765-2.87-1.275v-.956s.638-.179.638-1.276c.356 0 .494-1.275 0-1.275 0-.108.518-.68.32-1.275-.32-.957-2.87-.957-3.19 0-1.074-.22-.318 1.128-.318 1.275-.51 0-.355 1.275 0 1.275 0 1.097.638 1.276.638 1.276v.638",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$Y = /*#__PURE__*/ forwardRef(SvgIconClassStudents);

const SvgIconClass = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: [
                    jsx("path", {
                        d: "M6.5 2.5a3.5 3.5 0 1 0 0 7 3.5 3.5 0 0 0 0-7h0ZM12 11.5H1c0 4.06 1.64 6.442 3.5 7.5v4.5h4V19c1.85-1.06 3.5-3.44 3.5-7.5Z"
                    }, void 0),
                    jsx("path", {
                        d: "M7 11.5H6l-.5 6 1 1 1-1zM14.51 5.003v5.5h5"
                    }, void 0),
                    jsx("path", {
                        d: "M11.057.966c.92-.31 1.91-.47 2.94-.47 5.23 0 9.479 4.244 9.479 9.47 0 5.234-4.244 9.47-9.48 9.47"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$X = /*#__PURE__*/ forwardRef(SvgIconClass);

const SvgIconClose = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("g", Object.assign({
                stroke: "currentColor",
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, {
                children: jsx("path", {
                    d: "M22.542 1.458 1.458 22.542M22.542 22.542 1.458 1.458"
                }, void 0)
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$W = /*#__PURE__*/ forwardRef(SvgIconClose);

const SvgIconCopy = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: [
                    jsx("path", {
                        d: "M7 5V1h16v18h-6"
                    }, void 0),
                    jsx("path", {
                        d: "M1 5h16v18H1z"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$V = /*#__PURE__*/ forwardRef(SvgIconCopy);

const SvgIconCross = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("g", Object.assign({
                stroke: "currentColor",
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, {
                children: jsx("path", {
                    d: "M20 4 4 20M20 20 4 4"
                }, void 0)
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$U = /*#__PURE__*/ forwardRef(SvgIconCross);

const SvgIconCustomers = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: [
                    jsx("path", {
                        d: "M12.489 13.259 10 12.367v-2.045M6 10.322v2.045l-3.941 1.412A2.36 2.36 0 0 0 .5 16.012V17.5h12"
                    }, void 0),
                    jsx("path", {
                        d: "M10.791 2.884c1.541 1.851 1.541 4.853 0 6.704-1.541 1.85-4.04 1.85-5.582 0-1.541-1.851-1.541-4.853 0-6.704 1.542-1.85 4.04-1.85 5.582 0M14.5 1.5c2.18 0 3.947 2.121 3.947 4.736 0 2.617-1.768 4.74-3.947 4.74m2 1.524v-2.18M14.5 20.5h3V23l2.5-2.5h3.5v-6h-9v6Zm2-4h5m-5 2H20"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$T = /*#__PURE__*/ forwardRef(SvgIconCustomers);

const SvgIconDownload = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("g", Object.assign({
                clipPath: "url(#icon-download_svg__a)",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, {
                children: jsx("path", {
                    d: "M23 18.217v1.913A2.87 2.87 0 0 1 20.131 23H3.869A2.869 2.869 0 0 1 1 20.13v-1.913M12 18.108V1M19 11.108l-7 7-7-7"
                }, void 0)
            }), void 0),
            jsx("defs", {
                children: jsx("clipPath", Object.assign({
                    id: "icon-download_svg__a"
                }, {
                    children: jsx("path", {
                        fill: "currentColor",
                        d: "M0 0h24v24H0z"
                    }, void 0)
                }), void 0)
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$S = /*#__PURE__*/ forwardRef(SvgIconDownload);

const SvgIconDrag = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("path", {
                d: "M9 21c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2ZM7 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2Zm0-9c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2Zm10 4c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2Zm0 5c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2Zm0 9c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2Z",
                stroke: "currentColor",
                fill: "currentColor",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$R = /*#__PURE__*/ forwardRef(SvgIconDrag);

const SvgIconDrive = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd"
            }, {
                children: [
                    jsx("path", {
                        fill: "#3777E3",
                        d: "m4 22.5 4-7h16l-4 7z"
                    }, void 0),
                    jsx("path", {
                        fill: "#FFCF63",
                        d: "M16 15.5h8l-8-14H8z"
                    }, void 0),
                    jsx("path", {
                        fill: "#11A861",
                        d: "m0 15.5 4 7 8-14-4-7z"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$Q = /*#__PURE__*/ forwardRef(SvgIconDrive);

const SvgIconDuplicate = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("path", {
                d: "M1 23V5.125h10.313l5.5 6.188V23H1Z",
                stroke: "currentColor",
                strokeLinejoin: "round"
            }, void 0),
            jsx("path", {
                d: "M11.313 5.125v6.188h5.5M17.5 1v6.188H23",
                stroke: "currentColor",
                strokeLinejoin: "round"
            }, void 0),
            jsx("path", {
                d: "M7.188 5.438V1h10.106L23 7.188v11.687h-6.5",
                stroke: "currentColor",
                strokeLinejoin: "round"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$P = /*#__PURE__*/ forwardRef(SvgIconDuplicate);

const SvgIconDuration = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: [
                    jsx("circle", {
                        cx: 12,
                        cy: 14,
                        r: 9.5
                    }, void 0),
                    jsx("path", {
                        d: "M9 .5h6M18.717 7.283 20.5 5.5M10.5 4.547V.5h3v4.047M20 5l1 1M12 14 7.5 9.5"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$O = /*#__PURE__*/ forwardRef(SvgIconDuration);

const SvgIconEdit = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("path", {
                clipRule: "evenodd",
                d: "M7.417 19.338 1 21.172l1.833-6.417L15.881 1.707a1 1 0 0 1 1.414 0l3.17 3.17a1 1 0 0 1 0 1.414L7.417 19.338Z",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0),
            jsx("path", {
                d: "m12.918 4.67 4.584 4.584M2.833 14.755l4.584 4.584M1 21.901h22",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$N = /*#__PURE__*/ forwardRef(SvgIconEdit);

const SvgIconExtendedResponse = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: jsx("path", {
                    d: "m15.52 21.5-3.5 1 1-3.5 7.502-7.502 2.5 2.5L15.52 21.5Zm3-8 2.5 2.5m-8 3 2.5 2.5M0 1.5h24M0 6.5h24M0 16.5h10M0 21.5h8M0 11.5h14"
                }, void 0)
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$M = /*#__PURE__*/ forwardRef(SvgIconExtendedResponse);

const SvgIconFileDoc = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 512 512",
        xmlSpace: "preserve",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("path", {
                style: {
                    fill: '#e2e5e7'
                },
                d: "M128 0c-17.6 0-32 14.4-32 32v448c0 17.6 14.4 32 32 32h320c17.6 0 32-14.4 32-32V128L352 0H128z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#b0b7bd'
                },
                d: "M384 128h96L352 0v96c0 17.6 14.4 32 32 32z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "m480 224-96-96h96z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#50bee8'
                },
                d: "M416 416c0 8.8-7.2 16-16 16H48c-8.8 0-16-7.2-16-16V256c0-8.8 7.2-16 16-16h352c8.8 0 16 7.2 16 16v160z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#fff'
                },
                d: "M92.576 384c-4.224 0-8.832-2.32-8.832-7.936v-72.656c0-4.608 4.608-7.936 8.832-7.936h29.296c58.464 0 57.168 88.528 1.136 88.528H92.576zm8.064-72.928v57.312h21.232c34.544 0 36.064-57.312 0-57.312H100.64zM228 385.28c-23.664 1.024-48.24-14.72-48.24-46.064 0-31.472 24.56-46.944 48.24-46.944 22.384 1.136 45.792 16.624 45.792 46.944 0 30.336-23.408 46.064-45.792 46.064zm-1.408-76.368c-14.336 0-29.936 10.112-29.936 30.32 0 20.096 15.616 30.336 29.936 30.336 14.72 0 30.448-10.24 30.448-30.336 0-20.224-15.728-30.32-30.448-30.32zM288.848 339.088c0-24.688 15.488-45.92 44.912-45.92 11.136 0 19.968 3.328 29.296 11.392 3.456 3.184 3.84 8.816.384 12.4-3.456 3.056-8.704 2.688-11.776-.384-5.232-5.504-10.608-7.024-17.904-7.024-19.696 0-29.152 13.952-29.152 29.552 0 15.872 9.328 30.448 29.152 30.448 7.296 0 14.08-2.96 19.968-8.192 3.952-3.072 9.456-1.552 11.76 1.536 2.048 2.816 3.056 7.552-1.408 12.016-8.96 8.336-19.696 10-30.336 10-30.944 0-44.896-21.136-44.896-45.824z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "M400 432H96v16h304c8.8 0 16-7.2 16-16v-16c0 8.8-7.2 16-16 16z"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$L = /*#__PURE__*/ forwardRef(SvgIconFileDoc);

const SvgIconFileEps = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 512 512",
        xmlSpace: "preserve",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("path", {
                style: {
                    fill: '#e2e5e7'
                },
                d: "M128 0c-17.6 0-32 14.4-32 32v448c0 17.6 14.4 32 32 32h320c17.6 0 32-14.4 32-32V128L352 0H128z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#b0b7bd'
                },
                d: "M384 128h96L352 0v96c0 17.6 14.4 32 32 32z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "m480 224-96-96h96z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#f7b84e'
                },
                d: "M416 416c0 8.8-7.2 16-16 16H48c-8.8 0-16-7.2-16-16V256c0-8.8 7.2-16 16-16h352c8.8 0 16 7.2 16 16v160z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#fff'
                },
                d: "M116.608 384c-4.48 0-7.936-3.456-7.936-7.936v-72.656c0-4.608 3.456-7.936 7.936-7.936h45.92c11.776 0 11.52 16.624 0 16.624h-36.832v19.2h32.24c11.376 0 11.376 16.768 0 16.768h-32.24v19.184h39.024c11.648 0 12.528 16.752 0 16.752h-48.112zM190.48 303.152c0-4.224 3.328-8.848 8.704-8.848h29.552c16.64 0 31.616 11.136 31.616 32.496 0 20.224-14.976 31.472-31.616 31.472h-21.36v16.896c0 5.648-3.584 8.832-8.192 8.832-4.224 0-8.704-3.184-8.704-8.832v-72.016zm16.896 7.28v31.856h21.36c8.576 0 15.36-7.552 15.36-15.488 0-8.96-6.784-16.368-15.36-16.368h-21.36zM274.8 314.656c2.944-24.816 40.416-29.28 58.08-15.712 8.704 7.024-.512 18.16-8.192 12.528-9.472-6.016-30.96-8.832-33.648 4.464-3.456 20.992 52.192 8.976 51.296 42.992-.896 32.496-47.968 33.264-65.632 18.672-4.224-3.44-4.096-9.056-1.792-12.528 3.328-3.312 7.024-4.464 11.392-.896 10.48 7.168 37.488 12.544 39.408-5.648-1.664-18.912-54.88-7.52-50.912-43.872z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "M400 432H96v16h304c8.8 0 16-7.2 16-16v-16c0 8.8-7.2 16-16 16z"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$K = /*#__PURE__*/ forwardRef(SvgIconFileEps);

const SvgIconFileGif = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 512 512",
        xmlSpace: "preserve",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("path", {
                style: {
                    fill: '#e2e5e7'
                },
                d: "M128 0c-17.6 0-32 14.4-32 32v448c0 17.6 14.4 32 32 32h320c17.6 0 32-14.4 32-32V128L352 0H128z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#b0b7bd'
                },
                d: "M384 128h96L352 0v96c0 17.6 14.4 32 32 32z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "m480 224-96-96h96z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#a066aa'
                },
                d: "M416 416c0 8.8-7.2 16-16 16H48c-8.8 0-16-7.2-16-16V256c0-8.8 7.2-16 16-16h352c8.8 0 16 7.2 16 16v160z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#fff'
                },
                d: "M199.84 374.16c-9.088 7.536-20.224 10.752-31.472 10.752-26.88 0-45.936-15.36-45.936-45.808 0-25.84 20.096-45.92 47.072-45.92 10.112 0 21.232 3.456 29.168 11.264 7.808 7.664-3.456 19.056-11.12 12.288-4.736-4.624-11.392-8.064-18.048-8.064-15.472 0-30.432 12.4-30.432 30.432 0 18.944 12.528 30.448 29.296 30.448 7.792 0 14.448-2.304 19.184-5.76V348.08h-19.184c-11.392 0-10.24-15.632 0-15.632h25.584c4.736 0 9.072 3.6 9.072 7.568v27.248c0 2.288-1.008 4.448-3.184 6.896zM224.944 303.152c0-10.496 16.896-10.88 16.896 0v73.024c0 10.624-16.896 10.88-16.896 0v-73.024zM281.12 312.096v20.336h32.608c4.608 0 9.216 4.608 9.216 9.088 0 4.224-4.608 7.664-9.216 7.664H281.12v26.864c0 4.48-3.2 7.936-7.68 7.936-5.632 0-9.072-3.456-9.072-7.936v-72.656c0-4.608 3.456-7.936 9.072-7.936h44.912c5.632 0 8.96 3.328 8.96 7.936 0 4.096-3.328 8.688-8.96 8.688H281.12v.016z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "M400 432H96v16h304c8.8 0 16-7.2 16-16v-16c0 8.8-7.2 16-16 16z"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$J = /*#__PURE__*/ forwardRef(SvgIconFileGif);

const SvgIconFileJpg = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 512 512",
        xmlSpace: "preserve",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("path", {
                style: {
                    fill: '#e2e5e7'
                },
                d: "M128 0c-17.6 0-32 14.4-32 32v448c0 17.6 14.4 32 32 32h320c17.6 0 32-14.4 32-32V128L352 0H128z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#b0b7bd'
                },
                d: "M384 128h96L352 0v96c0 17.6 14.4 32 32 32z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "m480 224-96-96h96z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#50bee8'
                },
                d: "M416 416c0 8.8-7.2 16-16 16H48c-8.8 0-16-7.2-16-16V256c0-8.8 7.2-16 16-16h352c8.8 0 16 7.2 16 16v160z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#fff'
                },
                d: "M141.968 303.152c0-10.752 16.896-10.752 16.896 0v50.528c0 20.096-9.6 32.256-31.728 32.256-10.88 0-19.952-2.96-27.888-13.184-6.528-7.808 5.76-19.056 12.416-10.88 5.376 6.656 11.136 8.192 16.752 7.936 7.152-.256 13.44-3.472 13.568-16.128v-50.528h-.016zM181.344 303.152c0-4.224 3.328-8.832 8.704-8.832H219.6c16.64 0 31.616 11.136 31.616 32.48 0 20.224-14.976 31.488-31.616 31.488h-21.36v16.896c0 5.632-3.584 8.816-8.192 8.816-4.224 0-8.704-3.184-8.704-8.816v-72.032zm16.896 7.28v31.872h21.36c8.576 0 15.36-7.568 15.36-15.504 0-8.944-6.784-16.368-15.36-16.368h-21.36zM342.576 374.16c-9.088 7.552-20.224 10.752-31.472 10.752-26.88 0-45.936-15.344-45.936-45.808 0-25.824 20.096-45.904 47.072-45.904 10.112 0 21.232 3.44 29.168 11.248 7.792 7.664-3.456 19.056-11.12 12.288-4.736-4.608-11.392-8.064-18.048-8.064-15.472 0-30.432 12.4-30.432 30.432 0 18.944 12.528 30.464 29.296 30.464 7.792 0 14.448-2.32 19.184-5.76V348.08h-19.184c-11.392 0-10.24-15.616 0-15.616h25.584c4.736 0 9.072 3.584 9.072 7.552v27.248c0 2.304-1.008 4.448-3.184 6.896z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "M400 432H96v16h304c8.8 0 16-7.2 16-16v-16c0 8.8-7.2 16-16 16z"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$I = /*#__PURE__*/ forwardRef(SvgIconFileJpg);

const SvgIconFileMov = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 512 512",
        xmlSpace: "preserve",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("path", {
                style: {
                    fill: '#e2e5e7'
                },
                d: "M128 0c-17.6 0-32 14.4-32 32v448c0 17.6 14.4 32 32 32h320c17.6 0 32-14.4 32-32V128L352 0H128z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#b0b7bd'
                },
                d: "M384 128h96L352 0v96c0 17.6 14.4 32 32 32z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "m480 224-96-96h96z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#50bee8'
                },
                d: "M416 416c0 8.8-7.2 16-16 16H48c-8.8 0-16-7.2-16-16V256c0-8.8 7.2-16 16-16h352c8.8 0 16 7.2 16 16v160z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#fff'
                },
                d: "M96.928 327.84v47.328c0 5.648-4.608 8.832-9.216 8.832-4.096 0-7.68-3.184-7.68-8.832v-72.016c0-6.656 5.632-8.848 7.68-8.848 3.696 0 5.872 2.192 8.064 4.624l28.128 37.984 29.168-39.408c4.24-5.232 14.592-3.2 14.592 5.648v72.016c0 5.648-3.568 8.832-7.664 8.832-4.608 0-8.192-3.184-8.192-8.832V327.84l-21.248 26.864c-4.592 5.648-10.352 5.648-14.576 0L96.928 327.84zM234.096 385.28c-23.664 1.024-48.24-14.72-48.24-46.064 0-31.472 24.56-46.944 48.24-46.944 22.384 1.136 45.792 16.624 45.792 46.944 0 30.336-23.408 46.064-45.792 46.064zm-1.408-76.368c-14.336 0-29.936 10.112-29.936 30.32 0 20.096 15.616 30.336 29.936 30.336 14.72 0 30.448-10.24 30.448-30.336 0-20.224-15.728-30.32-30.448-30.32zM323.664 378.256l-33.776-70.752c-4.992-10.112 10.112-18.416 15.728-7.808l11.392 25.712 14.704 33.776 14.448-33.776 11.392-25.712c5.12-9.712 19.952-3.584 15.616 7.04l-32.624 71.52c-2.944 8.064-12.032 9.968-16.88 0z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "M400 432H96v16h304c8.8 0 16-7.2 16-16v-16c0 8.8-7.2 16-16 16z"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$H = /*#__PURE__*/ forwardRef(SvgIconFileMov);

const SvgIconFileMp3 = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 512 512",
        xmlSpace: "preserve",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("path", {
                style: {
                    fill: '#e2e5e7'
                },
                d: "M128 0c-17.6 0-32 14.4-32 32v448c0 17.616 14.4 32 32 32h320c17.6 0 32-14.384 32-32V128L352 0H128z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#b0b7bd'
                },
                d: "M384 128h96L352 0v96c0 17.6 14.4 32 32 32z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "m480 224-96-96h96z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#50bee8'
                },
                d: "M416 416c0 8.8-7.2 16-16 16H48c-8.8 0-16-7.2-16-16V256c0-8.8 7.2-16 16-16h352c8.8 0 16 7.2 16 16v160z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#fff'
                },
                d: "M117.184 327.84v47.344c0 5.632-4.592 8.832-9.216 8.832-4.096 0-7.664-3.2-7.664-8.832v-72.032c0-6.64 5.632-8.832 7.664-8.832 3.712 0 5.888 2.192 8.064 4.608l28.16 38 29.152-39.408c4.24-5.248 14.592-3.2 14.592 5.632v72.032c0 5.632-3.6 8.832-7.68 8.832-4.592 0-8.192-3.2-8.192-8.832V327.84l-21.232 26.88c-4.592 5.632-10.352 5.632-14.576 0l-19.072-26.88zM210.288 303.152c0-4.224 3.328-8.832 8.704-8.832h29.552c16.64 0 31.616 11.136 31.616 32.496 0 20.224-14.976 31.472-31.616 31.472h-21.36v16.896c0 5.632-3.584 8.832-8.192 8.832-4.224 0-8.704-3.2-8.704-8.832v-72.032zm16.88 7.296v31.856h21.36c8.576 0 15.36-7.552 15.36-15.488 0-8.96-6.784-16.368-15.36-16.368h-21.36zM322.064 311.472h-21.872c-10.736 0-10.096-15.984 0-15.984h39.152c7.792 0 11.376 8.96 5.632 14.72l-21.232 19.824c15.616-1.152 27.888 10.48 27.888 24.816 0 15.728-11.136 29.168-34.544 29.168-10.24 0-20.336-4.224-26.224-13.44-6.144-9.072 7.024-17.776 13.936-8.832 3.328 4.352 8.704 6.528 14.448 6.528 7.808 0 15.488-3.328 15.488-13.44 0-13.296-16.256-11.248-25.072-10.352-10.752 2.048-13.936-9.6-7.664-14.448l20.064-18.56z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "M400 432H96v16h304c8.8 0 16-7.2 16-16v-16c0 8.8-7.2 16-16 16z"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$G = /*#__PURE__*/ forwardRef(SvgIconFileMp3);

const SvgIconFilePdf = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 512 512",
        xmlSpace: "preserve",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("path", {
                style: {
                    fill: '#e2e5e7'
                },
                d: "M128 0c-17.6 0-32 14.4-32 32v448c0 17.6 14.4 32 32 32h320c17.6 0 32-14.4 32-32V128L352 0H128z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#b0b7bd'
                },
                d: "M384 128h96L352 0v96c0 17.6 14.4 32 32 32z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "m480 224-96-96h96z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#f15642'
                },
                d: "M416 416c0 8.8-7.2 16-16 16H48c-8.8 0-16-7.2-16-16V256c0-8.8 7.2-16 16-16h352c8.8 0 16 7.2 16 16v160z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#fff'
                },
                d: "M101.744 303.152c0-4.224 3.328-8.832 8.688-8.832h29.552c16.64 0 31.616 11.136 31.616 32.48 0 20.224-14.976 31.488-31.616 31.488h-21.36v16.896c0 5.632-3.584 8.816-8.192 8.816-4.224 0-8.688-3.184-8.688-8.816v-72.032zm16.88 7.28v31.872h21.36c8.576 0 15.36-7.568 15.36-15.504 0-8.944-6.784-16.368-15.36-16.368h-21.36zM196.656 384c-4.224 0-8.832-2.304-8.832-7.92v-72.672c0-4.592 4.608-7.936 8.832-7.936h29.296c58.464 0 57.184 88.528 1.152 88.528h-30.448zm8.064-72.912V368.4h21.232c34.544 0 36.08-57.312 0-57.312H204.72zM303.872 312.112v20.336h32.624c4.608 0 9.216 4.608 9.216 9.072 0 4.224-4.608 7.68-9.216 7.68h-32.624v26.864c0 4.48-3.184 7.92-7.664 7.92-5.632 0-9.072-3.44-9.072-7.92v-72.672c0-4.592 3.456-7.936 9.072-7.936h44.912c5.632 0 8.96 3.344 8.96 7.936 0 4.096-3.328 8.704-8.96 8.704h-37.248v.016z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "M400 432H96v16h304c8.8 0 16-7.2 16-16v-16c0 8.8-7.2 16-16 16z"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$F = /*#__PURE__*/ forwardRef(SvgIconFilePdf);

const SvgIconFilePng = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 512 512",
        xmlSpace: "preserve",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("path", {
                style: {
                    fill: '#e2e5e7'
                },
                d: "M128 0c-17.6 0-32 14.4-32 32v448c0 17.6 14.4 32 32 32h320c17.6 0 32-14.4 32-32V128L352 0H128z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#b0b7bd'
                },
                d: "M384 128h96L352 0v96c0 17.6 14.4 32 32 32z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "m480 224-96-96h96z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#a066aa'
                },
                d: "M416 416c0 8.8-7.2 16-16 16H48c-8.8 0-16-7.2-16-16V256c0-8.8 7.2-16 16-16h352c8.8 0 16 7.2 16 16v160z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#fff'
                },
                d: "M92.816 303.152c0-4.224 3.312-8.848 8.688-8.848h29.568c16.624 0 31.6 11.136 31.6 32.496 0 20.224-14.976 31.472-31.6 31.472H109.68v16.896c0 5.648-3.552 8.832-8.176 8.832-4.224 0-8.688-3.184-8.688-8.832v-72.016zm16.864 7.28v31.856h21.376c8.56 0 15.344-7.552 15.344-15.488 0-8.96-6.784-16.368-15.344-16.368H109.68zM178.976 304.432c0-4.624 1.024-9.088 7.68-9.088 4.592 0 5.632 1.152 9.072 4.464l42.336 52.976v-49.632c0-4.224 3.696-8.848 8.064-8.848 4.608 0 9.072 4.624 9.072 8.848v72.016c0 5.648-3.456 7.792-6.784 8.832-4.464 0-6.656-1.024-10.352-4.464l-42.336-53.744v49.392c0 5.648-3.456 8.832-8.064 8.832s-8.704-3.184-8.704-8.832v-70.752h.016zM351.44 374.16c-9.088 7.536-20.224 10.752-31.472 10.752-26.88 0-45.936-15.36-45.936-45.808 0-25.84 20.096-45.92 47.072-45.92 10.112 0 21.232 3.456 29.168 11.264 7.808 7.664-3.456 19.056-11.12 12.288-4.736-4.624-11.392-8.064-18.048-8.064-15.472 0-30.432 12.4-30.432 30.432 0 18.944 12.528 30.448 29.296 30.448 7.792 0 14.448-2.304 19.184-5.76V348.08h-19.184c-11.392 0-10.24-15.632 0-15.632h25.584c4.736 0 9.072 3.6 9.072 7.568v27.248c0 2.288-1.008 4.448-3.184 6.896z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "M400 432H96v16h304c8.8 0 16-7.2 16-16v-16c0 8.8-7.2 16-16 16z"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$E = /*#__PURE__*/ forwardRef(SvgIconFilePng);

const SvgIconFilePpt = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 512 512",
        xmlSpace: "preserve",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("path", {
                style: {
                    fill: '#e2e5e7'
                },
                d: "M128 0c-17.6 0-32 14.4-32 32v448c0 17.6 14.4 32 32 32h320c17.6 0 32-14.4 32-32V128L352 0H128z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#b0b7bd'
                },
                d: "M384 128h96L352 0v96c0 17.6 14.4 32 32 32z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "m480 224-96-96h96z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#f15642'
                },
                d: "M416 416c0 8.8-7.2 16-16 16H48c-8.8 0-16-7.2-16-16V256c0-8.8 7.2-16 16-16h352c8.8 0 16 7.2 16 16v160z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#fff'
                },
                d: "M105.456 303.152c0-4.224 3.328-8.832 8.688-8.832h29.552c16.64 0 31.616 11.136 31.616 32.48 0 20.224-14.976 31.488-31.616 31.488h-21.36v16.896c0 5.632-3.568 8.816-8.176 8.816-4.224 0-8.688-3.184-8.688-8.816v-72.032h-.016zm16.88 7.28v31.872h21.36c8.576 0 15.36-7.568 15.36-15.504 0-8.944-6.784-16.368-15.36-16.368h-21.36zM191.616 303.152c0-4.224 3.328-8.832 8.704-8.832h29.552c16.64 0 31.616 11.136 31.616 32.48 0 20.224-14.976 31.488-31.616 31.488h-21.36v16.896c0 5.632-3.584 8.816-8.192 8.816-4.224 0-8.704-3.184-8.704-8.816v-72.032zm16.88 7.28v31.872h21.36c8.576 0 15.36-7.568 15.36-15.504 0-8.944-6.784-16.368-15.36-16.368h-21.36zM301.68 311.472h-22.368c-11.136 0-11.136-16.368 0-16.368h60.496c11.392 0 11.392 16.368 0 16.368h-21.232v64.608c0 11.12-16.896 11.392-16.896 0v-64.608z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "M400 432H96v16h304c8.8 0 16-7.2 16-16v-16c0 8.8-7.2 16-16 16z"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$D = /*#__PURE__*/ forwardRef(SvgIconFilePpt);

const SvgIconFilePsd = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 512 512",
        xmlSpace: "preserve",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("path", {
                style: {
                    fill: '#e2e5e7'
                },
                d: "M128 0c-17.6 0-32 14.4-32 32v448c0 17.6 14.4 32 32 32h320c17.6 0 32-14.4 32-32V128L352 0H128z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#b0b7bd'
                },
                d: "M384 128h96L352 0v96c0 17.6 14.4 32 32 32z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "m480 224-96-96h96z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#50bee8'
                },
                d: "M416 416c0 8.8-7.2 16-16 16H48c-8.8 0-16-7.2-16-16V256c0-8.8 7.2-16 16-16h352c8.8 0 16 7.2 16 16v160z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#fff'
                },
                d: "M100 303.152c0-4.224 3.328-8.848 8.688-8.848h29.552c16.64 0 31.616 11.136 31.616 32.496 0 20.224-14.976 31.472-31.616 31.472h-21.36v16.896c0 5.648-3.584 8.832-8.192 8.832-4.224 0-8.688-3.184-8.688-8.832v-72.016zm16.88 7.28v31.856h21.36c8.576 0 15.36-7.552 15.36-15.488 0-8.96-6.784-16.368-15.36-16.368h-21.36zM184.32 314.656c2.944-24.816 40.416-29.28 58.08-15.712 8.704 7.024-.512 18.16-8.192 12.528-9.472-6.016-30.96-8.832-33.648 4.464-3.456 20.992 52.192 8.976 51.296 42.992-.896 32.496-47.968 33.264-65.632 18.672-4.24-3.44-4.096-9.056-1.792-12.528 3.328-3.312 7.024-4.464 11.392-.896 10.48 7.168 37.488 12.544 39.392-5.648-1.648-18.912-54.88-7.52-50.896-43.872zM278.24 384c-4.224 0-8.832-2.32-8.832-7.936v-72.656c0-4.608 4.608-7.936 8.832-7.936h29.296C366 295.472 364.72 384 308.688 384H278.24zm8.064-72.928v57.312h21.232c34.544 0 36.08-57.312 0-57.312h-21.232z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "M400 432H96v16h304c8.8 0 16-7.2 16-16v-16c0 8.8-7.2 16-16 16z"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$C = /*#__PURE__*/ forwardRef(SvgIconFilePsd);

const SvgIconFileRaw = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 512 512",
        xmlSpace: "preserve",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("path", {
                style: {
                    fill: '#e2e5e7'
                },
                d: "M128 0c-17.6 0-32 14.4-32 32v448c0 17.6 14.4 32 32 32h320c17.6 0 32-14.4 32-32V128L352 0H128z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#b0b7bd'
                },
                d: "M384 128h96L352 0v96c0 17.6 14.4 32 32 32z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "m480 224-96-96h96z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#576d7e'
                },
                d: "M416 416c0 8.8-7.2 16-16 16H48c-8.8 0-16-7.2-16-16V256c0-8.8 7.2-16 16-16h352c8.8 0 16 7.2 16 16v160z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#fff'
                },
                d: "M94.912 375.68c0 11.12-17.024 11.504-17.024.256V303.28c0-4.48 3.472-7.808 7.68-7.808H119.6c32.48 0 39.136 43.504 12.016 54.368l17.008 20.72c6.656 9.856-6.64 19.312-14.336 9.6l-19.312-27.632H94.912v23.152zm0-37.872H119.6c16.624 0 17.664-26.864 0-26.864H94.912v26.864zM162.624 384c-4.096-2.32-6.656-6.912-4.096-12.288l36.704-71.76c3.456-6.784 12.672-7.04 15.872 0l36.064 71.76c5.248 9.968-10.24 17.904-14.832 7.936l-5.648-11.264h-47.2l-5.504 11.264c-2.032 4.352-6.768 5.264-11.36 4.352zm55.008-32.496-14.448-31.6-15.728 31.6h30.176zM341.248 353.424l19.056-52.704c3.84-10.352 19.312-5.504 15.488 5.632l-25.328 68.704c-2.32 7.296-4.48 9.472-8.832 9.472-4.608 0-6.016-2.832-8.576-7.424L310.8 326.576l-21.248 49.76c-2.304 5.36-4.464 8.432-9.072 8.432-4.464 0-6.784-3.072-8.832-8.704l-24.816-69.712c-3.84-11.504 12.4-15.728 15.728-5.632l18.944 52.704 22.64-52.704c3.056-7.808 11.12-8.192 14.448-.368l22.656 53.072z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "M400 432H96v16h304c8.8 0 16-7.2 16-16v-16c0 8.8-7.2 16-16 16z"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$B = /*#__PURE__*/ forwardRef(SvgIconFileRaw);

const SvgIconFileSvg = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 512 512",
        xmlSpace: "preserve",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("path", {
                style: {
                    fill: '#e2e5e7'
                },
                d: "M128 0c-17.6 0-32 14.4-32 32v448c0 17.6 14.4 32 32 32h320c17.6 0 32-14.4 32-32V128L352 0H128z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#b0b7bd'
                },
                d: "M384 128h96L352 0v96c0 17.6 14.4 32 32 32z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "m480 224-96-96h96z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#f7b84e'
                },
                d: "M416 416c0 8.8-7.2 16-16 16H48c-8.8 0-16-7.2-16-16V256c0-8.8 7.2-16 16-16h352c8.8 0 16 7.2 16 16v160z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#fff'
                },
                d: "M96.816 314.656c2.944-24.816 40.416-29.28 58.08-15.712 8.704 7.024-.512 18.16-8.192 12.528-9.472-6.016-30.96-8.832-33.648 4.464-3.456 20.992 52.192 8.976 51.312 42.992-.896 32.496-47.984 33.264-65.648 18.672-4.224-3.44-4.096-9.056-1.792-12.528 3.328-3.312 7.04-4.464 11.392-.896 10.48 7.168 37.488 12.544 39.392-5.648-1.648-18.912-54.864-7.52-50.896-43.872zM209.12 378.256l-33.776-70.752c-4.992-10.112 10.112-18.416 15.728-7.808l11.392 25.712 14.704 33.776 14.448-33.776 11.392-25.712c5.12-9.712 19.952-3.584 15.616 7.04L226 378.256c-2.944 8.064-12.016 9.968-16.88 0zM345.76 374.16c-9.088 7.536-20.224 10.752-31.472 10.752-26.88 0-45.936-15.36-45.936-45.808 0-25.84 20.096-45.92 47.072-45.92 10.112 0 21.232 3.456 29.168 11.264 7.792 7.664-3.456 19.056-11.12 12.288-4.736-4.624-11.392-8.064-18.048-8.064-15.472 0-30.432 12.4-30.432 30.432 0 18.944 12.528 30.448 29.296 30.448 7.792 0 14.448-2.304 19.184-5.76V348.08h-19.184c-11.392 0-10.24-15.632 0-15.632h25.584c4.736 0 9.072 3.6 9.072 7.568v27.248c.016 2.288-1.008 4.448-3.184 6.896z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "M400 432H96v16h304c8.8 0 16-7.2 16-16v-16c0 8.8-7.2 16-16 16z"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$A = /*#__PURE__*/ forwardRef(SvgIconFileSvg);

const SvgIconFileTif = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 512 512",
        xmlSpace: "preserve",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("path", {
                style: {
                    fill: '#e2e5e7'
                },
                d: "M128 0c-17.6 0-32 14.4-32 32v448c0 17.6 14.4 32 32 32h320c17.6 0 32-14.4 32-32V128L352 0H128z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#b0b7bd'
                },
                d: "M384 128h96L352 0v96c0 17.6 14.4 32 32 32z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "m480 224-96-96h96z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#a066aa'
                },
                d: "M416 416c0 8.8-7.2 16-16 16H48c-8.8 0-16-7.2-16-16V256c0-8.8 7.2-16 16-16h352c8.8 0 16 7.2 16 16v160z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#fff'
                },
                d: "M155.824 311.472H133.44c-11.12 0-11.12-16.368 0-16.368h60.512c11.376 0 11.376 16.368 0 16.368H172.72v64.592c0 11.12-16.896 11.392-16.896 0v-64.592zM217.536 303.152c0-10.496 16.896-10.88 16.896 0v73.024c0 10.624-16.896 10.88-16.896 0v-73.024zM273.712 312.096v20.336h32.608c4.608 0 9.216 4.608 9.216 9.088 0 4.224-4.608 7.664-9.216 7.664h-32.608v26.864c0 4.48-3.2 7.936-7.68 7.936-5.632 0-9.072-3.456-9.072-7.936v-72.656c0-4.608 3.456-7.936 9.072-7.936h44.912c5.632 0 8.96 3.328 8.96 7.936 0 4.096-3.328 8.688-8.96 8.688h-37.232v.016z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "M400 432H96v16h304c8.8 0 16-7.2 16-16v-16c0 8.8-7.2 16-16 16z"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$z = /*#__PURE__*/ forwardRef(SvgIconFileTif);

const SvgIconFileTxt = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 512 512",
        xmlSpace: "preserve",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("path", {
                style: {
                    fill: '#e2e5e7'
                },
                d: "M128 0c-17.6 0-32 14.4-32 32v448c0 17.6 14.4 32 32 32h320c17.6 0 32-14.4 32-32V128L352 0H128z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#b0b7bd'
                },
                d: "M384 128h96L352 0v96c0 17.6 14.4 32 32 32z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "m480 224-96-96h96z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#576d7e'
                },
                d: "M416 416c0 8.8-7.2 16-16 16H48c-8.8 0-16-7.2-16-16V256c0-8.8 7.2-16 16-16h352c8.8 0 16 7.2 16 16v160z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#fff'
                },
                d: "M132.784 311.472H110.4c-11.136 0-11.136-16.368 0-16.368h60.512c11.392 0 11.392 16.368 0 16.368h-21.248v64.592c0 11.12-16.896 11.392-16.896 0v-64.592h.016zM224.416 326.176l22.272-27.888c6.656-8.688 19.568 2.432 12.288 10.752-7.68 9.088-15.728 18.944-23.424 29.024l26.112 32.496c7.024 9.6-7.04 18.816-13.952 9.344l-23.536-30.192-23.152 30.832c-6.528 9.328-20.992-1.152-13.68-9.856l25.696-32.624c-8.048-10.096-15.856-19.936-23.664-29.024-8.064-9.6 6.912-19.44 12.784-10.48l22.256 27.616zM298.288 311.472H275.92c-11.136 0-11.136-16.368 0-16.368h60.496c11.392 0 11.392 16.368 0 16.368h-21.232v64.592c0 11.12-16.896 11.392-16.896 0v-64.592z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "M400 432H96v16h304c8.8 0 16-7.2 16-16v-16c0 8.8-7.2 16-16 16z"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$y = /*#__PURE__*/ forwardRef(SvgIconFileTxt);

const SvgIconFileWmv = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 512 512",
        xmlSpace: "preserve",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("path", {
                style: {
                    fill: '#e2e5e7'
                },
                d: "M128 0c-17.6 0-32 14.4-32 32v448c0 17.6 14.4 32 32 32h320c17.6 0 32-14.4 32-32V128L352 0H128z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#b0b7bd'
                },
                d: "M384 128h96L352 0v96c0 17.6 14.4 32 32 32z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "m480 224-96-96h96z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#84bd5a'
                },
                d: "M416 416c0 8.8-7.2 16-16 16H48c-8.8 0-16-7.2-16-16V256c0-8.8 7.2-16 16-16h352c8.8 0 16 7.2 16 16v160z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#fff'
                },
                d: "m153.216 353.44 19.056-52.72c3.824-10.336 19.312-5.504 15.472 5.632l-25.328 68.72c-2.304 7.28-4.464 9.472-8.832 9.472-4.592 0-6.016-2.832-8.56-7.44l-22.256-50.544-21.232 49.776c-2.32 5.36-4.464 8.432-9.088 8.432-4.464 0-6.784-3.072-8.816-8.704l-24.816-69.728c-3.84-11.504 12.4-15.712 15.712-5.632l18.944 52.72 22.656-52.72c3.056-7.792 11.12-8.192 14.432-.368l22.656 53.104zM219.744 327.84v47.344c0 5.632-4.608 8.816-9.2 8.816-4.096 0-7.68-3.184-7.68-8.816v-72.032c0-6.656 5.648-8.832 7.68-8.832 3.696 0 5.872 2.176 8.048 4.608l28.16 38 29.152-39.408c4.24-5.248 14.592-3.2 14.592 5.632v72.032c0 5.632-3.6 8.816-7.68 8.816-4.592 0-8.192-3.184-8.192-8.816V327.84l-21.232 26.88c-4.592 5.632-10.352 5.632-14.576 0l-19.072-26.88zM339.776 378.256 306 307.504c-4.992-10.096 10.112-18.4 15.728-7.792l11.392 25.696 14.704 33.776 14.448-33.776 11.392-25.696c5.12-9.728 19.952-3.584 15.616 7.04l-32.624 71.504c-2.944 8.064-12.016 9.968-16.88 0z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "M400 432H96v16h304c8.8 0 16-7.2 16-16v-16c0 8.8-7.2 16-16 16z"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$x = /*#__PURE__*/ forwardRef(SvgIconFileWmv);

const SvgIconFileXls = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 512 512",
        xmlSpace: "preserve",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("path", {
                style: {
                    fill: '#e2e5e7'
                },
                d: "M128 0c-17.6 0-32 14.4-32 32v448c0 17.6 14.4 32 32 32h320c17.6 0 32-14.4 32-32V128L352 0H128z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#b0b7bd'
                },
                d: "M384 128h96L352 0v96c0 17.6 14.4 32 32 32z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "m480 224-96-96h96z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#84bd5a'
                },
                d: "M416 416c0 8.8-7.2 16-16 16H48c-8.8 0-16-7.2-16-16V256c0-8.8 7.2-16 16-16h352c8.8 0 16 7.2 16 16v160z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#fff'
                },
                d: "m144.336 326.192 22.256-27.888c6.656-8.704 19.584 2.416 12.288 10.736-7.664 9.088-15.728 18.944-23.408 29.04l26.096 32.496c7.04 9.6-7.024 18.8-13.936 9.328l-23.552-30.192-23.152 30.848c-6.528 9.328-20.992-1.152-13.696-9.856l25.712-32.624c-8.064-10.112-15.872-19.952-23.664-29.04-8.048-9.6 6.912-19.44 12.8-10.464l22.256 27.616zM197.36 303.152c0-4.224 3.584-7.808 8.064-7.808 4.096 0 7.552 3.6 7.552 7.808v64.096h34.8c12.528 0 12.8 16.752 0 16.752H205.44c-4.48 0-8.064-3.184-8.064-7.792v-73.056h-.016zM272.032 314.672c2.944-24.832 40.416-29.296 58.08-15.728 8.704 7.024-.512 18.16-8.192 12.528-9.472-6-30.96-8.816-33.648 4.464-3.456 20.992 52.192 8.976 51.296 43.008-.896 32.496-47.968 33.248-65.632 18.672-4.24-3.456-4.096-9.072-1.792-12.544 3.328-3.312 7.024-4.464 11.392-.88 10.48 7.152 37.488 12.528 39.392-5.648-1.648-18.912-54.864-7.536-50.896-43.872z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "M400 432H96v16h304c8.8 0 16-7.2 16-16v-16c0 8.8-7.2 16-16 16z"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$w = /*#__PURE__*/ forwardRef(SvgIconFileXls);

const SvgIconFileZip = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 512 512",
        xmlSpace: "preserve",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("path", {
                style: {
                    fill: '#e2e5e7'
                },
                d: "M128 0c-17.6 0-32 14.4-32 32v448c0 17.6 14.4 32 32 32h320c17.6 0 32-14.4 32-32V128L352 0H128z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#b0b7bd'
                },
                d: "M384 128h96L352 0v96c0 17.6 14.4 32 32 32z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "m480 224-96-96h96z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#84bd5a'
                },
                d: "M416 416c0 8.8-7.2 16-16 16H48c-8.8 0-16-7.2-16-16V256c0-8.8 7.2-16 16-16h352c8.8 0 16 7.2 16 16v160z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#fff'
                },
                d: "M132.64 384c-8.064 0-11.264-7.792-6.656-13.296l45.552-60.512h-37.76c-11.12 0-10.224-15.712 0-15.712h51.568c9.712 0 12.528 9.184 5.632 16.624l-43.632 56.656h41.584c10.24 0 11.52 16.256-1.008 16.256h-55.28V384zM212.048 303.152c0-10.496 16.896-10.88 16.896 0v73.04c0 10.608-16.896 10.88-16.896 0v-73.04zM251.616 303.152c0-4.224 3.328-8.832 8.704-8.832h29.552c16.64 0 31.616 11.136 31.616 32.48 0 20.224-14.976 31.488-31.616 31.488h-21.36v16.896c0 5.632-3.584 8.816-8.192 8.816-4.224 0-8.704-3.184-8.704-8.816v-72.032zm16.88 7.28v31.872h21.36c8.576 0 15.36-7.568 15.36-15.504 0-8.944-6.784-16.368-15.36-16.368h-21.36z"
            }, void 0),
            jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "M400 432H96v16h304c8.8 0 16-7.2 16-16v-16c0 8.8-7.2 16-16 16z"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$v = /*#__PURE__*/ forwardRef(SvgIconFileZip);

const SvgIconFlipLeft = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd"
            }, {
                children: [
                    jsx("path", {
                        stroke: "currentColor",
                        strokeLinecap: "round",
                        strokeLinejoin: "round",
                        d: "m9.87 14-4-.99.96-3.99"
                    }, void 0),
                    jsx("path", {
                        d: "M2.5 2c-.28 0-.5.22-.5.5 0 .27.22.5.5.5.27 0 .5-.23.5-.5 0-.28-.23-.5-.5-.5ZM4.5 2c-.28 0-.5.22-.5.5 0 .27.22.5.5.5.27 0 .5-.23.5-.5 0-.28-.23-.5-.5-.5ZM6.5 2c-.28 0-.5.22-.5.5 0 .27.22.5.5.5.27 0 .5-.23.5-.5 0-.28-.23-.5-.5-.5ZM8.5 2c-.28 0-.5.22-.5.5 0 .27.22.5.5.5.27 0 .5-.23.5-.5 0-.28-.23-.5-.5-.5ZM2.5 22c-.28 0-.5.22-.5.5 0 .27.22.5.5.5.27 0 .5-.23.5-.5 0-.28-.23-.5-.5-.5ZM4.5 22c-.28 0-.5.22-.5.5 0 .27.22.5.5.5.27 0 .5-.23.5-.5 0-.28-.23-.5-.5-.5ZM6.5 22c-.28 0-.5.22-.5.5 0 .27.22.5.5.5.27 0 .5-.23.5-.5 0-.28-.23-.5-.5-.5ZM8.5 22c-.28 0-.5.22-.5.5 0 .27.22.5.5.5.27 0 .5-.23.5-.5 0-.28-.23-.5-.5-.5ZM10.5 2c-.28 0-.5.22-.5.5 0 .27.22.5.5.5.27 0 .5-.23.5-.5 0-.28-.23-.5-.5-.5ZM10.5 22c-.28 0-.5.22-.5.5 0 .27.22.5.5.5.27 0 .5-.23.5-.5 0-.28-.23-.5-.5-.5ZM.5 2c-.277 0-.5.22-.5.5 0 .27.223.5.5.5.275 0 .5-.23.5-.5C1 2.22.77 2 .5 2ZM.5 4c-.277 0-.5.22-.5.5 0 .27.223.5.5.5.275 0 .5-.23.5-.5C1 4.22.77 4 .5 4ZM.5 6c-.277 0-.5.22-.5.5 0 .27.223.5.5.5.275 0 .5-.23.5-.5C1 6.22.77 6 .5 6ZM.5 8c-.277 0-.5.22-.5.5 0 .27.223.5.5.5.275 0 .5-.23.5-.5C1 8.22.77 8 .5 8ZM.5 10c-.277 0-.5.22-.5.5 0 .27.223.5.5.5.275 0 .5-.23.5-.5 0-.28-.23-.5-.5-.5ZM.5 12c-.277 0-.5.22-.5.5 0 .27.223.5.5.5.275 0 .5-.23.5-.5 0-.28-.23-.5-.5-.5ZM.5 14c-.277 0-.5.22-.5.5 0 .27.223.5.5.5.275 0 .5-.23.5-.5 0-.28-.23-.5-.5-.5ZM.5 16c-.277 0-.5.22-.5.5 0 .27.223.5.5.5.275 0 .5-.23.5-.5 0-.28-.23-.5-.5-.5ZM.5 18c-.277 0-.5.22-.5.5 0 .27.223.5.5.5.275 0 .5-.23.5-.5 0-.28-.23-.5-.5-.5ZM.5 20c-.277 0-.5.22-.5.5 0 .27.223.5.5.5.275 0 .5-.23.5-.5 0-.28-.23-.5-.5-.5ZM.5 22c-.277 0-.5.22-.5.5 0 .27.223.5.5.5.275 0 .5-.23.5-.5 0-.28-.23-.5-.5-.5Z",
                        fill: "currentColor"
                    }, void 0),
                    jsx("path", {
                        stroke: "currentColor",
                        strokeLinecap: "round",
                        strokeLinejoin: "round",
                        d: "M14.5 22.5h9v-20h-9M12.5 13.5v10M12.5.5v7"
                    }, void 0),
                    jsx("path", {
                        d: "M5.882 13.003A9.95 9.95 0 0 1 12.5 10.5c2.513 0 4.81.92 6.567 2.458",
                        stroke: "currentColor",
                        strokeLinecap: "round",
                        strokeLinejoin: "round"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$u = /*#__PURE__*/ forwardRef(SvgIconFlipLeft);

const SvgIconFolder = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("path", {
                d: "M3 21.5h17.5c1.655 0 3-1.343 3-3v-10h-18V19a2.5 2.5 0 0 1-5 0V2.5h7v2h13v4",
                stroke: "currentColor",
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$t = /*#__PURE__*/ forwardRef(SvgIconFolder);

const SvgIconGoogleClassroom = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxs("g", Object.assign({
                fill: "none",
                fillRule: "nonzero"
            }, {
                children: [
                    jsx("path", {
                        fill: "#FFC112",
                        d: "M0 0h24v24H0z"
                    }, void 0),
                    jsx("path", {
                        fill: "#21A465",
                        d: "M2 2h20v20H2z"
                    }, void 0),
                    jsx("path", {
                        d: "M18 11a1 1 0 1 0-2 0 1 1 0 0 0 2 0Zm-1 1.5c-1.446 0-3 .71-3 1.588V15h6v-.912c0-.878-1.554-1.588-3-1.588ZM8 11a1 1 0 1 0-2 0 1 1 0 0 0 2 0Zm-1 1.5c-1.446 0-3 .71-3 1.588V15h6v-.912c0-.878-1.554-1.588-3-1.588Z",
                        fill: "#57BB8A"
                    }, void 0),
                    jsx("path", {
                        d: "M12.001 11a1.5 1.5 0 1 0 0-2.999A1.5 1.5 0 0 0 12 11Zm-3.915 2.833V15H16v-1.167c0-1.289-2.05-2.333-3.957-2.333-1.908 0-3.957 1.044-3.957 2.333Z",
                        fill: "#F7F7F7"
                    }, void 0),
                    jsx("path", {
                        fill: "#F1F1F1",
                        d: "M14 20.5h6V22h-6z"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$s = /*#__PURE__*/ forwardRef(SvgIconGoogleClassroom);

const SvgIconHomeschool = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: [
                    jsx("path", {
                        d: "M21.5.5h-16c-1.104 0-2 .89-2 2 0 1.104.89 2 2 2h16v19h-16c-1.104 0-2-.9-2-2v-19m2 0h15M2.5 7.5h2m-2 3h2m-2 3h2m-2 3h2m-2 3h2"
                    }, void 0),
                    jsx("path", {
                        d: "M9.5 12.5h7v6h-7zM13 8l-5.5 4.5h11z"
                    }, void 0),
                    jsx("path", {
                        d: "M14.5 16c0-.83-.68-1.5-1.5-1.5-.83 0-1.5.67-1.5 1.5v2.5h3V16Z"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$r = /*#__PURE__*/ forwardRef(SvgIconHomeschool);

const SvgIconItalics = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("path", {
                d: "M14.595 2 9.389 22M2.76 22h13.254M7.967 2H21.22",
                stroke: "currentColor",
                strokeMiterlimit: 10,
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$q = /*#__PURE__*/ forwardRef(SvgIconItalics);

const SvgIconLessons = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxs("g", Object.assign({
                stroke: "currentColor",
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, {
                children: [
                    jsx("path", {
                        d: "m23.5 9.5-11.5 5-11.5-5"
                    }, void 0),
                    jsx("path", {
                        d: "m23.5 13.5-11.5 5-11.5-5"
                    }, void 0),
                    jsx("path", {
                        d: "m23.5 17.5-11.5 5-11.5-5M12 10.5.5 5.5 12 .5l11.5 5z"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$p = /*#__PURE__*/ forwardRef(SvgIconLessons);

const SvgIconLightbulb = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: jsx("path", {
                    d: "M17.5 11.5a6 6 0 0 0-12 0 5.997 5.997 0 0 0 4.5 5.803V18.5h3v-1.197a5.999 5.999 0 0 0 4.5-5.803ZM12 22.5h-1M13 20.5h-3M11.5 1.5v2M21.5 11.5h-2M1.5 11.5h2M3.72 3.72l2.12 2.12M19.28 3.72l-2.12 2.12"
                }, void 0)
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$o = /*#__PURE__*/ forwardRef(SvgIconLightbulb);

const SvgIconLinkExternal = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: jsx("path", {
                    d: "M10 14 23 1M23 15v8H1V1h8M16.5 1H23v6.5"
                }, void 0)
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$n = /*#__PURE__*/ forwardRef(SvgIconLinkExternal);

const SvgIconLink = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("path", {
                d: "M6.192 11.372a2.145 2.145 0 0 1 3.034 0h0l.092.091 3.218 3.219.093.092a2.146 2.146 0 0 1 0 3.035h0l-4.254 4.253a3.227 3.227 0 0 1-4.55 0h0l-1.887-1.885a3.23 3.23 0 0 1 0-4.552h0Zm9.433-9.433a3.227 3.227 0 0 1 4.55 0h0l1.887 1.885a3.23 3.23 0 0 1 0 4.552h0l-4.254 4.252a2.145 2.145 0 0 1-3.034 0h0l-3.31-3.31-.093-.091a2.146 2.146 0 0 1 0-3.035h0ZM7.827 16.173l8.346-8.346",
                stroke: "currentColor",
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$m = /*#__PURE__*/ forwardRef(SvgIconLink);

const SvgIconLock = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxs("g", Object.assign({
                stroke: "currentColor",
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, {
                children: [
                    jsx("path", {
                        d: "M12.354 14.646a.5.5 0 1 1-.708.708.5.5 0 0 1 .708-.708M12 15.5v3"
                    }, void 0),
                    jsx("path", {
                        d: "M3.5 9.5h17v14h-17zM6.5 6a5.5 5.5 0 1 1 11 0v3.5h-11V6Z"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$l = /*#__PURE__*/ forwardRef(SvgIconLock);

const SvgIconMenuKebab = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("path", {
                d: "M10 4a2 2 0 1 0 4 0 2 2 0 0 0-4 0ZM10 12a2 2 0 1 0 4 0 2 2 0 0 0-4 0ZM10 20a2 2 0 1 0 4 0 2 2 0 0 0-4 0Z",
                fill: "currentColor"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$k = /*#__PURE__*/ forwardRef(SvgIconMenuKebab);

const SvgIconMenuMore = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxs("g", Object.assign({
                fill: "currentColor",
                fillRule: "evenodd"
            }, {
                children: [
                    jsx("circle", {
                        cx: 4,
                        cy: 12,
                        r: 2
                    }, void 0),
                    jsx("circle", {
                        cx: 12,
                        cy: 12,
                        r: 2
                    }, void 0),
                    jsx("circle", {
                        cx: 20,
                        cy: 12,
                        r: 2
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$j = /*#__PURE__*/ forwardRef(SvgIconMenuMore);

const SvgIconMinus = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("path", {
                stroke: "currentColor",
                d: "M21.5 12h-19",
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$i = /*#__PURE__*/ forwardRef(SvgIconMinus);

const SvgIconMultiChoice = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: jsx("path", {
                    d: "M3.914 19.086a2 2 0 1 1-2.828 2.828 2 2 0 0 1 2.828-2.828Zm0-8a2 2 0 1 1-2.828 2.828 2 2 0 0 1 2.828-2.828Zm0-8a2 2 0 1 1-2.828 2.828 2 2 0 0 1 2.828-2.828ZM8.5 4.5h15m-15 8h15m-15 8h15"
                }, void 0)
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$h = /*#__PURE__*/ forwardRef(SvgIconMultiChoice);

const SvgIconOrderedList = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("path", {
                d: "M6.5 3.997h17m-17 8h17m-17 8h17M2 5.997V2.07L.5 3.534m2.07 10.463H.5c1.48-2 2-1.836 2-2.963a.986.986 0 0 0-1-.982.948.948 0 0 0-.965.973M.5 17.997h1.931l-1 1.537c.826 0 1 .482 1 .982s-.174.981-1 .981H.5",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$g = /*#__PURE__*/ forwardRef(SvgIconOrderedList);

const SvgIconPlus = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: jsx("path", {
                    d: "M11.5.5v22M22.5 11.5H.5"
                }, void 0)
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$f = /*#__PURE__*/ forwardRef(SvgIconPlus);

const SvgIconRecommend = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: [
                    jsx("path", {
                        d: "M18 23.5s5.5-4 5.5-6.97c0-3.42-4.5-4.5-5.5-.35-1-4.16-5.5-3.08-5.5.34 0 2.96 5.5 6.96 5.5 6.96v.02Z"
                    }, void 0),
                    jsx("path", {
                        d: "M9.5 14.5h-1l-4 4v-4h-4V.5h21v9"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$e = /*#__PURE__*/ forwardRef(SvgIconRecommend);

const SvgIconSchedule = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("path", {
                clipRule: "evenodd",
                d: "M21.78 13.33A9.779 9.779 0 0 1 12 23.108a9.778 9.778 0 0 1-9.78-9.78A9.778 9.778 0 0 1 12 3.55c5.401 0 9.78 4.378 9.78 9.78v0Z",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0),
            jsx("path", {
                d: "M6.496 21.407 4.794 23.11M17.502 21.405l1.704 1.704M8.397 13.844h4.118V7.668M1.706 7.668C.098 6.06.098 3.614 1.706 2.006 3.314.398 5.76.398 7.368 2.006M22.294 7.668c1.608-1.608 1.608-4.054 0-5.662-1.608-1.608-4.054-1.608-5.662 0",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$d = /*#__PURE__*/ forwardRef(SvgIconSchedule);

const SvgIconSchool = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: [
                    jsx("path", {
                        d: "M.5 23.5h23M2.5 4.5h19v19h-19zM.5 4.5h23M3.5 2.5h17v2h-17zM9.5.5h5v2h-5z"
                    }, void 0),
                    jsx("path", {
                        d: "M10.5 19.5h3v4h-3zM5.5 19.5h3M15.5 19.5h3M5.5 16.5h5M13.5 16.5h5M5.5 13.5h5M13.5 13.5h5M5.5 10.5h5M13.5 10.5h5M5.5 7.5h5M13.5 7.5h5"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$c = /*#__PURE__*/ forwardRef(SvgIconSchool);

const SvgIconSearch = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("g", Object.assign({
                stroke: "currentColor",
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, {
                children: jsx("path", {
                    d: "M13.657 2.343A8 8 0 1 1 2.343 13.657 8 8 0 0 1 13.657 2.343M13.68 13.68 23 23"
                }, void 0)
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$b = /*#__PURE__*/ forwardRef(SvgIconSearch);

const SvgIconShortAnswer = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: jsx("path", {
                    d: "M0 1.5h23M0 6.5h22.762M0 11.5h14M15.52 21.5l-3.5 1 1-3.5 7.502-7.502 2.5 2.5L15.52 21.5Zm3-8 2.5 2.5m-8 3 2.5 2.5"
                }, void 0)
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$a = /*#__PURE__*/ forwardRef(SvgIconShortAnswer);

const SvgIconSocialGoogle = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 23",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("g", Object.assign({
                fill: "currentColor",
                fillRule: "evenodd"
            }, {
                children: jsx("path", {
                    d: "M7.127 7.339a6.653 6.653 0 0 1 5.254-2.577c1.86 0 3.586.747 4.86 2.104l.327.346 3.47-3.26-.326-.347A11.477 11.477 0 0 0 12.381 0c-3.636 0-6.874 1.713-8.97 4.368l3.716 2.971ZM6.183 13.868a6.614 6.614 0 0 1-.47-2.44c0-.85.167-1.662.46-2.412L2.35 5.958a11.354 11.354 0 0 0 .164 11.212l3.669-3.302ZM15.49 17.312a6.675 6.675 0 0 1-3.109.783 6.654 6.654 0 0 1-5.226-2.539l-3.544 3.189a11.407 11.407 0 0 0 8.77 4.112c2.34 0 4.517-.707 6.334-1.916l-3.225-3.629ZM13.333 9.524v4.762h5.087a6.598 6.598 0 0 1-1.382 1.902l3.174 3.57a11.414 11.414 0 0 0 3.595-7.754l.003-2.48H13.333Z"
                }, void 0)
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$9 = /*#__PURE__*/ forwardRef(SvgIconSocialGoogle);

const SvgIconSubjectsStudySkills = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: [
                    jsx("path", {
                        d: "m16.42 19.25 2.298 2.296 2.828-2.829-2.296-2.297c.452-.74.794-2.054 1.004-2.921H23.5v-3h-3.247c-.209-.867-.551-2.181-1.003-2.922l2.296-2.295-2.829-2.829L16.42 4.75c-.74-.452-2.053-.794-2.92-1.002V.5h-3v3.248c-.867.208-2.181.55-2.921 1.002L5.282 2.454 2.453 5.283 4.75 7.579c-.452.74-.794 2.054-1.004 2.921H.5v3h3.246c.21.867.552 2.181 1.004 2.921l-2.297 2.297 2.829 2.829 2.296-2.298M10.5 20.5h3m-3 2h3m-1.5 0v1"
                    }, void 0),
                    jsx("path", {
                        d: "M17.869 12.044C17.869 8.982 15.241 6.5 12 6.5c-3.242 0-5.869 2.482-5.869 5.544 0 2.525 1.922 4.655 4.369 5.323V18.5h3v-1.133c2.447-.668 4.369-2.798 4.369-5.323Z"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$8 = /*#__PURE__*/ forwardRef(SvgIconSubjectsStudySkills);

const SvgIconText = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: jsx("path", {
                    d: "M2 3h9M2 15h20M2 21h20M2 9h20"
                }, void 0)
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$7 = /*#__PURE__*/ forwardRef(SvgIconText);

const SvgIconUnlock = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: [
                    jsx("path", {
                        d: "M12 14.5a.5.5 0 1 0 0 1 .5.5 0 0 0 0-1Zm0 1v3"
                    }, void 0),
                    jsx("path", {
                        d: "M3.5 9.5h17v14h-17zM6.5 6C6.5 2.962 8.96.5 12 .5c3.03 0 5.5 2.46 5.5 5.5v3.5"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$6 = /*#__PURE__*/ forwardRef(SvgIconUnlock);

const SvgIconUnorderedList = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsx("path", {
                fillRule: "evenodd",
                clipRule: "evenodd",
                d: "M4 4a2 2 0 1 1-4.001-.001A2 2 0 0 1 4 4Z",
                fill: "currentColor"
            }, void 0),
            jsx("path", {
                d: "M8 4h15",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0),
            jsx("path", {
                fillRule: "evenodd",
                clipRule: "evenodd",
                d: "M4 12a2 2 0 1 1-4.001-.001A2 2 0 0 1 4 12Z",
                fill: "currentColor"
            }, void 0),
            jsx("path", {
                d: "M8 12h15",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0),
            jsx("path", {
                fillRule: "evenodd",
                clipRule: "evenodd",
                d: "M4 20a2 2 0 1 1-4.001-.001A2 2 0 0 1 4 20Z",
                fill: "currentColor"
            }, void 0),
            jsx("path", {
                d: "M8 20h15",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$5 = /*#__PURE__*/ forwardRef(SvgIconUnorderedList);

const SvgIconUser = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: [
                    jsx("path", {
                        d: "M16.243 2.757a6 6 0 1 1-8.486 8.486 6 6 0 0 1 8.486-8.486"
                    }, void 0),
                    jsx("path", {
                        d: "M23 23.476H1C1 17.692 5.922 13 12 13c6.076-.002 11 4.69 11 10.476Z"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$4 = /*#__PURE__*/ forwardRef(SvgIconUser);

const SvgIconUsersLove = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: [
                    jsx("path", {
                        d: "M19 23.5c1.67-1.22 4.49-3.779 4.49-5.7 0-1.56-1.14-2.484-2.23-2.484-1.218 0-1.68.84-2.28 1.83-.61-1-1.06-1.84-2.28-1.84-1.1 0-2.23.93-2.23 2.484-.001 1.91 2.82 4.48 4.5 5.69h0l.03.02ZM13.94 13.779l-3.95-1.42v-2.045M6 10.323v2.04l-3.941 1.41c-.95.33-1.56 1.23-1.56 2.23v1.48h10.5"
                    }, void 0),
                    jsx("path", {
                        d: "M11.947 6.23c0 2.61-1.77 4.741-3.947 4.741-2.181 0-3.947-2.13-3.947-4.75s1.76-4.736 3.94-4.736c2.18 0 3.94 2.121 3.94 4.73l.014.015Z"
                    }, void 0),
                    jsx("path", {
                        d: "M11.916 5.811c-.14.01-.25 0-.38.03-1.35.258-2.208-.23-2.949-1.53-.45.85-1.84 1.52-2.98 1.52a3.19 3.19 0 0 1-1.53-.37M14.5 1.5c2.18 0 3.94 2.121 3.94 4.73 0 2.61-1.77 4.741-3.95 4.741"
                    }, void 0),
                    jsx("path", {
                        d: "M18.416 5.811c-.14.01-.25 0-.38.03-1.35.258-2.208-.23-2.949-1.53M16.5 12v-1.68"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$3 = /*#__PURE__*/ forwardRef(SvgIconUsersLove);

const SvgIconUsers = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxs("g", Object.assign({
                stroke: "currentColor",
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, {
                children: [
                    jsx("path", {
                        d: "M6.768 7.717a2.5 2.5 0 1 1-3.536 3.536 2.5 2.5 0 0 1 3.536-3.536"
                    }, void 0),
                    jsx("path", {
                        d: "M6.578 15.985H1a4 4 0 0 1 7.227-2.363M20.768 7.717a2.5 2.5 0 1 1-3.536 3.536 2.5 2.5 0 0 1 3.536-3.536"
                    }, void 0),
                    jsx("path", {
                        d: "M15.771 13.623A4 4 0 0 1 23 15.985h-5.578M14.553 6.058a3.611 3.611 0 1 1-5.106 5.106 3.611 3.611 0 0 1 5.106-5.106"
                    }, void 0),
                    jsx("path", {
                        d: "M17.777 18.001H6.223a5.777 5.777 0 1 1 11.554 0Z"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$2 = /*#__PURE__*/ forwardRef(SvgIconUsers);

const SvgIconViewTask = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: [
                    jsx("path", {
                        d: "M20.5 11.5v-9h-4m-16 7h20M4.5 2.5h-4v16h10"
                    }, void 0),
                    jsx("path", {
                        d: "M7.5.5v5h-3v-5h3Zm9 0v5h-3v-5h3Zm-9 2h6M19.828 14.172a4 4 0 1 1-5.656 5.656 4 4 0 0 1 5.656-5.656m.002 5.658L23 23"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$1 = /*#__PURE__*/ forwardRef(SvgIconViewTask);

const SvgIconYoutube = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxs("g", Object.assign({
                fill: "none",
                fillRule: "nonzero"
            }, {
                children: [
                    jsx("path", {
                        d: "M12.03 19.996c-2.569.014-5.137-.018-7.701-.151-.834-.046-1.668-.115-2.424-.504-.506-.262-.897-.624-1.142-1.137-.415-.852-.545-1.75-.622-2.667-.164-1.893-.174-3.785-.087-5.673.044-1.004.077-2.017.328-3.002.096-.385.236-.76.424-1.118.443-.839 1.214-1.256 2.145-1.43.78-.147 1.58-.142 2.375-.174 2.694-.105 5.393-.16 8.092-.133 2.077.023 4.159.073 6.236.174.641.032 1.287.041 1.899.257.829.293 1.446.788 1.778 1.59.323.77.448 1.567.516 2.388.188 2.227.193 4.454.038 6.681-.053.752-.106 1.503-.313 2.241-.467 1.696-1.58 2.36-3.214 2.465-1.745.11-3.494.17-5.244.193-1.026.01-2.057 0-3.084 0Z",
                        fill: "#FF0200"
                    }, void 0),
                    jsx("path", {
                        d: "M10 15V9c2.001 1 3.982 1.991 6 3.002L10 15Z",
                        fill: "#FFF"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef = /*#__PURE__*/ forwardRef(SvgIconYoutube);

var svgs = Object.freeze({
    'action-flip': ForwardRef$1r,
    'alert-error': ForwardRef$1q,
    'alert-general': ForwardRef$1p,
    'alert-info': ForwardRef$1o,
    'alert-success': ForwardRef$1n,
    'alert-warning': ForwardRef$1m,
    'arrow-back': ForwardRef$1l,
    'arrow-down': ForwardRef$1k,
    'arrow-front': ForwardRef$1j,
    'arrow-up': ForwardRef$1i,
    atom: ForwardRef$1h,
    attachment: ForwardRef$1g,
    avatar: ForwardRef$1f,
    badge: ForwardRef$1e,
    'bin-delete': ForwardRef$1d,
    blog: ForwardRef$1c,
    bold: ForwardRef$1b,
    'browser-add': ForwardRef$1a,
    'calendar-tick': ForwardRef$19,
    calendar: ForwardRef$18,
    check: ForwardRef$17,
    chevron: ForwardRef$16,
    'circle-check': ForwardRef$15,
    'circle-help': ForwardRef$14,
    'circle-play': ForwardRef$13,
    'circle-practice': ForwardRef$12,
    'circle-progress': ForwardRef$11,
    'circle-solid-check': ForwardRef$10,
    'circle-solid-cross': ForwardRef$$,
    'circle-star': ForwardRef$_,
    'circle-text': ForwardRef$Z,
    'class-students': ForwardRef$Y,
    class: ForwardRef$X,
    close: ForwardRef$W,
    copy: ForwardRef$V,
    cross: ForwardRef$U,
    customers: ForwardRef$T,
    download: ForwardRef$S,
    drag: ForwardRef$R,
    drive: ForwardRef$Q,
    duplicate: ForwardRef$P,
    duration: ForwardRef$O,
    edit: ForwardRef$N,
    'extended-response': ForwardRef$M,
    'file-doc': ForwardRef$L,
    'file-eps': ForwardRef$K,
    'file-gif': ForwardRef$J,
    'file-jpg': ForwardRef$I,
    'file-mov': ForwardRef$H,
    'file-mp-3': ForwardRef$G,
    'file-pdf': ForwardRef$F,
    'file-png': ForwardRef$E,
    'file-ppt': ForwardRef$D,
    'file-psd': ForwardRef$C,
    'file-raw': ForwardRef$B,
    'file-svg': ForwardRef$A,
    'file-tif': ForwardRef$z,
    'file-txt': ForwardRef$y,
    'file-wmv': ForwardRef$x,
    'file-xls': ForwardRef$w,
    'file-zip': ForwardRef$v,
    'flip-left': ForwardRef$u,
    folder: ForwardRef$t,
    'google-classroom': ForwardRef$s,
    homeschool: ForwardRef$r,
    italics: ForwardRef$q,
    lessons: ForwardRef$p,
    lightbulb: ForwardRef$o,
    'link-external': ForwardRef$n,
    link: ForwardRef$m,
    lock: ForwardRef$l,
    'menu-kebab': ForwardRef$k,
    'menu-more': ForwardRef$j,
    minus: ForwardRef$i,
    'multi-choice': ForwardRef$h,
    'ordered-list': ForwardRef$g,
    plus: ForwardRef$f,
    recommend: ForwardRef$e,
    schedule: ForwardRef$d,
    school: ForwardRef$c,
    search: ForwardRef$b,
    'short-answer': ForwardRef$a,
    'social-google': ForwardRef$9,
    'subjects-study-skills': ForwardRef$8,
    text: ForwardRef$7,
    unlock: ForwardRef$6,
    'unordered-list': ForwardRef$5,
    user: ForwardRef$4,
    'users-love': ForwardRef$3,
    users: ForwardRef$2,
    'view-task': ForwardRef$1,
    youtube: ForwardRef
});

var styles$4 = {"root":"Icon_root__gXgtl"};

const Icon = /*#__PURE__*/ forwardRef(function Icon(props, ref) {
    const { className , color , display ='block' , isDecorative =true , name , size ='sizeIconRoot' , strokeWidth , testHook , title , verticalAlign ,  } = props;
    const Svg = svgs[name];
    return jsx(Box, Object.assign({
        ref: ref,
        as: "span",
        color: color,
        display: display,
        flexShrink: 0,
        lineHeight: "lineHeightNone",
        overflow: "visible",
        size: size,
        strokeWidth: strokeWidth,
        verticalAlign: verticalAlign,
        className: cx(styles$4.root, className),
        testHook: testHook
    }, {
        children: jsx(Svg, {
            "aria-hidden": isDecorative,
            role: isDecorative ? undefined : 'img',
            title: title,
            overflow: "visible",
            width: "100%",
            height: "100%"
        }, void 0)
    }), void 0);
});

var styles$3 = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","large":"Tooltip_large__Hgr3a","isTextOnly":"Tooltip_isTextOnly__9WPKy","panelSlideDown":"Tooltip_panelSlideDown__jF-Nc"};

function Tooltip(props) {
    const { children , isTextOnly =true , size , ...otherProps } = props;
    return jsx(Tippy, Object.assign({
        animation: "shift-toward",
        arrow: true,
        popperOptions: {
            modifiers: [
                {
                    name: 'flip',
                    options: {
                        fallbackPlacements: [
                            'bottom',
                            'right'
                        ]
                    }
                }, 
            ]
        }
    }, otherProps, {
        className: cx({
            [String(size && styles$3[size])]: size,
            [styles$3.isTextOnly]: isTextOnly
        })
    }, {
        children: children && ReactIs.typeOf(children) === ReactIs.Element ? /*#__PURE__*/ cloneElement(children, {
            tabIndex: 0
        }) : children
    }), void 0);
}
Tooltip.defaultProps = {
    theme: 'dark'
};

function Definition(props) {
    const { definition , children  } = props;
    return jsx(Tooltip, Object.assign({
        theme: "light-border",
        size: "large",
        trigger: "click focus",
        interactive: true,
        content: definition
    }, {
        children: jsx(Box, Object.assign({
            as: "span",
            borderBottomWidth: "borderWidthLarge",
            borderBottomStyle: "dotted",
            borderBottomColor: "colorAtomiBluesDark",
            role: "button"
        }, {
            children: children
        }), void 0)
    }), void 0);
}

({
    [imageSizes.small1X]: 1,
    [imageSizes.small]: 16 / 9,
    [imageSizes.root]: 1,
    [imageSizes.large]: 9 / 16
});

function BaseLink(props) {
    const { innerRef , to , href , isExternal , component: AppLink , testHook , ...otherProps } = props;
    const sharedProps = {
        ...otherProps,
        'data-test': testHook,
        target: isExternal ? '_blank' : undefined,
        rel: isExternal ? 'noopener noreferrer' : undefined,
        ref: innerRef
    };
    if (AppLink) {
        return jsx(AppLink, Object.assign({}, sharedProps, {
            to: to,
            href: href,
            isExternal: isExternal
        }), void 0);
    }
    return jsx("a", Object.assign({}, sharedProps, {
        href: href || to
    }, {
        children: sharedProps.children
    }), void 0);
}
var Link$1 = /*#__PURE__*/ forwardRef(function Link(props, ref) {
    return jsx(BaseLink, Object.assign({}, props, {
        innerRef: ref
    }), void 0);
});

var styles$2 = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","--breakpoint":"min-width: 48.063em","root":"Panel_root__wAggm","icon":"Panel_icon__fewfl","general":"Panel_general__14l0a","info":"Panel_info__o6PO6","important":"Panel_important__vOLcE","panelSlideDown":"Panel_panelSlideDown__5MWkk"};

const variants = keyMirror({
    general: null,
    important: null,
    info: null
});
function Panel$1(props) {
    const { className , variant =variants.general , children  } = props;
    const withIcon = variant === variants.important;
    return jsxs("aside", Object.assign({
        className: cx(styles$2.root, variant && styles$2[variant], className)
    }, {
        children: [
            withIcon && jsx(Icon, {
                name: "lightbulb",
                color: "colorCoreBrand",
                display: {
                    base: 'none',
                    tablet: 'unset'
                },
                className: styles$2.icon
            }, void 0),
            jsx("div", {
                children: children
            }, void 0)
        ]
    }), void 0);
}

const panelNodeName = 'neonPanel';
const remarkMacro = remarkMacroBuilder();
// @ts-ignore TODO-TS
remarkMacro.addMacro('panel', (content, props, param)=>{
    let { transformer , eat  } = param;
    return {
        type: panelNodeName,
        variant: props.type,
        children: transformer.tokenizeBlock(content, eat.now())
    };
});

styled.div`
  --neon-Markdown-bullet-color: ${(props)=>props.color
};
`;
Object.freeze({
    'x-small': imageSizes.small1X,
    small: imageSizes.small,
    medium: imageSizes.root,
    large: imageSizes.large
});
styled(Definition)``;
const Link = styled(Link$1)``;
function Panel(param) {
    let { variant , children ,  } = param;
    return jsx(Panel$1, Object.assign({
        className: styles$5.panel,
        variant: variant
    }, {
        children: children
    }), void 0);
}

function panel(renderer) {
    const id = 'panel';
    return createNode(()=>({
            id,
            // ProseMirror's schema definition, see https://prosemirror.net/docs/guide/#schema
            schema: ()=>({
                    attrs: {
                        variant: {
                            default: undefined
                        }
                    },
                    content: 'block+',
                    group: 'block',
                    defining: true,
                    toDOM: ()=>{
                        return [
                            'aside',
                            {}
                        ];
                    },
                    // From mdast to ProseMirror object
                    parseMarkdown: {
                        match: (node)=>{
                            // console.log(node)
                            return node.type === 'containerDirective' && node.name === id;
                        },
                        runner: (state, node, type)=>{
                            state.openNode(type, {
                                variant: node.attributes.type
                            }).next(node.children).closeNode();
                        }
                    },
                    // From ProseMirror object to mdast
                    toMarkdown: {
                        match: (node)=>{
                            // console.log(node)
                            return node.type.name === id;
                        },
                        runner: (state, node)=>{
                            state.openNode('containerDirective', undefined, {
                                name: id,
                                attributes: {
                                    type: node.attrs.variant
                                }
                            }).next(node.content).closeNode();
                        }
                    }
                })
            ,
            // From ProseMirror object to JSX component
            view: renderer((param)=>{
                let { children  } = param;
                const { node  } = useNodeCtx();
                return jsx(Panel, Object.assign({
                    variant: node.attrs.variant
                }, {
                    children: children
                }), void 0);
            }),
            // Detect user input and transform to a node
            // inputRules: (nodeType) => [
            //   new InputRule(
            //     /^:::panel\{type=(?<variant>[^"]+)?\}\n(?<children>[^:::]+)\n:::/,
            //     (state, match, start, end) => {
            //       const [okay, variant = 'default'] = match;
            //       const { tr } = state;
            //       if (okay) {
            //         tr.replaceWith(start, end, nodeType.create({ variant }));
            //       }
            //       return tr;
            //     }
            //   ),
            // ],
            remarkPlugins: ()=>[
                    directive
                ]
        })
    )();
}

function attachedFile(renderer, renderFileAttachment) {
    const DeleteNode = createCmdKey();
    const id = 'attached-file';
    return createNode(()=>({
            id,
            // ProseMirror's schema definition, see https://prosemirror.net/docs/guide/#schema
            schema: ()=>({
                    attrs: {
                        attachmentId: {
                            default: undefined
                        }
                    },
                    group: 'block',
                    draggable: true,
                    // toDOM must be defined for draggable nodes, even though it's not used
                    toDOM: ()=>{
                        return [
                            'span'
                        ];
                    },
                    // From mdast to ProseMirror object
                    parseMarkdown: {
                        match: (node)=>{
                            return node.type === 'leafDirective' && node.name === id;
                        },
                        runner: (state, node, type)=>{
                            state.addNode(type, {
                                attachmentId: node.attributes.attachmentId
                            });
                        }
                    },
                    // From ProseMirror object to mdast
                    toMarkdown: {
                        match: (node)=>{
                            return node.type.name === id;
                        },
                        runner: (state, node)=>{
                            state.openNode('leafDirective', undefined, {
                                name: id,
                                attributes: {
                                    attachmentId: node.attrs.attachmentId
                                }
                            }).next(node.content).closeNode();
                        }
                    }
                })
            ,
            commands: ()=>[
                    createCmd(DeleteNode, ()=>(state, dispatch)=>{
                            if (!dispatch) return true;
                            deleteSelection(state, dispatch);
                            return true;
                        }
                    ), 
                ]
            ,
            // From ProseMirror object to JSX component
            view: renderer(()=>{
                const { ctx , node: { attrs: { attachmentId  } ,  } ,  } = useNodeCtx();
                const deleteContent = ()=>ctx.get(commandsCtx).call(DeleteNode)
                ;
                return renderFileAttachment({
                    id: attachmentId,
                    onRemove: deleteContent
                });
            }),
            remarkPlugins: ()=>[
                    directive
                ]
        })
    )();
}

const animation = keyframes`
  100% {
    transform: translateX(200%);
  }
`;
const AnimatedWave = styled.div`
  animation: ${animation} 1200ms ease-in-out infinite;
  background: linear-gradient(
    90deg,
    rgba(255, 255, 255, 0),
    rgba(255, 255, 255, 0.6),
    rgba(255, 255, 255, 0)
  );
  height: 100%;
  transform: translateX(-100%);
  width: 50%;

  @media (prefers-reduced-motion) {
    animation: none;
  }
`;
const StyledSkeleton = styled.div.withConfig({
    shouldForwardProp
})(compose(layout, space, {
    backgroundColor: {
        property: 'backgroundColor',
        scale: 'colors'
    },
    borderRadius: {
        property: 'borderRadius',
        scale: 'radii'
    },
    content: customProps.content,
    marginInline: customProps.marginInline,
    position: true
}));
function Skeleton(props) {
    const { animation: animation1 , borderRadius ='borderRadiusRoot' , height =10 , maxWidth ='sizeFull' , testHook , ...otherProps } = props;
    return jsx(StyledSkeleton, Object.assign({
        borderRadius: borderRadius,
        height: height,
        maxWidth: maxWidth
    }, otherProps, {
        backgroundColor: "colorFiftyShadesLightest",
        overflow: "hidden",
        "aria-busy": "true",
        "data-test": testHook
    }, {
        children: animation1 === 'wave' && jsx(AnimatedWave, {}, void 0)
    }), void 0);
}

keyMirror({
    bodyLarge: null,
    bodyRoot: null,
    bodySmall: null,
    bodySmall1X: null,
    bodySmall2X: null,
    bodySmall3X: null,
    lead: null
});
function TextLoader(props) {
    return jsx(Skeleton, Object.assign({}, props, {
        animation: "wave"
    }), void 0);
}

const containerElements = keyMirror({
    article: null,
    div: null,
    p: null,
    section: null,
    span: null
});
keyMirror({
    label: null,
    fieldset: null
});
keyMirror({
    input: null,
    textarea: null
});
keyMirror({
    // this list is not exhaustive
    // https://www.w3.org/TR/2011/WD-html5-20110525/content-models.html#interactive-content
    a: null,
    button: null
});
keyMirror({
    div: null,
    p: null,
    small: null,
    span: null
});
keyMirror({
    meter: null,
    progress: null
});

var styles$1 = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","--breakpoint":"min-width: 48.063em","root":"WithIcon_root__vmCAx","icon":"WithIcon_icon__HZtZw","panelSlideDown":"WithIcon_panelSlideDown__pb1jr"};

const WithIcon = /*#__PURE__*/ forwardRef(function WithIcon(props, ref) {
    const { as: Component = containerElements.div , className , children , iconProps , ...otherProps } = props;
    return jsxs(Component, Object.assign({}, otherProps, {
        className: cx(styles$1.root, className),
        ref: ref
    }, {
        children: [
            jsx("div", Object.assign({
                className: styles$1.icon
            }, {
                children: jsx(Icon, Object.assign({}, iconProps, {
                    size: {
                        base: 'sizeIconSmall',
                        tablet: 'sizeIconRoot'
                    }
                }), void 0)
            }), void 0),
            children
        ]
    }), void 0);
});

var styles = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","--breakpoint":"min-width: 48.063em","root":"AttachmentList_root__acgU4","attachment":"AttachmentList_attachment__80Tu3","removeIcon":"AttachmentList_removeIcon__lgT8L","isTruncated":"AttachmentList_isTruncated__mTljr","isFullWidth":"AttachmentList_isFullWidth__qboTF","externalContent":"AttachmentList_externalContent__AgJmy","externalContentDetails":"AttachmentList_externalContentDetails__-5O8L","externalContentName":"AttachmentList_externalContentName__WKjwU","externalContentMeta":"AttachmentList_externalContentMeta__8V6Ph","isDisabled":"AttachmentList_isDisabled__xFQ3w","panelSlideDown":"AttachmentList_panelSlideDown__WJ5md"};

function ExternalContent(props) {
    const { iconProps , isDisabled , linkProps , meta , name , testHook  } = props;
    return jsx(WithIcon, Object.assign({}, linkProps, {
        as: isDisabled ? 'button' : Link$1,
        iconProps: iconProps,
        className: cx(styles.externalContent, {
            [styles.isDisabled]: isDisabled
        })
    }, {
        children: jsxs("div", Object.assign({
            className: styles.externalContentDetails
        }, {
            children: [
                jsx("div", Object.assign({
                    className: styles.externalContentName,
                    "data-test": testHook && `${testHook}-name`
                }, {
                    children: name
                }), void 0),
                jsx("div", Object.assign({
                    className: styles.externalContentMeta,
                    "data-test": testHook && `${testHook}-meta`
                }, {
                    children: meta
                }), void 0)
            ]
        }), void 0)
    }), void 0);
}
function Attachment(props) {
    const { children , isTruncated =true , onRemove , removeAssistiveText , testHook , validationTextId ,  } = props;
    return jsxs("div", Object.assign({
        className: cx(styles.attachment, {
            [styles.isTruncated]: isTruncated
        }),
        "aria-describedby": validationTextId,
        "data-test": testHook
    }, {
        children: [
            children,
            onRemove && jsx(Box, Object.assign({
                as: "button",
                type: "button",
                onClick: onRemove,
                className: styles.removeIcon
            }, {
                children: jsx(Icon, {
                    name: "close",
                    size: "sizeIconSmall2X",
                    isDecorative: false,
                    title: removeAssistiveText,
                    testHook: testHook && `${testHook}-remove-button`
                }, void 0)
            }), void 0)
        ]
    }), void 0);
}
function Loader() {
    return jsx(Box, Object.assign({
        alignSelf: "center",
        marginInline: "spacingSmall"
    }, {
        children: jsx(TextLoader, {
            width: "sizeFull"
        }, void 0)
    }), void 0);
}
function AttachmentList(props) {
    const { children , testHook  } = props;
    const attachments = flattenChildren(children);
    const hasSingleChild = attachments.length === 1;
    return jsx("ul", Object.assign({
        className: styles.root,
        "data-test": testHook
    }, {
        children: attachments.map((attachment, i)=>jsx("li", Object.assign({
                className: attachment.props.isFullWidth || hasSingleChild ? styles.isFullWidth : undefined
            }, {
                children: attachment
            }), i)
        )
    }), void 0);
}
AttachmentList.Attachment = Attachment;
AttachmentList.ExternalContent = ExternalContent;
AttachmentList.Loader = Loader;

function attachedLink(renderer) {
    const DeleteNode = createCmdKey();
    const id = 'attached-link';
    return createNode(()=>({
            id,
            // ProseMirror's schema definition, see https://prosemirror.net/docs/guide/#schema
            schema: ()=>({
                    attrs: {
                        url: {
                            default: undefined
                        }
                    },
                    group: 'block',
                    draggable: true,
                    parseDOM: [
                        {
                            tag: 'a[data-type="attached-link"]',
                            preserveWhitespace: 'full',
                            getAttrs: (dom)=>{
                                if (!(dom instanceof HTMLElement)) {
                                    throw new Error();
                                }
                                return {
                                    url: dom.getAttribute('href')
                                };
                            }
                        }, 
                    ],
                    toDOM: (node)=>{
                        return [
                            'a',
                            {
                                href: node.attrs.url
                            }, 
                        ];
                    },
                    // From mdast to ProseMirror object
                    parseMarkdown: {
                        match: (node)=>{
                            return node.type === 'leafDirective' && node.name === id;
                        },
                        runner: (state, node, type)=>{
                            state.addNode(type, {
                                url: node.attributes.url
                            });
                        }
                    },
                    // From ProseMirror object to mdast
                    toMarkdown: {
                        match: (node)=>{
                            return node.type.name === id;
                        },
                        runner: (state, node)=>{
                            state.openNode('leafDirective', undefined, {
                                name: id,
                                attributes: {
                                    url: node.attrs.url
                                }
                            }).next(node.content).closeNode();
                        }
                    }
                })
            ,
            commands: ()=>[
                    createCmd(DeleteNode, ()=>(state, dispatch)=>{
                            if (!dispatch) return true;
                            deleteSelection(state, dispatch);
                            return true;
                        }
                    ), 
                ]
            ,
            // From ProseMirror object to JSX component
            view: renderer(()=>{
                const { ctx , node , view  } = useNodeCtx();
                const deleteContent = ()=>ctx.get(commandsCtx).call(DeleteNode)
                ;
                const isEditorReadOnly = !view.editable;
                return jsx(AttachmentList.Attachment, Object.assign({
                    removeAssistiveText: "Remove link",
                    onRemove: isEditorReadOnly ? undefined : deleteContent
                }, {
                    children: jsx(AttachmentList.ExternalContent, {
                        linkProps: {
                            component: Link,
                            href: node.attrs.url,
                            isExternal: true
                        },
                        iconProps: {
                            name: 'link',
                            color: 'colorFiftyShadesLight'
                        },
                        name: node.attrs.url,
                        meta: "Link"
                    }, void 0)
                }), void 0);
            }),
            remarkPlugins: ()=>[
                    directive
                ]
        })
    )();
}

function atomiContent(renderer, renderAtomiContent) {
    const DeleteNode = createCmdKey();
    const id = 'atomi-content';
    return createNode(()=>({
            id,
            // ProseMirror's schema definition, see https://prosemirror.net/docs/guide/#schema
            schema: ()=>({
                    attrs: {
                        postId: {
                            default: undefined
                        }
                    },
                    group: 'block',
                    draggable: true,
                    parseDOM: [
                        {
                            tag: 'a[data-type="atomi-content"]',
                            preserveWhitespace: 'full',
                            getAttrs: (dom)=>{
                                if (!(dom instanceof HTMLElement)) {
                                    throw new Error();
                                }
                                return {
                                    postId: dom.getAttribute('data-post-id')
                                };
                            }
                        }, 
                    ],
                    toDOM: (node)=>{
                        return [
                            'a',
                            {
                                href: `/post/${node.attrs.postId}`,
                                'data-post-id': node.attrs.postId
                            }, 
                        ];
                    },
                    // From mdast to ProseMirror object
                    parseMarkdown: {
                        match: (node)=>{
                            return node.type === 'leafDirective' && node.name === id;
                        },
                        runner: (state, node, type)=>{
                            state.addNode(type, {
                                postId: node.attributes.postId
                            });
                        }
                    },
                    // From ProseMirror object to mdast
                    toMarkdown: {
                        match: (node)=>{
                            return node.type.name === id;
                        },
                        runner: (state, node)=>{
                            state.openNode('leafDirective', undefined, {
                                name: id,
                                attributes: {
                                    postId: node.attrs.postId
                                }
                            }).next(node.content).closeNode();
                        }
                    }
                })
            ,
            commands: ()=>[
                    createCmd(DeleteNode, ()=>(state, dispatch)=>{
                            if (!dispatch) return true;
                            deleteSelection(state, dispatch);
                            return true;
                        }
                    ), 
                ]
            ,
            // From ProseMirror object to JSX component
            view: renderer(()=>{
                const { ctx , node  } = useNodeCtx();
                const deleteContent = ()=>ctx.get(commandsCtx).call(DeleteNode)
                ;
                return renderAtomiContent({
                    id: node.attrs.postId,
                    onRemove: deleteContent
                });
            }),
            remarkPlugins: ()=>[
                    directive
                ]
        })
    )();
}

function placeholder1(placeholder) {
    return createPlugin(()=>{
        return {
            prosePlugins: ()=>{
                // Create a new Prosemirror plugin
                // https://prosemirror.net/docs/guide/#state.plugins
                // https://prosemirror.net/docs/ref/#state.Plugin_System
                const plugin = new Plugin({
                    props: {
                        decorations (state) {
                            // Prosemirror empty state defaults to an empty p tag.
                            // It's document size includes the open and close tokens of the element.
                            // So even when empty, these are counted and size evalutates to 2
                            // https://prosemirror.net/docs/guide/#doc.indexing
                            // https://prosemirror.net/docs/ref/#model.Node.nodeSize
                            const isEmptyNode = state.doc.content.size === 2;
                            if (isEmptyNode) {
                                const decorations = [
                                    Decoration.node(0, 2, {
                                        class: 'placeholder',
                                        style: `--placeholder: '${placeholder}'`
                                    }), 
                                ];
                                return DecorationSet.create(state.doc, decorations);
                            }
                        }
                    }
                });
                return [
                    plugin
                ];
            }
        };
    });
}

var editorStyles = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","menu":"Editor_menu__z0r9B","panelSlideDown":"Editor_panelSlideDown__tNg14"};

const hasMark = (state, type)=>{
    const { from , $from , to , empty  } = state.selection;
    if (empty) {
        return !!type.isInSet(state.storedMarks || $from.marks());
    }
    return state.doc.rangeHasMark(from, to, type);
};
function useMenu() {
    const containerRef = useRef(null);
    const container = jsx("div", {
        ref: containerRef,
        className: editorStyles.menu
    }, void 0);
    const plugin = menu({
        headless: true,
        domHandler: (param)=>{
            let { menu: menu1 , menuWrapper , editorDOM  } = param;
            var ref;
            menuWrapper.replaceChildren(menu1);
            const milkdown = editorDOM.parentElement;
            if (!milkdown) {
                throw new Error('No parent node found');
            }
            (ref = containerRef.current) === null || ref === void 0 ? void 0 : ref.replaceChildren(menuWrapper);
        },
        config: [
            [
                {
                    type: 'select',
                    text: 'Heading',
                    options: [
                        {
                            id: '2',
                            text: 'Heading'
                        },
                        {
                            id: '3',
                            text: 'Subheading'
                        },
                        {
                            id: '0',
                            text: 'Normal'
                        }, 
                    ],
                    disabled: (view)=>{
                        const { state  } = view;
                        const setToHeading = (level)=>setBlockType(state.schema.nodes.heading, {
                                level
                            })(state)
                        ;
                        const setToParagraph = ()=>setBlockType(state.schema.nodes.paragraph)(state)
                        ;
                        return !(setToHeading(2) || setToHeading(3) || setToParagraph());
                    },
                    onSelect: (id)=>{
                        if (id === '0') {
                            return [
                                TurnIntoText
                            ];
                        }
                        return [
                            TurnIntoHeading,
                            Number(id)
                        ];
                    }
                }, 
            ],
            [
                {
                    type: 'button',
                    icon: 'bold',
                    key: ToggleBold,
                    active: (view)=>hasMark(view.state, view.state.schema.marks.strong)
                },
                {
                    type: 'button',
                    icon: 'italic',
                    key: ToggleItalic,
                    active: (view)=>hasMark(view.state, view.state.schema.marks.em)
                }, 
            ],
            [
                {
                    type: 'button',
                    icon: 'bulletList',
                    key: WrapInBulletList,
                    disabled: (view)=>{
                        const { state  } = view;
                        return !wrapIn(state.schema.nodes.bullet_list)(state);
                    }
                },
                {
                    type: 'button',
                    icon: 'orderedList',
                    key: WrapInOrderedList,
                    disabled: (view)=>{
                        const { state  } = view;
                        return !wrapIn(state.schema.nodes.ordered_list)(state);
                    }
                }, 
            ],
            []
        ]
    });
    return {
        menuPlugin: plugin,
        menu: container
    };
}

function useEditor(props) {
    const { ariaLabel , ariaLabelledBy , children: markdown1 , onChange , renderAtomiContent , renderFileAttachment , readOnly =false , placeholder ,  } = props;
    const { menuPlugin , menu  } = useMenu();
    const editorInstance1 = useEditor$1((root, renderReact)=>{
        const nodes = gfm// reset className to use an unstyled link
        .configure(link, {
            className: ()=>''
        }).configure(paragraph, {
            className: (attrs)=>cx(styles$5.paragraph, {
                    [styles$5.collapse]: attrs.collapse
                })
        }).configure(blockquote, {
            className: ()=>styles$5.blockquote
        }).configure(em, {
            className: ()=>styles$5.em
        }).configure(listItem, {
            className: ()=>styles$5.li
        }).configure(orderedList, {
            className: ()=>styles$5.ol
        }).configure(bulletList, {
            className: ()=>styles$5.ul
        }).configure(heading, {
            className: (attrs)=>cx(styles$5.heading, styles$5[`h${attrs.level}`])
        });
        const customNodes = [
            panel(renderReact),
            attachedLink(renderReact)
        ];
        if (renderFileAttachment) {
            customNodes.push(attachedFile(renderReact, renderFileAttachment));
        }
        if (renderAtomiContent) {
            customNodes.push(atomiContent(renderReact, renderAtomiContent));
        }
        const textboxAttributes = {
            ...ariaLabel && {
                'aria-label': ariaLabel
            },
            ...ariaLabelledBy && {
                'aria-labelledby': ariaLabelledBy
            }
        };
        const editorInstance = Editor.make().config((ctx1)=>{
            ctx1.set(rootCtx, root);
            ctx1.set(editorViewOptionsCtx, {
                attributes: textboxAttributes,
                editable: ()=>!readOnly
            });
            ctx1.get(listenerCtx).updated((ctx, doc)=>{
                const serializer = ctx.get(serializerCtx);
                const atomiContent1 = findChildren((node)=>node.type.name === 'atomi-content'
                )(doc);
                const attachedFiles = findChildren((node)=>node.type.name === 'attached-file'
                )(doc);
                const attachedLinks = findChildren((node)=>node.type.name === 'attached-link'
                )(doc);
                onChange && onChange({
                    markdown: serializer(doc),
                    atomiContent: atomiContent1,
                    attachedFiles,
                    attachedLinks
                });
            });
            if (markdown1) {
                ctx1.set(defaultValueCtx, markdown1);
            }
        }).use(atomiTheme).use(cursor).use(history).use(nodes).use(AtomList.create(customNodes)).use(math).use(listener);
        if (placeholder) {
            editorInstance.use(placeholder1(placeholder)());
        }
        if (!readOnly) {
            editorInstance.use(menuPlugin);
        }
        return editorInstance;
    });
    const editorRef = useRef(null);
    const editor1 = jsx(ReactEditor, {
        ref: editorRef,
        editor: editorInstance1
    }, void 0);
    const insertContent = (markdown)=>{
        var ref;
        const editor = (ref = editorRef.current) === null || ref === void 0 ? void 0 : ref.get();
        // on the editor view, dispatch an action that adds content at a determined location
        editor === null || editor === void 0 ? void 0 : editor.action((ctx)=>{
            const parser = ctx.get(parserCtx);
            const doc = parser(markdown);
            if (!doc) {
                return;
            }
            const view = ctx.get(editorViewCtx);
            const { selection , tr  } = view.state;
            view.dispatch(// insert content after the currently selected element
            tr.insert(selection.$anchor.end(), doc.content));
            // move focus back to the editor so the user can continue typing
            view.focus();
        });
    };
    const insertAttachedLink = (url)=>{
        const markdown = `::attached-link{ url="${url}" }`;
        insertContent(markdown);
    };
    const insertAtomiContent = (postId)=>{
        const markdown = `::atomi-content{ postId="${postId}" }`;
        insertContent(markdown);
    };
    const insertAttachedFile = (attachmentId)=>{
        const markdown = `::attached-file{ attachmentId="${attachmentId}" }`;
        insertContent(markdown);
    };
    const update = ()=>{
        var ref;
        const editor = (ref = editorRef.current) === null || ref === void 0 ? void 0 : ref.get();
        editor === null || editor === void 0 ? void 0 : editor.action((ctx)=>{
            const view = ctx.get(editorViewCtx);
            // @ts-ignore - nodeViews is added by Milkdown to the ProseMirror EditorView
            const { image , ...rest } = view.nodeViews;
            // reset the nodeViews with `image` pretending to be new so as to force a re-render of all views
            // https://discuss.prosemirror.net/t/force-todom-to-be-re-executed/3627/2
            view.setProps({
                nodeViews: {
                    image: ()=>image()
                    ,
                    ...rest
                }
            });
            view.focus();
        });
    };
    return {
        editor: editor1,
        menu,
        insertAttachedLink,
        insertAtomiContent,
        insertAttachedFile,
        update
    };
}

export { useEditor as default };
