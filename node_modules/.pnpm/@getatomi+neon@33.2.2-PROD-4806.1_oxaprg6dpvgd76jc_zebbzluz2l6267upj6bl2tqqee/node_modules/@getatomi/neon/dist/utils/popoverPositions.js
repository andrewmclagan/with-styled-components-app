import { positionDefault, getCollisions, positionMatchWidth } from '@reach/popover';
export { positionDefault, positionMatchWidth, positionRight } from '@reach/popover';

const createPositionMaxWidth = (maxWidth)=>(targetRect, popoverRect)=>({
            ...positionDefault(targetRect, popoverRect),
            maxWidth
        })
;
const createDOMRectFromRef = (ref)=>{
    var ref1;
    const boundingClient = (ref1 = ref.current) === null || ref1 === void 0 ? void 0 : ref1.getBoundingClientRect();
    // DOMRect is undefined in jsdom (e.g. Carbon unit tests)
    if (typeof DOMRect === 'undefined') {
        return null;
    }
    return new DOMRect(boundingClient === null || boundingClient === void 0 ? void 0 : boundingClient.x, boundingClient === null || boundingClient === void 0 ? void 0 : boundingClient.y, boundingClient === null || boundingClient === void 0 ? void 0 : boundingClient.width, boundingClient === null || boundingClient === void 0 ? void 0 : boundingClient.height);
};
// Custom popover position function for ComboboxPopover and MenuPopover. It can add an offset so
// that it doesn't overlay the element, and it can match a targeted elements width.
const popoverPosition = function() {
    let { targetContainer , offset =5  } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    return (targetRect, popoverRect)=>{
        const triggerPosition = targetContainer ? createDOMRectFromRef(targetContainer) : targetRect;
        const position = positionDefault(triggerPosition, popoverRect);
        var _top;
        const positionTop = typeof position.top === 'string' ? parseFloat(position.top) : (_top = position.top) !== null && _top !== void 0 ? _top : 0;
        const directionUp = targetRect && popoverRect ? getCollisions(targetRect, popoverRect).directionUp : undefined;
        return {
            ...position,
            top: directionUp ? `${positionTop - offset}px` : `${positionTop + offset}px`,
            minWidth: positionMatchWidth(triggerPosition, popoverRect).width
        };
    };
};

export { createPositionMaxWidth, popoverPosition };
