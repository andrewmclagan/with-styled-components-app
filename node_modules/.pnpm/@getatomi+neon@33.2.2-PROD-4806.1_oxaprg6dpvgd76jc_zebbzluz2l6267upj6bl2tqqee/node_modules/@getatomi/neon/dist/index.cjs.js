'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

require('what-input');
require('core-js/modules/web.dom-collections.iterator.js');
var jsxRuntime = require('react/jsx-runtime');
var react = require('react');
var flattenChildren = require('react-flatten-children');
var cx = require('classnames');
var accordion = require('@reach/accordion');
var styled = require('styled-components');
var systemProps = require('system-props');
var keyMirror = require('keymirror');
var _ = require('lodash');
var ReactModal = require('react-modal');
var ReactIs = require('react-is');
var reactResponsive = require('react-responsive');
var json2mq = require('json2mq');
var alertDialog = require('@reach/alert-dialog');
var useMergedRef = require('@react-hook/merged-ref');
var useOnClickOutside = require('use-onclickoutside');
var combobox = require('@reach/combobox');
var autoId = require('@reach/auto-id');
var invariant = require('invariant');
var dialog = require('@reach/dialog');
var Popover = require('@reach/popover');
var Tippy = require('@tippyjs/react');
var menuButton = require('@reach/menu-button');
var interactions = require('@react-aria/interactions');
var checkbox = require('@reach/checkbox');
var moment = require('moment');
require('react-dates/initialize');
var reactDates = require('react-dates');
var defaultPhrases = require('react-dates/lib/defaultPhrases');
var core = require('@dnd-kit/core');
var modifiers = require('@dnd-kit/modifiers');
var ChildrenUtils = require('react-children-utilities');
var ReactMarkdown = require('react-markdown');
require('katex/dist/contrib/mhchem.js');
require('core-js/modules/esnext.map.delete-all.js');
require('core-js/modules/esnext.map.every.js');
require('core-js/modules/esnext.map.filter.js');
require('core-js/modules/esnext.map.find.js');
require('core-js/modules/esnext.map.find-key.js');
require('core-js/modules/esnext.map.includes.js');
require('core-js/modules/esnext.map.key-of.js');
require('core-js/modules/esnext.map.map-keys.js');
require('core-js/modules/esnext.map.map-values.js');
require('core-js/modules/esnext.map.merge.js');
require('core-js/modules/esnext.map.reduce.js');
require('core-js/modules/esnext.map.some.js');
require('core-js/modules/esnext.map.update.js');
var reactKatex = require('react-katex');
var remarkAttr = require('remark-attr');
var remarkMacroBuilder = require('remark-macro');
var remarkMath = require('remark-math');
var remarkTerms = require('remark-terms');
var remarkUnwrapImages = require('remark-unwrap-images');
var utilities = require('@dnd-kit/utilities');
var recharts = require('recharts');
require('core-js/modules/es.string.replace.js');
var reactWindow = require('react-window');
var AutoSizer = require('react-virtualized-auto-sizer');
var checkbox$2 = require('@react-aria/checkbox');
var radio$1 = require('@react-aria/radio');
var checkbox$1 = require('@react-stately/checkbox');
var radio = require('@react-stately/radio');
var focus$1 = require('@react-aria/focus');
var intlTelInput = require('intl-tel-input');
var utils = require('@react-aria/utils');
var reactInstantsearchDom = require('react-instantsearch-dom');
var reactIntersectionObserver = require('react-intersection-observer');
var _switch = require('@react-aria/switch');
var toggle = require('@react-stately/toggle');
var reactTable = require('@tanstack/react-table');
var tabs = require('@reach/tabs');
var useScript = require('react-script-hook');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var flattenChildren__default = /*#__PURE__*/_interopDefaultLegacy(flattenChildren);
var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);
var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);
var keyMirror__default = /*#__PURE__*/_interopDefaultLegacy(keyMirror);
var ___default = /*#__PURE__*/_interopDefaultLegacy(_);
var ReactModal__default = /*#__PURE__*/_interopDefaultLegacy(ReactModal);
var ReactIs__namespace = /*#__PURE__*/_interopNamespace(ReactIs);
var json2mq__default = /*#__PURE__*/_interopDefaultLegacy(json2mq);
var useMergedRef__default = /*#__PURE__*/_interopDefaultLegacy(useMergedRef);
var useOnClickOutside__default = /*#__PURE__*/_interopDefaultLegacy(useOnClickOutside);
var invariant__default = /*#__PURE__*/_interopDefaultLegacy(invariant);
var Popover__default = /*#__PURE__*/_interopDefaultLegacy(Popover);
var Tippy__default = /*#__PURE__*/_interopDefaultLegacy(Tippy);
var moment__default = /*#__PURE__*/_interopDefaultLegacy(moment);
var ChildrenUtils__default = /*#__PURE__*/_interopDefaultLegacy(ChildrenUtils);
var ReactMarkdown__default = /*#__PURE__*/_interopDefaultLegacy(ReactMarkdown);
var remarkAttr__default = /*#__PURE__*/_interopDefaultLegacy(remarkAttr);
var remarkMacroBuilder__default = /*#__PURE__*/_interopDefaultLegacy(remarkMacroBuilder);
var remarkMath__default = /*#__PURE__*/_interopDefaultLegacy(remarkMath);
var remarkTerms__default = /*#__PURE__*/_interopDefaultLegacy(remarkTerms);
var remarkUnwrapImages__default = /*#__PURE__*/_interopDefaultLegacy(remarkUnwrapImages);
var AutoSizer__default = /*#__PURE__*/_interopDefaultLegacy(AutoSizer);
var intlTelInput__default = /*#__PURE__*/_interopDefaultLegacy(intlTelInput);
var useScript__default = /*#__PURE__*/_interopDefaultLegacy(useScript);

// Custom prop configurations not included in system-props
const customProps = {
    appearance: true,
    aspectRatio: true,
    columnGap: {
        property: 'columnGap',
        scale: 'space'
    },
    content: true,
    cursor: true,
    gap: {
        property: 'gap',
        scale: 'space'
    },
    marginBlock: {
        properties: [
            'marginTop',
            'marginBottom'
        ],
        scale: 'space'
    },
    marginInline: {
        properties: [
            'marginLeft',
            'marginRight'
        ],
        scale: 'space'
    },
    outlineColor: {
        property: 'outlineColor',
        scale: 'colors'
    },
    outlineOffset: {
        property: 'outlineOffset',
        scale: 'space'
    },
    outlineStyle: true,
    outlineWidth: {
        property: 'outlineWidth',
        scale: 'borderWidths'
    },
    paddingBlock: {
        properties: [
            'paddingTop',
            'paddingBottom'
        ],
        scale: 'space'
    },
    paddingInline: {
        properties: [
            'paddingLeft',
            'paddingRight'
        ],
        scale: 'space'
    },
    resize: true,
    rowGap: {
        property: 'rowGap',
        scale: 'space'
    },
    strokeWidth: true,
    textDecoration: true,
    textDecorationColor: true,
    textDecorationThickness: true,
    textIndent: {
        property: 'textIndent',
        scale: 'letterSpacings'
    },
    textOverflow: true,
    textTransform: true,
    transition: {
        property: 'transition',
        scale: 'transitions'
    },
    transform: true,
    visibility: true,
    whiteSpace: true
};
const customPseudoSelectors = {
    _title: '&[title]',
    _activeEnabled: '&:active:enabled'
};
const pseudoSelectors = {
    ...systemProps.pseudoSelectors,
    ...customPseudoSelectors
};
// Custom shouldForwardProp function to filter out custom props so that they are
// not passed to the DOM
const shouldForwardProp = (prop)=>!Object.keys({
        ...customProps,
        ...customPseudoSelectors
    }).includes(prop) && systemProps.shouldForwardProp(prop)
;
// Configure our system props
// https://system-props.com/docs/api-system
const system = systemProps.createSystem({
    tokenPrefix: 'noprefix',
    pseudoSelectors
});
// Utility function to easily compose prop configurations
//  https://system-props.com/docs/api-prop-configurations
function compose() {
    for(var _len = arguments.length, configurations = new Array(_len), _key = 0; _key < _len; _key++){
        configurations[_key] = arguments[_key];
    }
    return system(Object.assign({}, ...configurations));
}

// Using shouldForwardProp to avoid styling props to be passed down to the HTML element
const StyledBox = styled__default["default"].div.withConfig({
    shouldForwardProp
})(compose(systemProps.border, systemProps.color, customProps, systemProps.flexbox, systemProps.grid, systemProps.layout, systemProps.position, systemProps.space, systemProps.typography, {
    boxShadow: {
        property: 'boxShadow',
        scale: 'shadows'
    }
}));
const Box = /*#__PURE__*/ react.forwardRef(function Box(props, ref) {
    const { children , testHook , vars , ...otherProps } = props;
    return(// @ts-ignore styled-components adds "Non-standard Attribute" "color" of
    // value string | undefined which conflicts
    jsxRuntime.jsx(StyledBox, Object.assign({}, otherProps, {
        ref: ref,
        style: vars,
        "data-test": testHook
    }, {
        children: children
    }), void 0));
});

var styles$10 = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","root":"HideVisually_root__VdJqg","panelSlideDown":"HideVisually_panelSlideDown__AYxyt"};

function HideVisually(props) {
    const { as ='span' , children  } = props;
    return jsxRuntime.jsx(Box, Object.assign({
        as: as,
        className: styles$10.root
    }, {
        children: children
    }), void 0);
}

const SvgIconActionFlip = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("g", Object.assign({
                stroke: "currentColor",
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, {
                children: [
                    jsxRuntime.jsx("path", {
                        d: "M2 3.093V8.56h5.556"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M22 8.523C20.627 4.7 16.353 2 12 2S3.373 4.74 2 8.56M22 20.549v-5.467h-5.556"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M2 15.082c1.373 3.822 5.647 6.56 10 6.56s8.627-2.74 10-6.56"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$1O = /*#__PURE__*/ react.forwardRef(SvgIconActionFlip);

const SvgIconAlertError = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: [
                    jsxRuntime.jsx("circle", {
                        cx: 12,
                        cy: 12,
                        r: 11
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M12.522 16.928a.522.522 0 1 1-1.044 0 .522.522 0 0 1 1.044 0ZM12 6v6.615"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$1N = /*#__PURE__*/ react.forwardRef(SvgIconAlertError);

const SvgIconAlertGeneral = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: jsxRuntime.jsx("path", {
                    d: "M3.667 1h7v4.333h11l-7.5 6 7.5 6h-15c0-2.25 4-4.333 4-4.333h-7V1ZM10.667 4v9M3.5.5v23"
                }, void 0)
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$1M = /*#__PURE__*/ react.forwardRef(SvgIconAlertGeneral);

const SvgIconAlertInfo = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: [
                    jsxRuntime.jsx("circle", {
                        cx: 12,
                        cy: 12,
                        r: 11
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M12.522 5.928a.522.522 0 1 1-1.044 0 .522.522 0 0 1 1.044 0ZM12 11v6.615"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$1L = /*#__PURE__*/ react.forwardRef(SvgIconAlertInfo);

const SvgIconAlertSuccess = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("g", Object.assign({
                stroke: "currentColor",
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, {
                children: [
                    jsxRuntime.jsx("path", {
                        d: "m17.15 8.652-7.175 6.696-2.39-2.391"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M23 12c0 6.076-4.926 11-11 11-6.077 0-11-4.924-11-11S5.923 1 12 1c6.074 0 11 4.924 11 11h0Z"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$1K = /*#__PURE__*/ react.forwardRef(SvgIconAlertSuccess);

const SvgIconAlertWarning = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("g", Object.assign({
                stroke: "currentColor",
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, {
                children: [
                    jsxRuntime.jsx("path", {
                        d: "M12 16.493V8.507M23.478 23.478H.522L12 .522z"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M12.522 19.826a.522.522 0 0 1-.522.522h0a.522.522 0 0 1-.522-.522h0c0-.288.234-.522.522-.522h0c.288 0 .522.234.522.522h0Z"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$1J = /*#__PURE__*/ react.forwardRef(SvgIconAlertWarning);

const SvgIconArrowBack = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: jsxRuntime.jsx("path", {
                    d: "M2 12h21M7 6l-6 6 6 6"
                }, void 0)
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$1I = /*#__PURE__*/ react.forwardRef(SvgIconArrowBack);

const SvgIconArrowDown = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: jsxRuntime.jsx("path", {
                    d: "m18 15-6 7-6-7M12 21.5V2.481"
                }, void 0)
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$1H = /*#__PURE__*/ react.forwardRef(SvgIconArrowDown);

const SvgIconArrowFront = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("g", Object.assign({
                stroke: "currentColor",
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, {
                children: jsxRuntime.jsx("path", {
                    d: "M22 12H1M17 18l6-6-6-6"
                }, void 0)
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$1G = /*#__PURE__*/ react.forwardRef(SvgIconArrowFront);

const SvgIconArrowUp = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: jsxRuntime.jsx("path", {
                    d: "m18 9-6-7-6 7M12 21.772V2.6"
                }, void 0)
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$1F = /*#__PURE__*/ react.forwardRef(SvgIconArrowUp);

const SvgIconAtom = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("g", Object.assign({
                stroke: "currentColor",
                fill: "none",
                fillRule: "evenodd"
            }, {
                children: [
                    jsxRuntime.jsx("path", {
                        d: "M14.828 4.222c1.563 4.296 1.563 11.26 0 15.556-1.562 4.296-4.094 4.296-5.656 0-1.563-4.296-1.563-11.26 0-15.556 1.562-4.296 4.094-4.296 5.656 0"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M20.012 9.924c-2.655 3.72-8.394 7.667-12.819 8.814-4.424 1.147-5.86-.94-3.205-4.662 2.655-3.72 8.394-7.667 12.819-8.814 4.424-1.147 5.86.94 3.205 4.662"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M16.807 18.738C12.382 17.59 6.643 13.645 3.988 9.924c-2.654-3.722-1.22-5.809 3.205-4.662 4.425 1.147 10.164 5.093 12.819 8.814 2.654 3.722 1.22 5.809-3.205 4.662"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$1E = /*#__PURE__*/ react.forwardRef(SvgIconAtom);

const SvgIconAttachment = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("path", {
                d: "M9.5 17V9.5c0-1.656.843-3 2.5-3s2.5 1.344 2.5 3V19c0 2.486-1.515 4.5-4 4.5-2.485 0-4-2.014-4-4.5V6.5c0-3.314 2.187-6 5.5-6s5.5 2.686 5.5 6v9",
                stroke: "currentColor",
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$1D = /*#__PURE__*/ react.forwardRef(SvgIconAttachment);

const SvgIconAvatar = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("g", Object.assign({
                transform: "translate(1 1)",
                stroke: "currentColor",
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, {
                children: [
                    jsxRuntime.jsx("circle", {
                        cx: 11,
                        cy: 11,
                        r: 11
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M17.875 11.917A6.874 6.874 0 0 1 11 18.792a6.874 6.874 0 0 1-6.875-6.875M5.042 9.167c0-2.423 3.666-2.426 3.666 0M16.958 9.167c0-2.423-3.666-2.426-3.666 0"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$1C = /*#__PURE__*/ react.forwardRef(SvgIconAvatar);

const SvgIconBadge = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: [
                    jsxRuntime.jsx("path", {
                        d: "M4.21 14.068.5 20.478l3.85-.66 1.33 3.66 3.28-5.52M19.672 14.157l3.66 6.32-3.86-.66-1.34 3.66-3.28-5.49"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M12 .5a9 9 0 1 0 0 18 9 9 0 0 0 0-18h0Z"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "m12 4.5 1.5 3h3L14 10l1 3.5-3-1.88-3 1.87 1-3.5-2.5-2.5h3z"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$1B = /*#__PURE__*/ react.forwardRef(SvgIconBadge);

const SvgIconBinDelete = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("path", {
                clipRule: "evenodd",
                d: "M3.5 23.5h16v-20h-16v20ZM7.5 3.5h8v-3h-8v3Z",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0),
            jsxRuntime.jsx("path", {
                d: "M1 3.5h22M7.5 7v12M11.5 7v12M15.5 7v12",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$1A = /*#__PURE__*/ react.forwardRef(SvgIconBinDelete);

const SvgIconBlog = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: [
                    jsxRuntime.jsx("path", {
                        d: "m16 22.5-3.5 1 1-3.5 7.502-7.502 2.5 2.5L16 22.5Zm3-8 2.5 2.5m-8 3 2.5 2.5M3.48 6.5h4.5m-4.5 3h8m-8 3h6m-6 3h5M11 21.5H.5V.5h11l5 5v8"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M11.5.5v5h5"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$1z = /*#__PURE__*/ react.forwardRef(SvgIconBlog);

const SvgIconBold = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("path", {
                d: "M5.334 2v20m0-10.435h6.384c2.983 0 5.402-2.14 5.402-4.782C17.12 4.142 14.7 2 11.718 2H5.334m6.384 9.566h1.473c3.253 0 5.893 2.336 5.893 5.217S16.444 22 13.19 22H5.334",
                stroke: "currentColor",
                strokeMiterlimit: 10,
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$1y = /*#__PURE__*/ react.forwardRef(SvgIconBold);

const SvgIconBrowserAdd = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: [
                    jsxRuntime.jsx("path", {
                        d: "M.5 4.5h20M3.5 2c-.28 0-.5.22-.5.5 0 .27.22.5.5.5.27 0 .5-.23.5-.5 0-.28-.23-.5-.5-.5h0ZM5.5 2c-.28 0-.5.22-.5.5 0 .27.22.5.5.5.27 0 .5-.23.5-.5 0-.28-.23-.5-.5-.5h0ZM7.5 2c-.28 0-.5.22-.5.5 0 .27.22.5.5.5.27 0 .5-.23.5-.5 0-.28-.23-.5-.5-.5h0Z"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M8.5 16.5h-6c-1.104 0-2-.9-2-2v-12c0-1.104.89-2 2-2h16a2 2 0 0 1 2 2v6"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M17.5 11.5a6 6 0 1 0 0 12 6 6 0 0 0 0-12ZM15 17.5h5M17.5 20v-5"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$1x = /*#__PURE__*/ react.forwardRef(SvgIconBrowserAdd);

const SvgIconCalendarTick = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("path", {
                clipRule: "evenodd",
                d: "M23.5 17.5c0 3.315-2.686 6-6 6s-6-2.685-6-6a6 6 0 1 1 12 0v0Z",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0),
            jsxRuntime.jsx("path", {
                d: "m20.5 15.5-4 4-2-2M20.5 10V2.5h-4M4.5 2.5h-4v16h9",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0),
            jsxRuntime.jsx("path", {
                clipRule: "evenodd",
                d: "M4.5 4.5h3v-4h-3v4ZM13.5 4.5h3v-4h-3v4Z",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0),
            jsxRuntime.jsx("path", {
                d: "M7.5 2.5h6M.5 7.5h20",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$1w = /*#__PURE__*/ react.forwardRef(SvgIconCalendarTick);

const SvgIconCalendar = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("g", Object.assign({
                stroke: "currentColor",
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, {
                children: [
                    jsxRuntime.jsx("path", {
                        d: "M4.5 2.5h-4v21h23v-21h-4"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M5.5.5h3v6h-3zM15.5.5h3v6h-3zM.5 11.5h23M8.5 2.5h7M19 2.5h4.5M.75 2.5h4.5"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$1v = /*#__PURE__*/ react.forwardRef(SvgIconCalendar);

const SvgIconCheck = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("path", {
                stroke: "currentColor",
                d: "M22 5 8.667 19 2 12",
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$1u = /*#__PURE__*/ react.forwardRef(SvgIconCheck);

const SvgIconChevron = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("path", {
                stroke: "currentColor",
                d: "m0 6 12 12L24 6",
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$1t = /*#__PURE__*/ react.forwardRef(SvgIconChevron);

const SvgIconCircleCheck = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: [
                    jsxRuntime.jsx("path", {
                        strokeWidth: 1.5,
                        d: "m17 9-6.667 7L7 12.5"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M20.081 3.877c4.475 4.475 4.475 11.73 0 16.204-4.474 4.475-11.73 4.475-16.204 0-4.475-4.474-4.475-11.73 0-16.204 4.475-4.475 11.73-4.475 16.204 0"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$1s = /*#__PURE__*/ react.forwardRef(SvgIconCircleCheck);

const SvgIconCircleHelp = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                stroke: "currentColor"
            }, {
                children: [
                    jsxRuntime.jsx("circle", {
                        cx: 12,
                        cy: 12,
                        r: 11.478
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M8.87 9.391a3.13 3.13 0 1 1 3.13 3.13v3.131M12.522 18.26a.522.522 0 1 1-1.044 0 .522.522 0 0 1 1.044 0Z"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$1r = /*#__PURE__*/ react.forwardRef(SvgIconCircleHelp);

const SvgIconCirclePlay = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: [
                    jsxRuntime.jsx("circle", {
                        cx: 12,
                        cy: 12,
                        r: 11
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M9.5 16.5v-9l7 4.5z"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$1q = /*#__PURE__*/ react.forwardRef(SvgIconCirclePlay);

const SvgIconCirclePractice = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: [
                    jsxRuntime.jsx("circle", {
                        cx: 12,
                        cy: 12,
                        r: 11
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M9.917 15.335 7 16.168l.833-2.916L14.085 7l2.083 2.083zM12.417 8.668l2.083 2.084M7.833 13.252l2.084 2.083M7 16.5h8"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$1p = /*#__PURE__*/ react.forwardRef(SvgIconCirclePractice);

const SvgIconCircleProgress = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("circle", {
                stroke: "currentColor",
                strokeWidth: 4,
                cx: 12,
                cy: 12,
                r: 10,
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$1o = /*#__PURE__*/ react.forwardRef(SvgIconCircleProgress);

const SvgIconCircleSolidCheck = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, {
                children: [
                    jsxRuntime.jsx("path", {
                        d: "M20.081 3.877c4.475 4.475 4.475 11.73 0 16.204-4.474 4.475-11.73 4.475-16.204 0-4.475-4.474-4.475-11.73 0-16.204 4.475-4.475 11.73-4.475 16.204 0",
                        stroke: "currentColor",
                        fill: "currentColor"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        stroke: "#FFF",
                        strokeWidth: 1.5,
                        d: "m17 9-6.667 7L7 12.5"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$1n = /*#__PURE__*/ react.forwardRef(SvgIconCircleSolidCheck);

const SvgIconCircleSolidCross = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd"
            }, {
                children: [
                    jsxRuntime.jsx("path", {
                        d: "M20.485 3.515c4.687 4.686 4.687 12.284 0 16.97-4.686 4.687-12.284 4.687-16.97 0-4.687-4.686-4.687-12.284 0-16.97 4.686-4.687 12.284-4.687 16.97 0",
                        stroke: "currentColor",
                        fill: "currentColor",
                        strokeLinecap: "round",
                        strokeLinejoin: "round"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M7.237 7.237a.81.81 0 0 0 0 1.144l8.382 8.382a.81.81 0 1 0 1.144-1.144L8.381 7.237a.81.81 0 0 0-1.144 0Z",
                        fill: "#FFF",
                        fillRule: "nonzero"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "m15.619 7.237-8.382 8.382a.81.81 0 1 0 1.144 1.144l8.382-8.382a.81.81 0 1 0-1.144-1.144Z",
                        fill: "#FFF",
                        fillRule: "nonzero"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$1m = /*#__PURE__*/ react.forwardRef(SvgIconCircleSolidCross);

const SvgIconCircleStar = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: [
                    jsxRuntime.jsx("circle", {
                        cx: 12,
                        cy: 12,
                        r: 12
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "m11.792 7 1.25 3.333h3.541l-2.916 2.5 1.25 3.75-3.125-2.291-3.125 2.291 1.25-3.75L7 10.333h3.542z"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$1l = /*#__PURE__*/ react.forwardRef(SvgIconCircleStar);

const SvgIconCircleText = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: [
                    jsxRuntime.jsx("circle", {
                        cx: 12,
                        cy: 12,
                        r: 11
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M8 7.5h5M8 10.5h9M8 13.5h9M8 16.5h9"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$1k = /*#__PURE__*/ react.forwardRef(SvgIconCircleText);

const SvgIconClassStudents = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 16 16",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("path", {
                clipRule: "evenodd",
                d: "M5.398 13.478h4.834v-2.87c0-.318-1.913-1.275-3.507-1.912V7.42s.637-.223.637-1.594c.444 0 .638-1.275.02-1.275 0-.135.49-.834.3-1.594-.32-1.276-3.508-1.276-3.827 0-1.342-.275-.319 1.41-.319 1.594-.637 0-.444 1.275 0 1.275 0 1.371.638 1.594.638 1.594v1.276C2.58 9.333.667 10.29.667 10.609v2.87h4.73Z",
                stroke: "currentColor",
                strokeLinejoin: "round"
            }, void 0),
            jsxRuntime.jsx("path", {
                d: "M11.826 13.478h3.507v-2.87c0-.318-1.594-.765-2.87-1.275v-.956s.638-.179.638-1.276c.356 0 .494-1.275 0-1.275 0-.108.518-.68.32-1.275-.32-.957-2.87-.957-3.19 0-1.074-.22-.318 1.128-.318 1.275-.51 0-.355 1.275 0 1.275 0 1.097.638 1.276.638 1.276v.638",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$1j = /*#__PURE__*/ react.forwardRef(SvgIconClassStudents);

const SvgIconClass = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: [
                    jsxRuntime.jsx("path", {
                        d: "M6.5 2.5a3.5 3.5 0 1 0 0 7 3.5 3.5 0 0 0 0-7h0ZM12 11.5H1c0 4.06 1.64 6.442 3.5 7.5v4.5h4V19c1.85-1.06 3.5-3.44 3.5-7.5Z"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M7 11.5H6l-.5 6 1 1 1-1zM14.51 5.003v5.5h5"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M11.057.966c.92-.31 1.91-.47 2.94-.47 5.23 0 9.479 4.244 9.479 9.47 0 5.234-4.244 9.47-9.48 9.47"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$1i = /*#__PURE__*/ react.forwardRef(SvgIconClass);

const SvgIconClose = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("g", Object.assign({
                stroke: "currentColor",
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, {
                children: jsxRuntime.jsx("path", {
                    d: "M22.542 1.458 1.458 22.542M22.542 22.542 1.458 1.458"
                }, void 0)
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$1h = /*#__PURE__*/ react.forwardRef(SvgIconClose);

const SvgIconCopy = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: [
                    jsxRuntime.jsx("path", {
                        d: "M7 5V1h16v18h-6"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M1 5h16v18H1z"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$1g = /*#__PURE__*/ react.forwardRef(SvgIconCopy);

const SvgIconCross = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("g", Object.assign({
                stroke: "currentColor",
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, {
                children: jsxRuntime.jsx("path", {
                    d: "M20 4 4 20M20 20 4 4"
                }, void 0)
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$1f = /*#__PURE__*/ react.forwardRef(SvgIconCross);

const SvgIconCustomers = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: [
                    jsxRuntime.jsx("path", {
                        d: "M12.489 13.259 10 12.367v-2.045M6 10.322v2.045l-3.941 1.412A2.36 2.36 0 0 0 .5 16.012V17.5h12"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M10.791 2.884c1.541 1.851 1.541 4.853 0 6.704-1.541 1.85-4.04 1.85-5.582 0-1.541-1.851-1.541-4.853 0-6.704 1.542-1.85 4.04-1.85 5.582 0M14.5 1.5c2.18 0 3.947 2.121 3.947 4.736 0 2.617-1.768 4.74-3.947 4.74m2 1.524v-2.18M14.5 20.5h3V23l2.5-2.5h3.5v-6h-9v6Zm2-4h5m-5 2H20"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$1e = /*#__PURE__*/ react.forwardRef(SvgIconCustomers);

const SvgIconDownload = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("g", Object.assign({
                clipPath: "url(#icon-download_svg__a)",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, {
                children: jsxRuntime.jsx("path", {
                    d: "M23 18.217v1.913A2.87 2.87 0 0 1 20.131 23H3.869A2.869 2.869 0 0 1 1 20.13v-1.913M12 18.108V1M19 11.108l-7 7-7-7"
                }, void 0)
            }), void 0),
            jsxRuntime.jsx("defs", {
                children: jsxRuntime.jsx("clipPath", Object.assign({
                    id: "icon-download_svg__a"
                }, {
                    children: jsxRuntime.jsx("path", {
                        fill: "currentColor",
                        d: "M0 0h24v24H0z"
                    }, void 0)
                }), void 0)
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$1d = /*#__PURE__*/ react.forwardRef(SvgIconDownload);

const SvgIconDrag = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("path", {
                d: "M9 21c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2ZM7 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2Zm0-9c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2Zm10 4c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2Zm0 5c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2Zm0 9c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2Z",
                stroke: "currentColor",
                fill: "currentColor",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$1c = /*#__PURE__*/ react.forwardRef(SvgIconDrag);

const SvgIconDrive = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd"
            }, {
                children: [
                    jsxRuntime.jsx("path", {
                        fill: "#3777E3",
                        d: "m4 22.5 4-7h16l-4 7z"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        fill: "#FFCF63",
                        d: "M16 15.5h8l-8-14H8z"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        fill: "#11A861",
                        d: "m0 15.5 4 7 8-14-4-7z"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$1b = /*#__PURE__*/ react.forwardRef(SvgIconDrive);

const SvgIconDuplicate = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("path", {
                d: "M1 23V5.125h10.313l5.5 6.188V23H1Z",
                stroke: "currentColor",
                strokeLinejoin: "round"
            }, void 0),
            jsxRuntime.jsx("path", {
                d: "M11.313 5.125v6.188h5.5M17.5 1v6.188H23",
                stroke: "currentColor",
                strokeLinejoin: "round"
            }, void 0),
            jsxRuntime.jsx("path", {
                d: "M7.188 5.438V1h10.106L23 7.188v11.687h-6.5",
                stroke: "currentColor",
                strokeLinejoin: "round"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$1a = /*#__PURE__*/ react.forwardRef(SvgIconDuplicate);

const SvgIconDuration = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: [
                    jsxRuntime.jsx("circle", {
                        cx: 12,
                        cy: 14,
                        r: 9.5
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M9 .5h6M18.717 7.283 20.5 5.5M10.5 4.547V.5h3v4.047M20 5l1 1M12 14 7.5 9.5"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$19 = /*#__PURE__*/ react.forwardRef(SvgIconDuration);

const SvgIconEdit = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("path", {
                clipRule: "evenodd",
                d: "M7.417 19.338 1 21.172l1.833-6.417L15.881 1.707a1 1 0 0 1 1.414 0l3.17 3.17a1 1 0 0 1 0 1.414L7.417 19.338Z",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0),
            jsxRuntime.jsx("path", {
                d: "m12.918 4.67 4.584 4.584M2.833 14.755l4.584 4.584M1 21.901h22",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$18 = /*#__PURE__*/ react.forwardRef(SvgIconEdit);

const SvgIconExtendedResponse = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: jsxRuntime.jsx("path", {
                    d: "m15.52 21.5-3.5 1 1-3.5 7.502-7.502 2.5 2.5L15.52 21.5Zm3-8 2.5 2.5m-8 3 2.5 2.5M0 1.5h24M0 6.5h24M0 16.5h10M0 21.5h8M0 11.5h14"
                }, void 0)
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$17 = /*#__PURE__*/ react.forwardRef(SvgIconExtendedResponse);

const SvgIconFileDoc = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 512 512",
        xmlSpace: "preserve",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#e2e5e7'
                },
                d: "M128 0c-17.6 0-32 14.4-32 32v448c0 17.6 14.4 32 32 32h320c17.6 0 32-14.4 32-32V128L352 0H128z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#b0b7bd'
                },
                d: "M384 128h96L352 0v96c0 17.6 14.4 32 32 32z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "m480 224-96-96h96z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#50bee8'
                },
                d: "M416 416c0 8.8-7.2 16-16 16H48c-8.8 0-16-7.2-16-16V256c0-8.8 7.2-16 16-16h352c8.8 0 16 7.2 16 16v160z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#fff'
                },
                d: "M92.576 384c-4.224 0-8.832-2.32-8.832-7.936v-72.656c0-4.608 4.608-7.936 8.832-7.936h29.296c58.464 0 57.168 88.528 1.136 88.528H92.576zm8.064-72.928v57.312h21.232c34.544 0 36.064-57.312 0-57.312H100.64zM228 385.28c-23.664 1.024-48.24-14.72-48.24-46.064 0-31.472 24.56-46.944 48.24-46.944 22.384 1.136 45.792 16.624 45.792 46.944 0 30.336-23.408 46.064-45.792 46.064zm-1.408-76.368c-14.336 0-29.936 10.112-29.936 30.32 0 20.096 15.616 30.336 29.936 30.336 14.72 0 30.448-10.24 30.448-30.336 0-20.224-15.728-30.32-30.448-30.32zM288.848 339.088c0-24.688 15.488-45.92 44.912-45.92 11.136 0 19.968 3.328 29.296 11.392 3.456 3.184 3.84 8.816.384 12.4-3.456 3.056-8.704 2.688-11.776-.384-5.232-5.504-10.608-7.024-17.904-7.024-19.696 0-29.152 13.952-29.152 29.552 0 15.872 9.328 30.448 29.152 30.448 7.296 0 14.08-2.96 19.968-8.192 3.952-3.072 9.456-1.552 11.76 1.536 2.048 2.816 3.056 7.552-1.408 12.016-8.96 8.336-19.696 10-30.336 10-30.944 0-44.896-21.136-44.896-45.824z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "M400 432H96v16h304c8.8 0 16-7.2 16-16v-16c0 8.8-7.2 16-16 16z"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$16 = /*#__PURE__*/ react.forwardRef(SvgIconFileDoc);

const SvgIconFileEps = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 512 512",
        xmlSpace: "preserve",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#e2e5e7'
                },
                d: "M128 0c-17.6 0-32 14.4-32 32v448c0 17.6 14.4 32 32 32h320c17.6 0 32-14.4 32-32V128L352 0H128z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#b0b7bd'
                },
                d: "M384 128h96L352 0v96c0 17.6 14.4 32 32 32z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "m480 224-96-96h96z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#f7b84e'
                },
                d: "M416 416c0 8.8-7.2 16-16 16H48c-8.8 0-16-7.2-16-16V256c0-8.8 7.2-16 16-16h352c8.8 0 16 7.2 16 16v160z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#fff'
                },
                d: "M116.608 384c-4.48 0-7.936-3.456-7.936-7.936v-72.656c0-4.608 3.456-7.936 7.936-7.936h45.92c11.776 0 11.52 16.624 0 16.624h-36.832v19.2h32.24c11.376 0 11.376 16.768 0 16.768h-32.24v19.184h39.024c11.648 0 12.528 16.752 0 16.752h-48.112zM190.48 303.152c0-4.224 3.328-8.848 8.704-8.848h29.552c16.64 0 31.616 11.136 31.616 32.496 0 20.224-14.976 31.472-31.616 31.472h-21.36v16.896c0 5.648-3.584 8.832-8.192 8.832-4.224 0-8.704-3.184-8.704-8.832v-72.016zm16.896 7.28v31.856h21.36c8.576 0 15.36-7.552 15.36-15.488 0-8.96-6.784-16.368-15.36-16.368h-21.36zM274.8 314.656c2.944-24.816 40.416-29.28 58.08-15.712 8.704 7.024-.512 18.16-8.192 12.528-9.472-6.016-30.96-8.832-33.648 4.464-3.456 20.992 52.192 8.976 51.296 42.992-.896 32.496-47.968 33.264-65.632 18.672-4.224-3.44-4.096-9.056-1.792-12.528 3.328-3.312 7.024-4.464 11.392-.896 10.48 7.168 37.488 12.544 39.408-5.648-1.664-18.912-54.88-7.52-50.912-43.872z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "M400 432H96v16h304c8.8 0 16-7.2 16-16v-16c0 8.8-7.2 16-16 16z"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$15 = /*#__PURE__*/ react.forwardRef(SvgIconFileEps);

const SvgIconFileGif = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 512 512",
        xmlSpace: "preserve",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#e2e5e7'
                },
                d: "M128 0c-17.6 0-32 14.4-32 32v448c0 17.6 14.4 32 32 32h320c17.6 0 32-14.4 32-32V128L352 0H128z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#b0b7bd'
                },
                d: "M384 128h96L352 0v96c0 17.6 14.4 32 32 32z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "m480 224-96-96h96z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#a066aa'
                },
                d: "M416 416c0 8.8-7.2 16-16 16H48c-8.8 0-16-7.2-16-16V256c0-8.8 7.2-16 16-16h352c8.8 0 16 7.2 16 16v160z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#fff'
                },
                d: "M199.84 374.16c-9.088 7.536-20.224 10.752-31.472 10.752-26.88 0-45.936-15.36-45.936-45.808 0-25.84 20.096-45.92 47.072-45.92 10.112 0 21.232 3.456 29.168 11.264 7.808 7.664-3.456 19.056-11.12 12.288-4.736-4.624-11.392-8.064-18.048-8.064-15.472 0-30.432 12.4-30.432 30.432 0 18.944 12.528 30.448 29.296 30.448 7.792 0 14.448-2.304 19.184-5.76V348.08h-19.184c-11.392 0-10.24-15.632 0-15.632h25.584c4.736 0 9.072 3.6 9.072 7.568v27.248c0 2.288-1.008 4.448-3.184 6.896zM224.944 303.152c0-10.496 16.896-10.88 16.896 0v73.024c0 10.624-16.896 10.88-16.896 0v-73.024zM281.12 312.096v20.336h32.608c4.608 0 9.216 4.608 9.216 9.088 0 4.224-4.608 7.664-9.216 7.664H281.12v26.864c0 4.48-3.2 7.936-7.68 7.936-5.632 0-9.072-3.456-9.072-7.936v-72.656c0-4.608 3.456-7.936 9.072-7.936h44.912c5.632 0 8.96 3.328 8.96 7.936 0 4.096-3.328 8.688-8.96 8.688H281.12v.016z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "M400 432H96v16h304c8.8 0 16-7.2 16-16v-16c0 8.8-7.2 16-16 16z"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$14 = /*#__PURE__*/ react.forwardRef(SvgIconFileGif);

const SvgIconFileJpg = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 512 512",
        xmlSpace: "preserve",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#e2e5e7'
                },
                d: "M128 0c-17.6 0-32 14.4-32 32v448c0 17.6 14.4 32 32 32h320c17.6 0 32-14.4 32-32V128L352 0H128z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#b0b7bd'
                },
                d: "M384 128h96L352 0v96c0 17.6 14.4 32 32 32z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "m480 224-96-96h96z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#50bee8'
                },
                d: "M416 416c0 8.8-7.2 16-16 16H48c-8.8 0-16-7.2-16-16V256c0-8.8 7.2-16 16-16h352c8.8 0 16 7.2 16 16v160z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#fff'
                },
                d: "M141.968 303.152c0-10.752 16.896-10.752 16.896 0v50.528c0 20.096-9.6 32.256-31.728 32.256-10.88 0-19.952-2.96-27.888-13.184-6.528-7.808 5.76-19.056 12.416-10.88 5.376 6.656 11.136 8.192 16.752 7.936 7.152-.256 13.44-3.472 13.568-16.128v-50.528h-.016zM181.344 303.152c0-4.224 3.328-8.832 8.704-8.832H219.6c16.64 0 31.616 11.136 31.616 32.48 0 20.224-14.976 31.488-31.616 31.488h-21.36v16.896c0 5.632-3.584 8.816-8.192 8.816-4.224 0-8.704-3.184-8.704-8.816v-72.032zm16.896 7.28v31.872h21.36c8.576 0 15.36-7.568 15.36-15.504 0-8.944-6.784-16.368-15.36-16.368h-21.36zM342.576 374.16c-9.088 7.552-20.224 10.752-31.472 10.752-26.88 0-45.936-15.344-45.936-45.808 0-25.824 20.096-45.904 47.072-45.904 10.112 0 21.232 3.44 29.168 11.248 7.792 7.664-3.456 19.056-11.12 12.288-4.736-4.608-11.392-8.064-18.048-8.064-15.472 0-30.432 12.4-30.432 30.432 0 18.944 12.528 30.464 29.296 30.464 7.792 0 14.448-2.32 19.184-5.76V348.08h-19.184c-11.392 0-10.24-15.616 0-15.616h25.584c4.736 0 9.072 3.584 9.072 7.552v27.248c0 2.304-1.008 4.448-3.184 6.896z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "M400 432H96v16h304c8.8 0 16-7.2 16-16v-16c0 8.8-7.2 16-16 16z"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$13 = /*#__PURE__*/ react.forwardRef(SvgIconFileJpg);

const SvgIconFileMov = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 512 512",
        xmlSpace: "preserve",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#e2e5e7'
                },
                d: "M128 0c-17.6 0-32 14.4-32 32v448c0 17.6 14.4 32 32 32h320c17.6 0 32-14.4 32-32V128L352 0H128z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#b0b7bd'
                },
                d: "M384 128h96L352 0v96c0 17.6 14.4 32 32 32z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "m480 224-96-96h96z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#50bee8'
                },
                d: "M416 416c0 8.8-7.2 16-16 16H48c-8.8 0-16-7.2-16-16V256c0-8.8 7.2-16 16-16h352c8.8 0 16 7.2 16 16v160z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#fff'
                },
                d: "M96.928 327.84v47.328c0 5.648-4.608 8.832-9.216 8.832-4.096 0-7.68-3.184-7.68-8.832v-72.016c0-6.656 5.632-8.848 7.68-8.848 3.696 0 5.872 2.192 8.064 4.624l28.128 37.984 29.168-39.408c4.24-5.232 14.592-3.2 14.592 5.648v72.016c0 5.648-3.568 8.832-7.664 8.832-4.608 0-8.192-3.184-8.192-8.832V327.84l-21.248 26.864c-4.592 5.648-10.352 5.648-14.576 0L96.928 327.84zM234.096 385.28c-23.664 1.024-48.24-14.72-48.24-46.064 0-31.472 24.56-46.944 48.24-46.944 22.384 1.136 45.792 16.624 45.792 46.944 0 30.336-23.408 46.064-45.792 46.064zm-1.408-76.368c-14.336 0-29.936 10.112-29.936 30.32 0 20.096 15.616 30.336 29.936 30.336 14.72 0 30.448-10.24 30.448-30.336 0-20.224-15.728-30.32-30.448-30.32zM323.664 378.256l-33.776-70.752c-4.992-10.112 10.112-18.416 15.728-7.808l11.392 25.712 14.704 33.776 14.448-33.776 11.392-25.712c5.12-9.712 19.952-3.584 15.616 7.04l-32.624 71.52c-2.944 8.064-12.032 9.968-16.88 0z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "M400 432H96v16h304c8.8 0 16-7.2 16-16v-16c0 8.8-7.2 16-16 16z"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$12 = /*#__PURE__*/ react.forwardRef(SvgIconFileMov);

const SvgIconFileMp3 = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 512 512",
        xmlSpace: "preserve",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#e2e5e7'
                },
                d: "M128 0c-17.6 0-32 14.4-32 32v448c0 17.616 14.4 32 32 32h320c17.6 0 32-14.384 32-32V128L352 0H128z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#b0b7bd'
                },
                d: "M384 128h96L352 0v96c0 17.6 14.4 32 32 32z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "m480 224-96-96h96z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#50bee8'
                },
                d: "M416 416c0 8.8-7.2 16-16 16H48c-8.8 0-16-7.2-16-16V256c0-8.8 7.2-16 16-16h352c8.8 0 16 7.2 16 16v160z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#fff'
                },
                d: "M117.184 327.84v47.344c0 5.632-4.592 8.832-9.216 8.832-4.096 0-7.664-3.2-7.664-8.832v-72.032c0-6.64 5.632-8.832 7.664-8.832 3.712 0 5.888 2.192 8.064 4.608l28.16 38 29.152-39.408c4.24-5.248 14.592-3.2 14.592 5.632v72.032c0 5.632-3.6 8.832-7.68 8.832-4.592 0-8.192-3.2-8.192-8.832V327.84l-21.232 26.88c-4.592 5.632-10.352 5.632-14.576 0l-19.072-26.88zM210.288 303.152c0-4.224 3.328-8.832 8.704-8.832h29.552c16.64 0 31.616 11.136 31.616 32.496 0 20.224-14.976 31.472-31.616 31.472h-21.36v16.896c0 5.632-3.584 8.832-8.192 8.832-4.224 0-8.704-3.2-8.704-8.832v-72.032zm16.88 7.296v31.856h21.36c8.576 0 15.36-7.552 15.36-15.488 0-8.96-6.784-16.368-15.36-16.368h-21.36zM322.064 311.472h-21.872c-10.736 0-10.096-15.984 0-15.984h39.152c7.792 0 11.376 8.96 5.632 14.72l-21.232 19.824c15.616-1.152 27.888 10.48 27.888 24.816 0 15.728-11.136 29.168-34.544 29.168-10.24 0-20.336-4.224-26.224-13.44-6.144-9.072 7.024-17.776 13.936-8.832 3.328 4.352 8.704 6.528 14.448 6.528 7.808 0 15.488-3.328 15.488-13.44 0-13.296-16.256-11.248-25.072-10.352-10.752 2.048-13.936-9.6-7.664-14.448l20.064-18.56z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "M400 432H96v16h304c8.8 0 16-7.2 16-16v-16c0 8.8-7.2 16-16 16z"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$11 = /*#__PURE__*/ react.forwardRef(SvgIconFileMp3);

const SvgIconFilePdf = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 512 512",
        xmlSpace: "preserve",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#e2e5e7'
                },
                d: "M128 0c-17.6 0-32 14.4-32 32v448c0 17.6 14.4 32 32 32h320c17.6 0 32-14.4 32-32V128L352 0H128z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#b0b7bd'
                },
                d: "M384 128h96L352 0v96c0 17.6 14.4 32 32 32z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "m480 224-96-96h96z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#f15642'
                },
                d: "M416 416c0 8.8-7.2 16-16 16H48c-8.8 0-16-7.2-16-16V256c0-8.8 7.2-16 16-16h352c8.8 0 16 7.2 16 16v160z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#fff'
                },
                d: "M101.744 303.152c0-4.224 3.328-8.832 8.688-8.832h29.552c16.64 0 31.616 11.136 31.616 32.48 0 20.224-14.976 31.488-31.616 31.488h-21.36v16.896c0 5.632-3.584 8.816-8.192 8.816-4.224 0-8.688-3.184-8.688-8.816v-72.032zm16.88 7.28v31.872h21.36c8.576 0 15.36-7.568 15.36-15.504 0-8.944-6.784-16.368-15.36-16.368h-21.36zM196.656 384c-4.224 0-8.832-2.304-8.832-7.92v-72.672c0-4.592 4.608-7.936 8.832-7.936h29.296c58.464 0 57.184 88.528 1.152 88.528h-30.448zm8.064-72.912V368.4h21.232c34.544 0 36.08-57.312 0-57.312H204.72zM303.872 312.112v20.336h32.624c4.608 0 9.216 4.608 9.216 9.072 0 4.224-4.608 7.68-9.216 7.68h-32.624v26.864c0 4.48-3.184 7.92-7.664 7.92-5.632 0-9.072-3.44-9.072-7.92v-72.672c0-4.592 3.456-7.936 9.072-7.936h44.912c5.632 0 8.96 3.344 8.96 7.936 0 4.096-3.328 8.704-8.96 8.704h-37.248v.016z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "M400 432H96v16h304c8.8 0 16-7.2 16-16v-16c0 8.8-7.2 16-16 16z"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$10 = /*#__PURE__*/ react.forwardRef(SvgIconFilePdf);

const SvgIconFilePng = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 512 512",
        xmlSpace: "preserve",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#e2e5e7'
                },
                d: "M128 0c-17.6 0-32 14.4-32 32v448c0 17.6 14.4 32 32 32h320c17.6 0 32-14.4 32-32V128L352 0H128z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#b0b7bd'
                },
                d: "M384 128h96L352 0v96c0 17.6 14.4 32 32 32z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "m480 224-96-96h96z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#a066aa'
                },
                d: "M416 416c0 8.8-7.2 16-16 16H48c-8.8 0-16-7.2-16-16V256c0-8.8 7.2-16 16-16h352c8.8 0 16 7.2 16 16v160z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#fff'
                },
                d: "M92.816 303.152c0-4.224 3.312-8.848 8.688-8.848h29.568c16.624 0 31.6 11.136 31.6 32.496 0 20.224-14.976 31.472-31.6 31.472H109.68v16.896c0 5.648-3.552 8.832-8.176 8.832-4.224 0-8.688-3.184-8.688-8.832v-72.016zm16.864 7.28v31.856h21.376c8.56 0 15.344-7.552 15.344-15.488 0-8.96-6.784-16.368-15.344-16.368H109.68zM178.976 304.432c0-4.624 1.024-9.088 7.68-9.088 4.592 0 5.632 1.152 9.072 4.464l42.336 52.976v-49.632c0-4.224 3.696-8.848 8.064-8.848 4.608 0 9.072 4.624 9.072 8.848v72.016c0 5.648-3.456 7.792-6.784 8.832-4.464 0-6.656-1.024-10.352-4.464l-42.336-53.744v49.392c0 5.648-3.456 8.832-8.064 8.832s-8.704-3.184-8.704-8.832v-70.752h.016zM351.44 374.16c-9.088 7.536-20.224 10.752-31.472 10.752-26.88 0-45.936-15.36-45.936-45.808 0-25.84 20.096-45.92 47.072-45.92 10.112 0 21.232 3.456 29.168 11.264 7.808 7.664-3.456 19.056-11.12 12.288-4.736-4.624-11.392-8.064-18.048-8.064-15.472 0-30.432 12.4-30.432 30.432 0 18.944 12.528 30.448 29.296 30.448 7.792 0 14.448-2.304 19.184-5.76V348.08h-19.184c-11.392 0-10.24-15.632 0-15.632h25.584c4.736 0 9.072 3.6 9.072 7.568v27.248c0 2.288-1.008 4.448-3.184 6.896z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "M400 432H96v16h304c8.8 0 16-7.2 16-16v-16c0 8.8-7.2 16-16 16z"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$$ = /*#__PURE__*/ react.forwardRef(SvgIconFilePng);

const SvgIconFilePpt = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 512 512",
        xmlSpace: "preserve",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#e2e5e7'
                },
                d: "M128 0c-17.6 0-32 14.4-32 32v448c0 17.6 14.4 32 32 32h320c17.6 0 32-14.4 32-32V128L352 0H128z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#b0b7bd'
                },
                d: "M384 128h96L352 0v96c0 17.6 14.4 32 32 32z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "m480 224-96-96h96z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#f15642'
                },
                d: "M416 416c0 8.8-7.2 16-16 16H48c-8.8 0-16-7.2-16-16V256c0-8.8 7.2-16 16-16h352c8.8 0 16 7.2 16 16v160z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#fff'
                },
                d: "M105.456 303.152c0-4.224 3.328-8.832 8.688-8.832h29.552c16.64 0 31.616 11.136 31.616 32.48 0 20.224-14.976 31.488-31.616 31.488h-21.36v16.896c0 5.632-3.568 8.816-8.176 8.816-4.224 0-8.688-3.184-8.688-8.816v-72.032h-.016zm16.88 7.28v31.872h21.36c8.576 0 15.36-7.568 15.36-15.504 0-8.944-6.784-16.368-15.36-16.368h-21.36zM191.616 303.152c0-4.224 3.328-8.832 8.704-8.832h29.552c16.64 0 31.616 11.136 31.616 32.48 0 20.224-14.976 31.488-31.616 31.488h-21.36v16.896c0 5.632-3.584 8.816-8.192 8.816-4.224 0-8.704-3.184-8.704-8.816v-72.032zm16.88 7.28v31.872h21.36c8.576 0 15.36-7.568 15.36-15.504 0-8.944-6.784-16.368-15.36-16.368h-21.36zM301.68 311.472h-22.368c-11.136 0-11.136-16.368 0-16.368h60.496c11.392 0 11.392 16.368 0 16.368h-21.232v64.608c0 11.12-16.896 11.392-16.896 0v-64.608z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "M400 432H96v16h304c8.8 0 16-7.2 16-16v-16c0 8.8-7.2 16-16 16z"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$_ = /*#__PURE__*/ react.forwardRef(SvgIconFilePpt);

const SvgIconFilePsd = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 512 512",
        xmlSpace: "preserve",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#e2e5e7'
                },
                d: "M128 0c-17.6 0-32 14.4-32 32v448c0 17.6 14.4 32 32 32h320c17.6 0 32-14.4 32-32V128L352 0H128z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#b0b7bd'
                },
                d: "M384 128h96L352 0v96c0 17.6 14.4 32 32 32z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "m480 224-96-96h96z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#50bee8'
                },
                d: "M416 416c0 8.8-7.2 16-16 16H48c-8.8 0-16-7.2-16-16V256c0-8.8 7.2-16 16-16h352c8.8 0 16 7.2 16 16v160z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#fff'
                },
                d: "M100 303.152c0-4.224 3.328-8.848 8.688-8.848h29.552c16.64 0 31.616 11.136 31.616 32.496 0 20.224-14.976 31.472-31.616 31.472h-21.36v16.896c0 5.648-3.584 8.832-8.192 8.832-4.224 0-8.688-3.184-8.688-8.832v-72.016zm16.88 7.28v31.856h21.36c8.576 0 15.36-7.552 15.36-15.488 0-8.96-6.784-16.368-15.36-16.368h-21.36zM184.32 314.656c2.944-24.816 40.416-29.28 58.08-15.712 8.704 7.024-.512 18.16-8.192 12.528-9.472-6.016-30.96-8.832-33.648 4.464-3.456 20.992 52.192 8.976 51.296 42.992-.896 32.496-47.968 33.264-65.632 18.672-4.24-3.44-4.096-9.056-1.792-12.528 3.328-3.312 7.024-4.464 11.392-.896 10.48 7.168 37.488 12.544 39.392-5.648-1.648-18.912-54.88-7.52-50.896-43.872zM278.24 384c-4.224 0-8.832-2.32-8.832-7.936v-72.656c0-4.608 4.608-7.936 8.832-7.936h29.296C366 295.472 364.72 384 308.688 384H278.24zm8.064-72.928v57.312h21.232c34.544 0 36.08-57.312 0-57.312h-21.232z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "M400 432H96v16h304c8.8 0 16-7.2 16-16v-16c0 8.8-7.2 16-16 16z"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$Z = /*#__PURE__*/ react.forwardRef(SvgIconFilePsd);

const SvgIconFileRaw = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 512 512",
        xmlSpace: "preserve",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#e2e5e7'
                },
                d: "M128 0c-17.6 0-32 14.4-32 32v448c0 17.6 14.4 32 32 32h320c17.6 0 32-14.4 32-32V128L352 0H128z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#b0b7bd'
                },
                d: "M384 128h96L352 0v96c0 17.6 14.4 32 32 32z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "m480 224-96-96h96z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#576d7e'
                },
                d: "M416 416c0 8.8-7.2 16-16 16H48c-8.8 0-16-7.2-16-16V256c0-8.8 7.2-16 16-16h352c8.8 0 16 7.2 16 16v160z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#fff'
                },
                d: "M94.912 375.68c0 11.12-17.024 11.504-17.024.256V303.28c0-4.48 3.472-7.808 7.68-7.808H119.6c32.48 0 39.136 43.504 12.016 54.368l17.008 20.72c6.656 9.856-6.64 19.312-14.336 9.6l-19.312-27.632H94.912v23.152zm0-37.872H119.6c16.624 0 17.664-26.864 0-26.864H94.912v26.864zM162.624 384c-4.096-2.32-6.656-6.912-4.096-12.288l36.704-71.76c3.456-6.784 12.672-7.04 15.872 0l36.064 71.76c5.248 9.968-10.24 17.904-14.832 7.936l-5.648-11.264h-47.2l-5.504 11.264c-2.032 4.352-6.768 5.264-11.36 4.352zm55.008-32.496-14.448-31.6-15.728 31.6h30.176zM341.248 353.424l19.056-52.704c3.84-10.352 19.312-5.504 15.488 5.632l-25.328 68.704c-2.32 7.296-4.48 9.472-8.832 9.472-4.608 0-6.016-2.832-8.576-7.424L310.8 326.576l-21.248 49.76c-2.304 5.36-4.464 8.432-9.072 8.432-4.464 0-6.784-3.072-8.832-8.704l-24.816-69.712c-3.84-11.504 12.4-15.728 15.728-5.632l18.944 52.704 22.64-52.704c3.056-7.808 11.12-8.192 14.448-.368l22.656 53.072z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "M400 432H96v16h304c8.8 0 16-7.2 16-16v-16c0 8.8-7.2 16-16 16z"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$Y = /*#__PURE__*/ react.forwardRef(SvgIconFileRaw);

const SvgIconFileSvg = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 512 512",
        xmlSpace: "preserve",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#e2e5e7'
                },
                d: "M128 0c-17.6 0-32 14.4-32 32v448c0 17.6 14.4 32 32 32h320c17.6 0 32-14.4 32-32V128L352 0H128z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#b0b7bd'
                },
                d: "M384 128h96L352 0v96c0 17.6 14.4 32 32 32z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "m480 224-96-96h96z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#f7b84e'
                },
                d: "M416 416c0 8.8-7.2 16-16 16H48c-8.8 0-16-7.2-16-16V256c0-8.8 7.2-16 16-16h352c8.8 0 16 7.2 16 16v160z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#fff'
                },
                d: "M96.816 314.656c2.944-24.816 40.416-29.28 58.08-15.712 8.704 7.024-.512 18.16-8.192 12.528-9.472-6.016-30.96-8.832-33.648 4.464-3.456 20.992 52.192 8.976 51.312 42.992-.896 32.496-47.984 33.264-65.648 18.672-4.224-3.44-4.096-9.056-1.792-12.528 3.328-3.312 7.04-4.464 11.392-.896 10.48 7.168 37.488 12.544 39.392-5.648-1.648-18.912-54.864-7.52-50.896-43.872zM209.12 378.256l-33.776-70.752c-4.992-10.112 10.112-18.416 15.728-7.808l11.392 25.712 14.704 33.776 14.448-33.776 11.392-25.712c5.12-9.712 19.952-3.584 15.616 7.04L226 378.256c-2.944 8.064-12.016 9.968-16.88 0zM345.76 374.16c-9.088 7.536-20.224 10.752-31.472 10.752-26.88 0-45.936-15.36-45.936-45.808 0-25.84 20.096-45.92 47.072-45.92 10.112 0 21.232 3.456 29.168 11.264 7.792 7.664-3.456 19.056-11.12 12.288-4.736-4.624-11.392-8.064-18.048-8.064-15.472 0-30.432 12.4-30.432 30.432 0 18.944 12.528 30.448 29.296 30.448 7.792 0 14.448-2.304 19.184-5.76V348.08h-19.184c-11.392 0-10.24-15.632 0-15.632h25.584c4.736 0 9.072 3.6 9.072 7.568v27.248c.016 2.288-1.008 4.448-3.184 6.896z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "M400 432H96v16h304c8.8 0 16-7.2 16-16v-16c0 8.8-7.2 16-16 16z"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$X = /*#__PURE__*/ react.forwardRef(SvgIconFileSvg);

const SvgIconFileTif = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 512 512",
        xmlSpace: "preserve",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#e2e5e7'
                },
                d: "M128 0c-17.6 0-32 14.4-32 32v448c0 17.6 14.4 32 32 32h320c17.6 0 32-14.4 32-32V128L352 0H128z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#b0b7bd'
                },
                d: "M384 128h96L352 0v96c0 17.6 14.4 32 32 32z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "m480 224-96-96h96z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#a066aa'
                },
                d: "M416 416c0 8.8-7.2 16-16 16H48c-8.8 0-16-7.2-16-16V256c0-8.8 7.2-16 16-16h352c8.8 0 16 7.2 16 16v160z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#fff'
                },
                d: "M155.824 311.472H133.44c-11.12 0-11.12-16.368 0-16.368h60.512c11.376 0 11.376 16.368 0 16.368H172.72v64.592c0 11.12-16.896 11.392-16.896 0v-64.592zM217.536 303.152c0-10.496 16.896-10.88 16.896 0v73.024c0 10.624-16.896 10.88-16.896 0v-73.024zM273.712 312.096v20.336h32.608c4.608 0 9.216 4.608 9.216 9.088 0 4.224-4.608 7.664-9.216 7.664h-32.608v26.864c0 4.48-3.2 7.936-7.68 7.936-5.632 0-9.072-3.456-9.072-7.936v-72.656c0-4.608 3.456-7.936 9.072-7.936h44.912c5.632 0 8.96 3.328 8.96 7.936 0 4.096-3.328 8.688-8.96 8.688h-37.232v.016z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "M400 432H96v16h304c8.8 0 16-7.2 16-16v-16c0 8.8-7.2 16-16 16z"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$W = /*#__PURE__*/ react.forwardRef(SvgIconFileTif);

const SvgIconFileTxt = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 512 512",
        xmlSpace: "preserve",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#e2e5e7'
                },
                d: "M128 0c-17.6 0-32 14.4-32 32v448c0 17.6 14.4 32 32 32h320c17.6 0 32-14.4 32-32V128L352 0H128z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#b0b7bd'
                },
                d: "M384 128h96L352 0v96c0 17.6 14.4 32 32 32z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "m480 224-96-96h96z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#576d7e'
                },
                d: "M416 416c0 8.8-7.2 16-16 16H48c-8.8 0-16-7.2-16-16V256c0-8.8 7.2-16 16-16h352c8.8 0 16 7.2 16 16v160z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#fff'
                },
                d: "M132.784 311.472H110.4c-11.136 0-11.136-16.368 0-16.368h60.512c11.392 0 11.392 16.368 0 16.368h-21.248v64.592c0 11.12-16.896 11.392-16.896 0v-64.592h.016zM224.416 326.176l22.272-27.888c6.656-8.688 19.568 2.432 12.288 10.752-7.68 9.088-15.728 18.944-23.424 29.024l26.112 32.496c7.024 9.6-7.04 18.816-13.952 9.344l-23.536-30.192-23.152 30.832c-6.528 9.328-20.992-1.152-13.68-9.856l25.696-32.624c-8.048-10.096-15.856-19.936-23.664-29.024-8.064-9.6 6.912-19.44 12.784-10.48l22.256 27.616zM298.288 311.472H275.92c-11.136 0-11.136-16.368 0-16.368h60.496c11.392 0 11.392 16.368 0 16.368h-21.232v64.592c0 11.12-16.896 11.392-16.896 0v-64.592z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "M400 432H96v16h304c8.8 0 16-7.2 16-16v-16c0 8.8-7.2 16-16 16z"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$V = /*#__PURE__*/ react.forwardRef(SvgIconFileTxt);

const SvgIconFileWmv = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 512 512",
        xmlSpace: "preserve",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#e2e5e7'
                },
                d: "M128 0c-17.6 0-32 14.4-32 32v448c0 17.6 14.4 32 32 32h320c17.6 0 32-14.4 32-32V128L352 0H128z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#b0b7bd'
                },
                d: "M384 128h96L352 0v96c0 17.6 14.4 32 32 32z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "m480 224-96-96h96z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#84bd5a'
                },
                d: "M416 416c0 8.8-7.2 16-16 16H48c-8.8 0-16-7.2-16-16V256c0-8.8 7.2-16 16-16h352c8.8 0 16 7.2 16 16v160z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#fff'
                },
                d: "m153.216 353.44 19.056-52.72c3.824-10.336 19.312-5.504 15.472 5.632l-25.328 68.72c-2.304 7.28-4.464 9.472-8.832 9.472-4.592 0-6.016-2.832-8.56-7.44l-22.256-50.544-21.232 49.776c-2.32 5.36-4.464 8.432-9.088 8.432-4.464 0-6.784-3.072-8.816-8.704l-24.816-69.728c-3.84-11.504 12.4-15.712 15.712-5.632l18.944 52.72 22.656-52.72c3.056-7.792 11.12-8.192 14.432-.368l22.656 53.104zM219.744 327.84v47.344c0 5.632-4.608 8.816-9.2 8.816-4.096 0-7.68-3.184-7.68-8.816v-72.032c0-6.656 5.648-8.832 7.68-8.832 3.696 0 5.872 2.176 8.048 4.608l28.16 38 29.152-39.408c4.24-5.248 14.592-3.2 14.592 5.632v72.032c0 5.632-3.6 8.816-7.68 8.816-4.592 0-8.192-3.184-8.192-8.816V327.84l-21.232 26.88c-4.592 5.632-10.352 5.632-14.576 0l-19.072-26.88zM339.776 378.256 306 307.504c-4.992-10.096 10.112-18.4 15.728-7.792l11.392 25.696 14.704 33.776 14.448-33.776 11.392-25.696c5.12-9.728 19.952-3.584 15.616 7.04l-32.624 71.504c-2.944 8.064-12.016 9.968-16.88 0z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "M400 432H96v16h304c8.8 0 16-7.2 16-16v-16c0 8.8-7.2 16-16 16z"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$U = /*#__PURE__*/ react.forwardRef(SvgIconFileWmv);

const SvgIconFileXls = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 512 512",
        xmlSpace: "preserve",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#e2e5e7'
                },
                d: "M128 0c-17.6 0-32 14.4-32 32v448c0 17.6 14.4 32 32 32h320c17.6 0 32-14.4 32-32V128L352 0H128z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#b0b7bd'
                },
                d: "M384 128h96L352 0v96c0 17.6 14.4 32 32 32z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "m480 224-96-96h96z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#84bd5a'
                },
                d: "M416 416c0 8.8-7.2 16-16 16H48c-8.8 0-16-7.2-16-16V256c0-8.8 7.2-16 16-16h352c8.8 0 16 7.2 16 16v160z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#fff'
                },
                d: "m144.336 326.192 22.256-27.888c6.656-8.704 19.584 2.416 12.288 10.736-7.664 9.088-15.728 18.944-23.408 29.04l26.096 32.496c7.04 9.6-7.024 18.8-13.936 9.328l-23.552-30.192-23.152 30.848c-6.528 9.328-20.992-1.152-13.696-9.856l25.712-32.624c-8.064-10.112-15.872-19.952-23.664-29.04-8.048-9.6 6.912-19.44 12.8-10.464l22.256 27.616zM197.36 303.152c0-4.224 3.584-7.808 8.064-7.808 4.096 0 7.552 3.6 7.552 7.808v64.096h34.8c12.528 0 12.8 16.752 0 16.752H205.44c-4.48 0-8.064-3.184-8.064-7.792v-73.056h-.016zM272.032 314.672c2.944-24.832 40.416-29.296 58.08-15.728 8.704 7.024-.512 18.16-8.192 12.528-9.472-6-30.96-8.816-33.648 4.464-3.456 20.992 52.192 8.976 51.296 43.008-.896 32.496-47.968 33.248-65.632 18.672-4.24-3.456-4.096-9.072-1.792-12.544 3.328-3.312 7.024-4.464 11.392-.88 10.48 7.152 37.488 12.528 39.392-5.648-1.648-18.912-54.864-7.536-50.896-43.872z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "M400 432H96v16h304c8.8 0 16-7.2 16-16v-16c0 8.8-7.2 16-16 16z"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$T = /*#__PURE__*/ react.forwardRef(SvgIconFileXls);

const SvgIconFileZip = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 512 512",
        xmlSpace: "preserve",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#e2e5e7'
                },
                d: "M128 0c-17.6 0-32 14.4-32 32v448c0 17.6 14.4 32 32 32h320c17.6 0 32-14.4 32-32V128L352 0H128z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#b0b7bd'
                },
                d: "M384 128h96L352 0v96c0 17.6 14.4 32 32 32z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "m480 224-96-96h96z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#84bd5a'
                },
                d: "M416 416c0 8.8-7.2 16-16 16H48c-8.8 0-16-7.2-16-16V256c0-8.8 7.2-16 16-16h352c8.8 0 16 7.2 16 16v160z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#fff'
                },
                d: "M132.64 384c-8.064 0-11.264-7.792-6.656-13.296l45.552-60.512h-37.76c-11.12 0-10.224-15.712 0-15.712h51.568c9.712 0 12.528 9.184 5.632 16.624l-43.632 56.656h41.584c10.24 0 11.52 16.256-1.008 16.256h-55.28V384zM212.048 303.152c0-10.496 16.896-10.88 16.896 0v73.04c0 10.608-16.896 10.88-16.896 0v-73.04zM251.616 303.152c0-4.224 3.328-8.832 8.704-8.832h29.552c16.64 0 31.616 11.136 31.616 32.48 0 20.224-14.976 31.488-31.616 31.488h-21.36v16.896c0 5.632-3.584 8.816-8.192 8.816-4.224 0-8.704-3.184-8.704-8.816v-72.032zm16.88 7.28v31.872h21.36c8.576 0 15.36-7.568 15.36-15.504 0-8.944-6.784-16.368-15.36-16.368h-21.36z"
            }, void 0),
            jsxRuntime.jsx("path", {
                style: {
                    fill: '#cad1d8'
                },
                d: "M400 432H96v16h304c8.8 0 16-7.2 16-16v-16c0 8.8-7.2 16-16 16z"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$S = /*#__PURE__*/ react.forwardRef(SvgIconFileZip);

const SvgIconFlipLeft = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd"
            }, {
                children: [
                    jsxRuntime.jsx("path", {
                        stroke: "currentColor",
                        strokeLinecap: "round",
                        strokeLinejoin: "round",
                        d: "m9.87 14-4-.99.96-3.99"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M2.5 2c-.28 0-.5.22-.5.5 0 .27.22.5.5.5.27 0 .5-.23.5-.5 0-.28-.23-.5-.5-.5ZM4.5 2c-.28 0-.5.22-.5.5 0 .27.22.5.5.5.27 0 .5-.23.5-.5 0-.28-.23-.5-.5-.5ZM6.5 2c-.28 0-.5.22-.5.5 0 .27.22.5.5.5.27 0 .5-.23.5-.5 0-.28-.23-.5-.5-.5ZM8.5 2c-.28 0-.5.22-.5.5 0 .27.22.5.5.5.27 0 .5-.23.5-.5 0-.28-.23-.5-.5-.5ZM2.5 22c-.28 0-.5.22-.5.5 0 .27.22.5.5.5.27 0 .5-.23.5-.5 0-.28-.23-.5-.5-.5ZM4.5 22c-.28 0-.5.22-.5.5 0 .27.22.5.5.5.27 0 .5-.23.5-.5 0-.28-.23-.5-.5-.5ZM6.5 22c-.28 0-.5.22-.5.5 0 .27.22.5.5.5.27 0 .5-.23.5-.5 0-.28-.23-.5-.5-.5ZM8.5 22c-.28 0-.5.22-.5.5 0 .27.22.5.5.5.27 0 .5-.23.5-.5 0-.28-.23-.5-.5-.5ZM10.5 2c-.28 0-.5.22-.5.5 0 .27.22.5.5.5.27 0 .5-.23.5-.5 0-.28-.23-.5-.5-.5ZM10.5 22c-.28 0-.5.22-.5.5 0 .27.22.5.5.5.27 0 .5-.23.5-.5 0-.28-.23-.5-.5-.5ZM.5 2c-.277 0-.5.22-.5.5 0 .27.223.5.5.5.275 0 .5-.23.5-.5C1 2.22.77 2 .5 2ZM.5 4c-.277 0-.5.22-.5.5 0 .27.223.5.5.5.275 0 .5-.23.5-.5C1 4.22.77 4 .5 4ZM.5 6c-.277 0-.5.22-.5.5 0 .27.223.5.5.5.275 0 .5-.23.5-.5C1 6.22.77 6 .5 6ZM.5 8c-.277 0-.5.22-.5.5 0 .27.223.5.5.5.275 0 .5-.23.5-.5C1 8.22.77 8 .5 8ZM.5 10c-.277 0-.5.22-.5.5 0 .27.223.5.5.5.275 0 .5-.23.5-.5 0-.28-.23-.5-.5-.5ZM.5 12c-.277 0-.5.22-.5.5 0 .27.223.5.5.5.275 0 .5-.23.5-.5 0-.28-.23-.5-.5-.5ZM.5 14c-.277 0-.5.22-.5.5 0 .27.223.5.5.5.275 0 .5-.23.5-.5 0-.28-.23-.5-.5-.5ZM.5 16c-.277 0-.5.22-.5.5 0 .27.223.5.5.5.275 0 .5-.23.5-.5 0-.28-.23-.5-.5-.5ZM.5 18c-.277 0-.5.22-.5.5 0 .27.223.5.5.5.275 0 .5-.23.5-.5 0-.28-.23-.5-.5-.5ZM.5 20c-.277 0-.5.22-.5.5 0 .27.223.5.5.5.275 0 .5-.23.5-.5 0-.28-.23-.5-.5-.5ZM.5 22c-.277 0-.5.22-.5.5 0 .27.223.5.5.5.275 0 .5-.23.5-.5 0-.28-.23-.5-.5-.5Z",
                        fill: "currentColor"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        stroke: "currentColor",
                        strokeLinecap: "round",
                        strokeLinejoin: "round",
                        d: "M14.5 22.5h9v-20h-9M12.5 13.5v10M12.5.5v7"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M5.882 13.003A9.95 9.95 0 0 1 12.5 10.5c2.513 0 4.81.92 6.567 2.458",
                        stroke: "currentColor",
                        strokeLinecap: "round",
                        strokeLinejoin: "round"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$R = /*#__PURE__*/ react.forwardRef(SvgIconFlipLeft);

const SvgIconFolder = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("path", {
                d: "M3 21.5h17.5c1.655 0 3-1.343 3-3v-10h-18V19a2.5 2.5 0 0 1-5 0V2.5h7v2h13v4",
                stroke: "currentColor",
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$Q = /*#__PURE__*/ react.forwardRef(SvgIconFolder);

const SvgIconGoogleClassroom = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("g", Object.assign({
                fill: "none",
                fillRule: "nonzero"
            }, {
                children: [
                    jsxRuntime.jsx("path", {
                        fill: "#FFC112",
                        d: "M0 0h24v24H0z"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        fill: "#21A465",
                        d: "M2 2h20v20H2z"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M18 11a1 1 0 1 0-2 0 1 1 0 0 0 2 0Zm-1 1.5c-1.446 0-3 .71-3 1.588V15h6v-.912c0-.878-1.554-1.588-3-1.588ZM8 11a1 1 0 1 0-2 0 1 1 0 0 0 2 0Zm-1 1.5c-1.446 0-3 .71-3 1.588V15h6v-.912c0-.878-1.554-1.588-3-1.588Z",
                        fill: "#57BB8A"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M12.001 11a1.5 1.5 0 1 0 0-2.999A1.5 1.5 0 0 0 12 11Zm-3.915 2.833V15H16v-1.167c0-1.289-2.05-2.333-3.957-2.333-1.908 0-3.957 1.044-3.957 2.333Z",
                        fill: "#F7F7F7"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        fill: "#F1F1F1",
                        d: "M14 20.5h6V22h-6z"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$P = /*#__PURE__*/ react.forwardRef(SvgIconGoogleClassroom);

const SvgIconHomeschool = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: [
                    jsxRuntime.jsx("path", {
                        d: "M21.5.5h-16c-1.104 0-2 .89-2 2 0 1.104.89 2 2 2h16v19h-16c-1.104 0-2-.9-2-2v-19m2 0h15M2.5 7.5h2m-2 3h2m-2 3h2m-2 3h2m-2 3h2"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M9.5 12.5h7v6h-7zM13 8l-5.5 4.5h11z"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M14.5 16c0-.83-.68-1.5-1.5-1.5-.83 0-1.5.67-1.5 1.5v2.5h3V16Z"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$O = /*#__PURE__*/ react.forwardRef(SvgIconHomeschool);

const SvgIconItalics = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("path", {
                d: "M14.595 2 9.389 22M2.76 22h13.254M7.967 2H21.22",
                stroke: "currentColor",
                strokeMiterlimit: 10,
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$N = /*#__PURE__*/ react.forwardRef(SvgIconItalics);

const SvgIconLessons = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("g", Object.assign({
                stroke: "currentColor",
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, {
                children: [
                    jsxRuntime.jsx("path", {
                        d: "m23.5 9.5-11.5 5-11.5-5"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "m23.5 13.5-11.5 5-11.5-5"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "m23.5 17.5-11.5 5-11.5-5M12 10.5.5 5.5 12 .5l11.5 5z"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$M = /*#__PURE__*/ react.forwardRef(SvgIconLessons);

const SvgIconLightbulb = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: jsxRuntime.jsx("path", {
                    d: "M17.5 11.5a6 6 0 0 0-12 0 5.997 5.997 0 0 0 4.5 5.803V18.5h3v-1.197a5.999 5.999 0 0 0 4.5-5.803ZM12 22.5h-1M13 20.5h-3M11.5 1.5v2M21.5 11.5h-2M1.5 11.5h2M3.72 3.72l2.12 2.12M19.28 3.72l-2.12 2.12"
                }, void 0)
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$L = /*#__PURE__*/ react.forwardRef(SvgIconLightbulb);

const SvgIconLinkExternal = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: jsxRuntime.jsx("path", {
                    d: "M10 14 23 1M23 15v8H1V1h8M16.5 1H23v6.5"
                }, void 0)
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$K = /*#__PURE__*/ react.forwardRef(SvgIconLinkExternal);

const SvgIconLink = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("path", {
                d: "M6.192 11.372a2.145 2.145 0 0 1 3.034 0h0l.092.091 3.218 3.219.093.092a2.146 2.146 0 0 1 0 3.035h0l-4.254 4.253a3.227 3.227 0 0 1-4.55 0h0l-1.887-1.885a3.23 3.23 0 0 1 0-4.552h0Zm9.433-9.433a3.227 3.227 0 0 1 4.55 0h0l1.887 1.885a3.23 3.23 0 0 1 0 4.552h0l-4.254 4.252a2.145 2.145 0 0 1-3.034 0h0l-3.31-3.31-.093-.091a2.146 2.146 0 0 1 0-3.035h0ZM7.827 16.173l8.346-8.346",
                stroke: "currentColor",
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$J = /*#__PURE__*/ react.forwardRef(SvgIconLink);

const SvgIconLock = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("g", Object.assign({
                stroke: "currentColor",
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, {
                children: [
                    jsxRuntime.jsx("path", {
                        d: "M12.354 14.646a.5.5 0 1 1-.708.708.5.5 0 0 1 .708-.708M12 15.5v3"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M3.5 9.5h17v14h-17zM6.5 6a5.5 5.5 0 1 1 11 0v3.5h-11V6Z"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$I = /*#__PURE__*/ react.forwardRef(SvgIconLock);

const SvgIconMenuKebab = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("path", {
                d: "M10 4a2 2 0 1 0 4 0 2 2 0 0 0-4 0ZM10 12a2 2 0 1 0 4 0 2 2 0 0 0-4 0ZM10 20a2 2 0 1 0 4 0 2 2 0 0 0-4 0Z",
                fill: "currentColor"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$H = /*#__PURE__*/ react.forwardRef(SvgIconMenuKebab);

const SvgIconMenuMore = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("g", Object.assign({
                fill: "currentColor",
                fillRule: "evenodd"
            }, {
                children: [
                    jsxRuntime.jsx("circle", {
                        cx: 4,
                        cy: 12,
                        r: 2
                    }, void 0),
                    jsxRuntime.jsx("circle", {
                        cx: 12,
                        cy: 12,
                        r: 2
                    }, void 0),
                    jsxRuntime.jsx("circle", {
                        cx: 20,
                        cy: 12,
                        r: 2
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$G = /*#__PURE__*/ react.forwardRef(SvgIconMenuMore);

const SvgIconMinus = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("path", {
                stroke: "currentColor",
                d: "M21.5 12h-19",
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$F = /*#__PURE__*/ react.forwardRef(SvgIconMinus);

const SvgIconMultiChoice = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: jsxRuntime.jsx("path", {
                    d: "M3.914 19.086a2 2 0 1 1-2.828 2.828 2 2 0 0 1 2.828-2.828Zm0-8a2 2 0 1 1-2.828 2.828 2 2 0 0 1 2.828-2.828Zm0-8a2 2 0 1 1-2.828 2.828 2 2 0 0 1 2.828-2.828ZM8.5 4.5h15m-15 8h15m-15 8h15"
                }, void 0)
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$E = /*#__PURE__*/ react.forwardRef(SvgIconMultiChoice);

const SvgIconOrderedList = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("path", {
                d: "M6.5 3.997h17m-17 8h17m-17 8h17M2 5.997V2.07L.5 3.534m2.07 10.463H.5c1.48-2 2-1.836 2-2.963a.986.986 0 0 0-1-.982.948.948 0 0 0-.965.973M.5 17.997h1.931l-1 1.537c.826 0 1 .482 1 .982s-.174.981-1 .981H.5",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$D = /*#__PURE__*/ react.forwardRef(SvgIconOrderedList);

const SvgIconPlus = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: jsxRuntime.jsx("path", {
                    d: "M11.5.5v22M22.5 11.5H.5"
                }, void 0)
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$C = /*#__PURE__*/ react.forwardRef(SvgIconPlus);

const SvgIconRecommend = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: [
                    jsxRuntime.jsx("path", {
                        d: "M18 23.5s5.5-4 5.5-6.97c0-3.42-4.5-4.5-5.5-.35-1-4.16-5.5-3.08-5.5.34 0 2.96 5.5 6.96 5.5 6.96v.02Z"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M9.5 14.5h-1l-4 4v-4h-4V.5h21v9"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$B = /*#__PURE__*/ react.forwardRef(SvgIconRecommend);

const SvgIconSchedule = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("path", {
                clipRule: "evenodd",
                d: "M21.78 13.33A9.779 9.779 0 0 1 12 23.108a9.778 9.778 0 0 1-9.78-9.78A9.778 9.778 0 0 1 12 3.55c5.401 0 9.78 4.378 9.78 9.78v0Z",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0),
            jsxRuntime.jsx("path", {
                d: "M6.496 21.407 4.794 23.11M17.502 21.405l1.704 1.704M8.397 13.844h4.118V7.668M1.706 7.668C.098 6.06.098 3.614 1.706 2.006 3.314.398 5.76.398 7.368 2.006M22.294 7.668c1.608-1.608 1.608-4.054 0-5.662-1.608-1.608-4.054-1.608-5.662 0",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$A = /*#__PURE__*/ react.forwardRef(SvgIconSchedule);

const SvgIconSchool = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: [
                    jsxRuntime.jsx("path", {
                        d: "M.5 23.5h23M2.5 4.5h19v19h-19zM.5 4.5h23M3.5 2.5h17v2h-17zM9.5.5h5v2h-5z"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M10.5 19.5h3v4h-3zM5.5 19.5h3M15.5 19.5h3M5.5 16.5h5M13.5 16.5h5M5.5 13.5h5M13.5 13.5h5M5.5 10.5h5M13.5 10.5h5M5.5 7.5h5M13.5 7.5h5"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$z = /*#__PURE__*/ react.forwardRef(SvgIconSchool);

const SvgIconSearch = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("g", Object.assign({
                stroke: "currentColor",
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, {
                children: jsxRuntime.jsx("path", {
                    d: "M13.657 2.343A8 8 0 1 1 2.343 13.657 8 8 0 0 1 13.657 2.343M13.68 13.68 23 23"
                }, void 0)
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$y = /*#__PURE__*/ react.forwardRef(SvgIconSearch);

const SvgIconShortAnswer = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: jsxRuntime.jsx("path", {
                    d: "M0 1.5h23M0 6.5h22.762M0 11.5h14M15.52 21.5l-3.5 1 1-3.5 7.502-7.502 2.5 2.5L15.52 21.5Zm3-8 2.5 2.5m-8 3 2.5 2.5"
                }, void 0)
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$x = /*#__PURE__*/ react.forwardRef(SvgIconShortAnswer);

const SvgIconSocialGoogle = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 23",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("g", Object.assign({
                fill: "currentColor",
                fillRule: "evenodd"
            }, {
                children: jsxRuntime.jsx("path", {
                    d: "M7.127 7.339a6.653 6.653 0 0 1 5.254-2.577c1.86 0 3.586.747 4.86 2.104l.327.346 3.47-3.26-.326-.347A11.477 11.477 0 0 0 12.381 0c-3.636 0-6.874 1.713-8.97 4.368l3.716 2.971ZM6.183 13.868a6.614 6.614 0 0 1-.47-2.44c0-.85.167-1.662.46-2.412L2.35 5.958a11.354 11.354 0 0 0 .164 11.212l3.669-3.302ZM15.49 17.312a6.675 6.675 0 0 1-3.109.783 6.654 6.654 0 0 1-5.226-2.539l-3.544 3.189a11.407 11.407 0 0 0 8.77 4.112c2.34 0 4.517-.707 6.334-1.916l-3.225-3.629ZM13.333 9.524v4.762h5.087a6.598 6.598 0 0 1-1.382 1.902l3.174 3.57a11.414 11.414 0 0 0 3.595-7.754l.003-2.48H13.333Z"
                }, void 0)
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$w = /*#__PURE__*/ react.forwardRef(SvgIconSocialGoogle);

const SvgIconSubjectsStudySkills = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: [
                    jsxRuntime.jsx("path", {
                        d: "m16.42 19.25 2.298 2.296 2.828-2.829-2.296-2.297c.452-.74.794-2.054 1.004-2.921H23.5v-3h-3.247c-.209-.867-.551-2.181-1.003-2.922l2.296-2.295-2.829-2.829L16.42 4.75c-.74-.452-2.053-.794-2.92-1.002V.5h-3v3.248c-.867.208-2.181.55-2.921 1.002L5.282 2.454 2.453 5.283 4.75 7.579c-.452.74-.794 2.054-1.004 2.921H.5v3h3.246c.21.867.552 2.181 1.004 2.921l-2.297 2.297 2.829 2.829 2.296-2.298M10.5 20.5h3m-3 2h3m-1.5 0v1"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M17.869 12.044C17.869 8.982 15.241 6.5 12 6.5c-3.242 0-5.869 2.482-5.869 5.544 0 2.525 1.922 4.655 4.369 5.323V18.5h3v-1.133c2.447-.668 4.369-2.798 4.369-5.323Z"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$v = /*#__PURE__*/ react.forwardRef(SvgIconSubjectsStudySkills);

const SvgIconText = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: jsxRuntime.jsx("path", {
                    d: "M2 3h9M2 15h20M2 21h20M2 9h20"
                }, void 0)
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$u = /*#__PURE__*/ react.forwardRef(SvgIconText);

const SvgIconUnlock = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: [
                    jsxRuntime.jsx("path", {
                        d: "M12 14.5a.5.5 0 1 0 0 1 .5.5 0 0 0 0-1Zm0 1v3"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M3.5 9.5h17v14h-17zM6.5 6C6.5 2.962 8.96.5 12 .5c3.03 0 5.5 2.46 5.5 5.5v3.5"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$t = /*#__PURE__*/ react.forwardRef(SvgIconUnlock);

const SvgIconUnorderedList = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("path", {
                fillRule: "evenodd",
                clipRule: "evenodd",
                d: "M4 4a2 2 0 1 1-4.001-.001A2 2 0 0 1 4 4Z",
                fill: "currentColor"
            }, void 0),
            jsxRuntime.jsx("path", {
                d: "M8 4h15",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0),
            jsxRuntime.jsx("path", {
                fillRule: "evenodd",
                clipRule: "evenodd",
                d: "M4 12a2 2 0 1 1-4.001-.001A2 2 0 0 1 4 12Z",
                fill: "currentColor"
            }, void 0),
            jsxRuntime.jsx("path", {
                d: "M8 12h15",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0),
            jsxRuntime.jsx("path", {
                fillRule: "evenodd",
                clipRule: "evenodd",
                d: "M4 20a2 2 0 1 1-4.001-.001A2 2 0 0 1 4 20Z",
                fill: "currentColor"
            }, void 0),
            jsxRuntime.jsx("path", {
                d: "M8 20h15",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$s = /*#__PURE__*/ react.forwardRef(SvgIconUnorderedList);

const SvgIconUser = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: [
                    jsxRuntime.jsx("path", {
                        d: "M16.243 2.757a6 6 0 1 1-8.486 8.486 6 6 0 0 1 8.486-8.486"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M23 23.476H1C1 17.692 5.922 13 12 13c6.076-.002 11 4.69 11 10.476Z"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$r = /*#__PURE__*/ react.forwardRef(SvgIconUser);

const SvgIconUsersLove = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: [
                    jsxRuntime.jsx("path", {
                        d: "M19 23.5c1.67-1.22 4.49-3.779 4.49-5.7 0-1.56-1.14-2.484-2.23-2.484-1.218 0-1.68.84-2.28 1.83-.61-1-1.06-1.84-2.28-1.84-1.1 0-2.23.93-2.23 2.484-.001 1.91 2.82 4.48 4.5 5.69h0l.03.02ZM13.94 13.779l-3.95-1.42v-2.045M6 10.323v2.04l-3.941 1.41c-.95.33-1.56 1.23-1.56 2.23v1.48h10.5"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M11.947 6.23c0 2.61-1.77 4.741-3.947 4.741-2.181 0-3.947-2.13-3.947-4.75s1.76-4.736 3.94-4.736c2.18 0 3.94 2.121 3.94 4.73l.014.015Z"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M11.916 5.811c-.14.01-.25 0-.38.03-1.35.258-2.208-.23-2.949-1.53-.45.85-1.84 1.52-2.98 1.52a3.19 3.19 0 0 1-1.53-.37M14.5 1.5c2.18 0 3.94 2.121 3.94 4.73 0 2.61-1.77 4.741-3.95 4.741"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M18.416 5.811c-.14.01-.25 0-.38.03-1.35.258-2.208-.23-2.949-1.53M16.5 12v-1.68"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$q = /*#__PURE__*/ react.forwardRef(SvgIconUsersLove);

const SvgIconUsers = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("g", Object.assign({
                stroke: "currentColor",
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, {
                children: [
                    jsxRuntime.jsx("path", {
                        d: "M6.768 7.717a2.5 2.5 0 1 1-3.536 3.536 2.5 2.5 0 0 1 3.536-3.536"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M6.578 15.985H1a4 4 0 0 1 7.227-2.363M20.768 7.717a2.5 2.5 0 1 1-3.536 3.536 2.5 2.5 0 0 1 3.536-3.536"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M15.771 13.623A4 4 0 0 1 23 15.985h-5.578M14.553 6.058a3.611 3.611 0 1 1-5.106 5.106 3.611 3.611 0 0 1 5.106-5.106"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M17.777 18.001H6.223a5.777 5.777 0 1 1 11.554 0Z"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$p = /*#__PURE__*/ react.forwardRef(SvgIconUsers);

const SvgIconViewTask = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                stroke: "currentColor"
            }, {
                children: [
                    jsxRuntime.jsx("path", {
                        d: "M20.5 11.5v-9h-4m-16 7h20M4.5 2.5h-4v16h10"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M7.5.5v5h-3v-5h3Zm9 0v5h-3v-5h3Zm-9 2h6M19.828 14.172a4 4 0 1 1-5.656 5.656 4 4 0 0 1 5.656-5.656m.002 5.658L23 23"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$o = /*#__PURE__*/ react.forwardRef(SvgIconViewTask);

const SvgIconYoutube = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("g", Object.assign({
                fill: "none",
                fillRule: "nonzero"
            }, {
                children: [
                    jsxRuntime.jsx("path", {
                        d: "M12.03 19.996c-2.569.014-5.137-.018-7.701-.151-.834-.046-1.668-.115-2.424-.504-.506-.262-.897-.624-1.142-1.137-.415-.852-.545-1.75-.622-2.667-.164-1.893-.174-3.785-.087-5.673.044-1.004.077-2.017.328-3.002.096-.385.236-.76.424-1.118.443-.839 1.214-1.256 2.145-1.43.78-.147 1.58-.142 2.375-.174 2.694-.105 5.393-.16 8.092-.133 2.077.023 4.159.073 6.236.174.641.032 1.287.041 1.899.257.829.293 1.446.788 1.778 1.59.323.77.448 1.567.516 2.388.188 2.227.193 4.454.038 6.681-.053.752-.106 1.503-.313 2.241-.467 1.696-1.58 2.36-3.214 2.465-1.745.11-3.494.17-5.244.193-1.026.01-2.057 0-3.084 0Z",
                        fill: "#FF0200"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M10 15V9c2.001 1 3.982 1.991 6 3.002L10 15Z",
                        fill: "#FFF"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$n = /*#__PURE__*/ react.forwardRef(SvgIconYoutube);

var svgs$1 = Object.freeze({
    'action-flip': ForwardRef$1O,
    'alert-error': ForwardRef$1N,
    'alert-general': ForwardRef$1M,
    'alert-info': ForwardRef$1L,
    'alert-success': ForwardRef$1K,
    'alert-warning': ForwardRef$1J,
    'arrow-back': ForwardRef$1I,
    'arrow-down': ForwardRef$1H,
    'arrow-front': ForwardRef$1G,
    'arrow-up': ForwardRef$1F,
    atom: ForwardRef$1E,
    attachment: ForwardRef$1D,
    avatar: ForwardRef$1C,
    badge: ForwardRef$1B,
    'bin-delete': ForwardRef$1A,
    blog: ForwardRef$1z,
    bold: ForwardRef$1y,
    'browser-add': ForwardRef$1x,
    'calendar-tick': ForwardRef$1w,
    calendar: ForwardRef$1v,
    check: ForwardRef$1u,
    chevron: ForwardRef$1t,
    'circle-check': ForwardRef$1s,
    'circle-help': ForwardRef$1r,
    'circle-play': ForwardRef$1q,
    'circle-practice': ForwardRef$1p,
    'circle-progress': ForwardRef$1o,
    'circle-solid-check': ForwardRef$1n,
    'circle-solid-cross': ForwardRef$1m,
    'circle-star': ForwardRef$1l,
    'circle-text': ForwardRef$1k,
    'class-students': ForwardRef$1j,
    class: ForwardRef$1i,
    close: ForwardRef$1h,
    copy: ForwardRef$1g,
    cross: ForwardRef$1f,
    customers: ForwardRef$1e,
    download: ForwardRef$1d,
    drag: ForwardRef$1c,
    drive: ForwardRef$1b,
    duplicate: ForwardRef$1a,
    duration: ForwardRef$19,
    edit: ForwardRef$18,
    'extended-response': ForwardRef$17,
    'file-doc': ForwardRef$16,
    'file-eps': ForwardRef$15,
    'file-gif': ForwardRef$14,
    'file-jpg': ForwardRef$13,
    'file-mov': ForwardRef$12,
    'file-mp-3': ForwardRef$11,
    'file-pdf': ForwardRef$10,
    'file-png': ForwardRef$$,
    'file-ppt': ForwardRef$_,
    'file-psd': ForwardRef$Z,
    'file-raw': ForwardRef$Y,
    'file-svg': ForwardRef$X,
    'file-tif': ForwardRef$W,
    'file-txt': ForwardRef$V,
    'file-wmv': ForwardRef$U,
    'file-xls': ForwardRef$T,
    'file-zip': ForwardRef$S,
    'flip-left': ForwardRef$R,
    folder: ForwardRef$Q,
    'google-classroom': ForwardRef$P,
    homeschool: ForwardRef$O,
    italics: ForwardRef$N,
    lessons: ForwardRef$M,
    lightbulb: ForwardRef$L,
    'link-external': ForwardRef$K,
    link: ForwardRef$J,
    lock: ForwardRef$I,
    'menu-kebab': ForwardRef$H,
    'menu-more': ForwardRef$G,
    minus: ForwardRef$F,
    'multi-choice': ForwardRef$E,
    'ordered-list': ForwardRef$D,
    plus: ForwardRef$C,
    recommend: ForwardRef$B,
    schedule: ForwardRef$A,
    school: ForwardRef$z,
    search: ForwardRef$y,
    'short-answer': ForwardRef$x,
    'social-google': ForwardRef$w,
    'subjects-study-skills': ForwardRef$v,
    text: ForwardRef$u,
    unlock: ForwardRef$t,
    'unordered-list': ForwardRef$s,
    user: ForwardRef$r,
    'users-love': ForwardRef$q,
    users: ForwardRef$p,
    'view-task': ForwardRef$o,
    youtube: ForwardRef$n
});

var styles$$ = {"root":"Icon_root__gXgtl"};

const Icon = /*#__PURE__*/ react.forwardRef(function Icon(props, ref) {
    const { className , color , display ='block' , isDecorative =true , name , size ='sizeIconRoot' , strokeWidth , testHook , title , verticalAlign ,  } = props;
    const Svg = svgs$1[name];
    return jsxRuntime.jsx(Box, Object.assign({
        ref: ref,
        as: "span",
        color: color,
        display: display,
        flexShrink: 0,
        lineHeight: "lineHeightNone",
        overflow: "visible",
        size: size,
        strokeWidth: strokeWidth,
        verticalAlign: verticalAlign,
        className: cx__default["default"](styles$$.root, className),
        testHook: testHook
    }, {
        children: jsxRuntime.jsx(Svg, {
            "aria-hidden": isDecorative,
            role: isDecorative ? undefined : 'img',
            title: title,
            overflow: "visible",
            width: "100%",
            height: "100%"
        }, void 0)
    }), void 0);
});

var styles$_ = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","--breakpoint":"min-width: 48.063em","content":"Accordion_content__anaWb","item":"Accordion_item__VEpsz","title":"Accordion_title__HG54O","panel":"Accordion_panel__VWiAS","heading":"Accordion_heading__3lLLv","info":"Accordion_info__6or5d","button":"Accordion_button__tRLPh","isPlaceholder":"Accordion_isPlaceholder__B6syC","isOpen":"Accordion_isOpen__AbLmH","buttonContent":"Accordion_buttonContent__0-mJC","icon":"Accordion_icon__Gfk-z","panelSlideDown":"Accordion_panelSlideDown__WSzIX"};

function Button$1(props) {
    const { assistiveText , isPlaceholder , testHook  } = props;
    const Component = isPlaceholder ? 'div' : accordion.AccordionButton;
    return jsxRuntime.jsx(Component, Object.assign({
        className: cx__default["default"](styles$_.button, isPlaceholder && styles$_.isPlaceholder),
        "aria-hidden": isPlaceholder,
        "data-test": testHook
    }, {
        children: jsxRuntime.jsxs("div", Object.assign({
            className: styles$_.buttonContent
        }, {
            children: [
                assistiveText && jsxRuntime.jsx(HideVisually, {
                    children: assistiveText
                }, void 0),
                jsxRuntime.jsx(Icon, {
                    className: styles$_.icon,
                    name: "chevron",
                    size: "sizeIconSmall2X",
                    strokeWidth: "2"
                }, void 0)
            ]
        }), void 0)
    }), void 0);
}
function Content$2(props) {
    const { info , toggleButton , children , testHook  } = props;
    return jsxRuntime.jsxs("div", Object.assign({
        className: styles$_.content
    }, {
        children: [
            jsxRuntime.jsx("div", Object.assign({
                className: styles$_.title
            }, {
                children: children
            }), void 0),
            info && jsxRuntime.jsx("div", Object.assign({
                className: styles$_.info
            }, {
                children: info
            }), void 0),
            toggleButton || jsxRuntime.jsx(Button$1, {
                isPlaceholder: true,
                testHook: testHook && `${testHook}-placeholder-button`
            }, void 0)
        ]
    }), void 0);
}
function Item$1(props) {
    const { assistiveText , content , headingLevel , isOpen , children , testHook  } = props;
    const Heading = `h${headingLevel}`;
    return jsxRuntime.jsxs(accordion.AccordionItem, Object.assign({
        className: cx__default["default"](styles$_.item, isOpen && styles$_.isOpen)
    }, {
        children: [
            /*#__PURE__*/ react.cloneElement(content, {
                toggleButton: // @ts-ignore Box being reworked - see box notes
                jsxRuntime.jsx(Heading, Object.assign({
                    className: styles$_.heading
                }, {
                    children: jsxRuntime.jsx(Button$1, {
                        assistiveText: assistiveText,
                        testHook: testHook && `${testHook}-button`
                    }, void 0)
                }), void 0)
            }),
            jsxRuntime.jsx(accordion.AccordionPanel, Object.assign({
                className: styles$_.panel,
                "data-test": testHook && `${testHook}-panel`
            }, {
                children: children
            }), void 0)
        ]
    }), void 0);
}
function Accordion(props) {
    const { children , testHook  } = props;
    const [openIndexes, setOpenIndexes] = react.useState([]);
    const childrenArray = flattenChildren__default["default"](children);
    const onChange = (newIndex)=>setOpenIndexes((oldIndexes)=>oldIndexes.includes(newIndex) ? oldIndexes.filter((i)=>i !== newIndex
            ) : oldIndexes.concat(newIndex)
        )
    ;
    return jsxRuntime.jsx(accordion.Accordion, Object.assign({
        collapsible: true,
        multiple: true,
        onChange: onChange,
        "data-test": testHook
    }, {
        children: childrenArray.map((child, index)=>/*#__PURE__*/ react.cloneElement(child, {
                isOpen: openIndexes.includes(index)
            })
        )
    }), void 0);
}
Accordion.Item = Item$1;
Accordion.Content = Content$2;

// keep sizes ordered from low to high (not alphabetically) since they are used in docs
const sizes$2 = keyMirror__default["default"]({
    none: null,
    small2X: null,
    small1X: null,
    small: null,
    root: null,
    large: null,
    large1X: null,
    large2X: null,
    large3X: null,
    large4X: null,
    large5X: null,
    large6X: null,
    large7X: null,
    large8X: null,
    large9X: null
});
keyMirror__default["default"]({
    [sizes$2.small1X]: null,
    [sizes$2.small]: null,
    [sizes$2.root]: null,
    [sizes$2.large]: null
});
keyMirror__default["default"]({
    [sizes$2.small]: null
});
keyMirror__default["default"]({
    sizeSmall2X: null,
    sizeSmall1X: null,
    sizeSmall: null,
    sizeRoot: null,
    sizeLarge: null,
    sizeLarge1X: null,
    sizeFull: null
});
const dateTimeSizes = keyMirror__default["default"]({
    [sizes$2.small]: null
});
keyMirror__default["default"]({
    [sizes$2.small]: null
});
const headingSizes = keyMirror__default["default"]({
    [sizes$2.small1X]: null,
    [sizes$2.small]: null,
    medium: null,
    [sizes$2.large]: null,
    [sizes$2.large1X]: null,
    [sizes$2.large2X]: null
});
keyMirror__default["default"]({
    small3X: null,
    [sizes$2.small2X]: null,
    [sizes$2.small1X]: null,
    [sizes$2.small]: null,
    [sizes$2.root]: null,
    [sizes$2.large]: null,
    [sizes$2.large1X]: null,
    [sizes$2.large2X]: null,
    [sizes$2.large3X]: null,
    [sizes$2.large4X]: null
});
const progressCircleSizes$1 = keyMirror__default["default"]({
    [sizes$2.small1X]: null,
    [sizes$2.small]: null,
    [sizes$2.root]: null,
    [sizes$2.large]: null,
    [sizes$2.large1X]: null
});
keyMirror__default["default"]({
    [sizes$2.small]: null
});
const imageSizes$1 = keyMirror__default["default"]({
    [sizes$2.small1X]: null,
    [sizes$2.small]: null,
    [sizes$2.root]: null,
    [sizes$2.large]: null
});
keyMirror__default["default"]({
    [sizes$2.large]: null
});
keyMirror__default["default"]({
    [sizes$2.small]: null
});
const spinnerSizes = keyMirror__default["default"]({
    [sizes$2.small1X]: null,
    [sizes$2.small]: null
});
keyMirror__default["default"]({
    [sizes$2.large]: null
});
keyMirror__default["default"]({
    [sizes$2.large]: null
});
keyMirror__default["default"]({
    [sizes$2.large]: null
});

const animation = styled.keyframes`
  100% {
    transform: translateX(200%);
  }
`;
const AnimatedWave = styled__default["default"].div`
  animation: ${animation} 1200ms ease-in-out infinite;
  background: linear-gradient(
    90deg,
    rgba(255, 255, 255, 0),
    rgba(255, 255, 255, 0.6),
    rgba(255, 255, 255, 0)
  );
  height: 100%;
  transform: translateX(-100%);
  width: 50%;

  @media (prefers-reduced-motion) {
    animation: none;
  }
`;
const StyledSkeleton = styled__default["default"].div.withConfig({
    shouldForwardProp
})(compose(systemProps.layout, systemProps.space, {
    backgroundColor: {
        property: 'backgroundColor',
        scale: 'colors'
    },
    borderRadius: {
        property: 'borderRadius',
        scale: 'radii'
    },
    content: customProps.content,
    marginInline: customProps.marginInline,
    position: true
}));
function Skeleton(props) {
    const { animation: animation1 , borderRadius ='borderRadiusRoot' , height =10 , maxWidth ='sizeFull' , testHook , ...otherProps } = props;
    return jsxRuntime.jsx(StyledSkeleton, Object.assign({
        borderRadius: borderRadius,
        height: height,
        maxWidth: maxWidth
    }, otherProps, {
        backgroundColor: "colorFiftyShadesLightest",
        overflow: "hidden",
        "aria-busy": "true",
        "data-test": testHook
    }, {
        children: animation1 === 'wave' && jsxRuntime.jsx(AnimatedWave, {}, void 0)
    }), void 0);
}

var styles$Z = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","root":"Spinner_root__msNm8","spinner":"Spinner_spinner__xOpdB","spin":"Spinner_spin__UzvBI","small":"Spinner_small__0mFeJ","small1X":"Spinner_small1X__QRFgs","black":"Spinner_black__qU-oT","inverse":"Spinner_inverse__GwPC9","grey":"Spinner_grey__zoO98","panelSlideDown":"Spinner_panelSlideDown__QIjVe"};

keyMirror__default["default"]({
    black: null,
    inverse: null,
    grey: null
});
function Spinner(props) {
    const { assistiveText ='Loading' , testHook , size , variant  } = props;
    return jsxRuntime.jsxs("span", Object.assign({
        className: styles$Z.root,
        role: "status",
        "data-test": testHook
    }, {
        children: [
            jsxRuntime.jsx("span", {
                className: cx__default["default"](styles$Z.spinner, {
                    [String(size && styles$Z[size])]: size,
                    [String(variant && styles$Z[variant])]: variant
                })
            }, void 0),
            assistiveText && jsxRuntime.jsx(HideVisually, {
                children: assistiveText
            }, void 0)
        ]
    }), void 0);
}

// PROD-3826 TODO: discuss color palette refinements
const backgroundHoverColors = {
    default: '#0056D6',
    info: '#DFE1E2',
    success: '#006143',
    error: '#C40016',
    warning: '#E06B42'
};
const baseStyles = {
    borderRadius: 'borderRadiusRoot',
    color: 'colorCoreWhite',
    fontFamily: 'fontFamilySystem'
};
const legacyBaseStyles = {
    borderRadius: 'borderRadiusLegacyButton',
    color: 'colorCoreWhite',
    fontFamily: 'fontFamilyRoot',
    letterSpacing: 'letterSpacingLarge1X',
    textTransform: 'uppercase'
};
const defaultStyles$7 = {
    ...baseStyles,
    backgroundColor: 'colorInteractiveLink',
    // @ts-ignore PROD-3826 TODO: discuss color palette refinements
    _hoverAndFocus: {
        backgroundColor: backgroundHoverColors.default
    }
};
const borderedStyles$1 = {
    ...baseStyles,
    boxShadow: 'boxShadowBorder',
    backgroundColor: 'colorCoreWhite',
    color: 'colorInteractiveLink',
    _hoverAndFocus: {
        backgroundColor: 'colorFiftyShadesLightest'
    }
};
const infoStyles = {
    ...baseStyles,
    backgroundColor: 'colorFiftyShadesLightest',
    color: 'colorFiftyShadesDarker',
    // @ts-ignore PROD-3826 TODO: discuss color palette refinements
    _hoverAndFocus: {
        backgroundColor: backgroundHoverColors.info
    }
};
const linkStyles = {
    backgroundColor: 'colorTransparent',
    borderWidth: 'borderWidthNone',
    color: 'colorInteractiveLink',
    fontFamily: 'inherit',
    padding: 'spacingNone',
    _hoverAndFocus: {
        color: 'colorCoreBlack'
    }
};
const successStyles = {
    ...baseStyles,
    backgroundColor: 'colorStatusSuccessDarker',
    // @ts-ignore PROD-3826 TODO: discuss color palette refinements
    _hoverAndFocus: {
        backgroundColor: backgroundHoverColors.success
    }
};
const errorStyles$1 = {
    ...baseStyles,
    backgroundColor: 'colorStatusErrorDark',
    // @ts-ignore PROD-3826 TODO: discuss color palette refinements
    _hoverAndFocus: {
        backgroundColor: backgroundHoverColors.error
    }
};
const warningStyles$1 = {
    ...baseStyles,
    backgroundColor: 'colorStatusWarningRoot',
    color: 'colorCoreBlack',
    // @ts-ignore PROD-3826 TODO: discuss color palette refinements
    _hoverAndFocus: {
        backgroundColor: backgroundHoverColors.warning
    }
};
const legacyStyles = {
    ...defaultStyles$7,
    ...legacyBaseStyles
};
const ghostStyles = {
    ...legacyBaseStyles,
    backgroundColor: 'colorTransparent',
    borderColor: 'colorCoreWhite',
    borderStyle: 'solid',
    borderWidth: 'borderWidthRoot',
    _hoverAndFocus: {
        backgroundColor: 'colorWhiteTransparent40'
    }
};
const transparentStyles = {
    ...legacyBaseStyles,
    backgroundColor: 'colorWhiteTransparent20',
    _hoverAndFocus: {
        backgroundColor: 'colorWhiteTransparent40'
    }
};
const tagStyles = {
    ...legacyBaseStyles,
    backgroundColor: 'colorCoreWhite',
    borderColor: 'colorFiftyShadesLighter',
    borderStyle: 'solid',
    borderWidth: 'borderWidthLarge',
    borderRadius: 'borderRadiusLegacyButton',
    color: 'colorFiftyShadesDarker',
    fontWeight: 'fontWeightBold',
    _hoverAndFocus: {
        backgroundColor: 'colorFiftyShadesLightest'
    }
};
const variants$d = {
    default: {
        loadingSpinner: 'inverse',
        styles: defaultStyles$7
    },
    bordered: {
        styles: borderedStyles$1
    },
    info: {
        loadingSpinner: 'grey',
        styles: infoStyles
    },
    link: {
        styles: linkStyles
    },
    success: {
        loadingSpinner: 'inverse',
        styles: successStyles
    },
    error: {
        loadingSpinner: 'inverse',
        styles: errorStyles$1
    },
    warning: {
        loadingSpinner: 'black',
        styles: warningStyles$1
    },
    legacy: {
        loadingSpinner: 'inverse',
        styles: legacyStyles
    },
    ghost: {
        loadingSpinner: 'inverse',
        styles: ghostStyles
    },
    transparent: {
        loadingSpinner: 'inverse',
        styles: transparentStyles
    },
    tag: {
        styles: tagStyles
    }
};
const sizes$1 = {
    small1X: {
        fontSize: 'fontSizeSmall2X',
        paddingInline: 'spacingSmall1X',
        paddingBlock: 'spacingSmall3X',
        lineHeight: 'lineHeightLarge1X'
    },
    small: {
        fontSize: 'fontSizeSmall1X',
        paddingInline: 'spacingSmall',
        paddingBlock: 'spacingSmall1X',
        lineHeight: 'lineHeightRoot'
    },
    root: {
        fontSize: 'fontSizeSmall',
        paddingInline: 'spacingRoot',
        paddingBlock: 'spacingSmall1X',
        lineHeight: 'lineHeightLarge'
    },
    large: {
        fontSize: 'fontSizeRoot',
        paddingInline: 'spacingLarge1X',
        paddingBlock: 'spacingSmall',
        lineHeight: 'lineHeightLarge'
    }
};
const isValidSpinnerSize = (size)=>{
    return Object.values(spinnerSizes).includes(size);
};
const Button = /*#__PURE__*/ react.forwardRef(function Button(props, ref) {
    var ref1, ref2, ref3, ref4, ref5, ref6;
    const { _hoverAndFocus , as ='button' , color , children , iconBefore , iconAfter , size ='root' , variant ='default' , isAriaDisabled , isDisabled , isFullWidth , isLoading , testHook , title , type ='button' , ...otherProps } = props;
    const isButton = as === 'button';
    const showLoadingState = isLoading && isButton;
    const loadingSpinner = jsxRuntime.jsx(Box, Object.assign({
        as: "span",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        position: "absolute",
        top: "0",
        right: "0",
        left: "0",
        bottom: "0",
        testHook: testHook ? `${testHook}-spinner` : undefined
    }, {
        children: jsxRuntime.jsx(Spinner, {
            size: isValidSpinnerSize(size) ? size : undefined,
            variant: (ref1 = variants$d[variant]) === null || ref1 === void 0 ? void 0 : ref1.loadingSpinner
        }, void 0)
    }), void 0);
    const content = jsxRuntime.jsxs(Box, Object.assign({
        as: "span",
        alignItems: "center",
        "aria-hidden": showLoadingState !== null && showLoadingState !== void 0 ? showLoadingState : undefined,
        display: "flex",
        gap: size === 'small' || size === 'small1X' ? 'spacingSmall1X' : 'spacingSmall',
        justifyContent: "center",
        visibility: showLoadingState ? 'hidden' : undefined,
        testHook: testHook ? `${testHook}-content` : undefined
    }, {
        children: [
            iconBefore,
            jsxRuntime.jsx("span", {
                children: children
            }, void 0),
            iconAfter
        ]
    }), void 0);
    // @ts-ignore  PROD-3826 TODO: discuss color palette refinements
    const hoverAndFocusStyles = {
        color: color || ((ref2 = variants$d[variant]) === null || ref2 === void 0 ? void 0 : (ref3 = ref2.styles) === null || ref3 === void 0 ? void 0 : ref3.color),
        ...(ref4 = variants$d[variant]) === null || ref4 === void 0 ? void 0 : (ref5 = ref4.styles) === null || ref5 === void 0 ? void 0 : ref5._hoverAndFocus,
        ..._hoverAndFocus
    };
    return jsxRuntime.jsxs(Box, Object.assign({
        ref: ref
    }, sizes$1[size], (ref6 = variants$d[variant]) === null || ref6 === void 0 ? void 0 : ref6.styles, color && {
        color
    }, otherProps, {
        _active: {
            transform: variant === 'link' ? undefined : 'scale(0.95)'
        },
        // @ts-ignore PROD-3826 TODO: discuss color palette refinements
        _hoverAndFocus: hoverAndFocusStyles
    }, (isDisabled || isAriaDisabled || isLoading) && {
        _active: undefined,
        _hoverAndFocus: undefined
    }, {
        as: as,
        "aria-busy": showLoadingState || undefined,
        "aria-disabled": isAriaDisabled,
        cursor: isAriaDisabled ? 'not-allowed' : undefined,
        disabled: isDisabled || showLoadingState ? true : undefined,
        display: "inline-block",
        opacity: isDisabled || isAriaDisabled ? 0.5 : undefined,
        position: "relative",
        testHook: testHook,
        title: title,
        transition: "transitionRoot",
        type: isButton ? type : undefined,
        width: isFullWidth ? 'sizeFull' : undefined
    }, {
        children: [
            content,
            showLoadingState && loadingSpinner
        ]
    }), void 0);
});
function ButtonLoader(props) {
    const { size ='root' , ...otherProps } = props;
    const heights = {
        small1X: 28,
        small: 36,
        root: 40,
        large: 52
    };
    return jsxRuntime.jsx(Skeleton, Object.assign({}, otherProps, {
        borderRadius: "borderRadiusRoot",
        width: 115,
        height: heights[size]
    }), void 0);
}

const containerElements = keyMirror__default["default"]({
    article: null,
    div: null,
    p: null,
    section: null,
    span: null
});
keyMirror__default["default"]({
    label: null,
    fieldset: null
});
const inputElements = keyMirror__default["default"]({
    input: null,
    textarea: null
});
keyMirror__default["default"]({
    // this list is not exhaustive
    // https://www.w3.org/TR/2011/WD-html5-20110525/content-models.html#interactive-content
    a: null,
    button: null
});
keyMirror__default["default"]({
    div: null,
    p: null,
    small: null,
    span: null
});
const progressElements = keyMirror__default["default"]({
    meter: null,
    progress: null
});

function Container(props) {
    const { as =containerElements.div , children , maxWidth ='sizeLarge1X' , paddingInline ={
        base: 'spacingRoot',
        desktop: 'spacingLarge3X'
    } , textAlign , testHook ,  } = props;
    return jsxRuntime.jsx(Box, Object.assign({
        as: as,
        paddingInline: paddingInline,
        marginInline: "auto",
        maxWidth: maxWidth,
        textAlign: textAlign,
        testHook: testHook,
        width: "sizeFull"
    }, {
        children: children
    }), void 0);
}

const getFlexWrapValue = (value)=>{
    if (typeof value === 'boolean') {
        return value ? 'wrap' : 'nowrap';
    }
    return value;
};
const getFlexWrap = (wrap)=>{
    if (___default["default"].isObject(wrap)) {
        return ___default["default"].mapValues(wrap, getFlexWrapValue);
    }
    return getFlexWrapValue(wrap);
};
const Flex = /*#__PURE__*/ react.forwardRef(function Flex(props, ref) {
    const { basis , children , direction , display ='flex' , gap , grow , shrink , wrap , ...otherProps } = props;
    return jsxRuntime.jsx(Box, Object.assign({
        ref: ref
    }, otherProps, {
        display: display,
        flexBasis: basis,
        flexDirection: direction,
        flexGrow: grow,
        flexShrink: shrink,
        flexWrap: getFlexWrap(wrap),
        gap: gap
    }, {
        children: children
    }), void 0);
});

var styles$Y = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","large":"Heading_large__c-mwV","large1X":"Heading_large1X__cLwac","large2X":"Heading_large2X__o4tqv","medium":"Heading_medium__MMjLz","small":"Heading_small__BRY-b","small1X":"Heading_small1X__12xuz","withLabel":"Heading_withLabel__2DiVq","heading":"Heading_heading__VR6ZP","isPageTitle":"Heading_isPageTitle__20BH4 Heading_large__c-mwV","isVisuallyHidden":"Heading_isVisuallyHidden__0KwhF","label":"Heading_label__ibZoe","panelSlideDown":"Heading_panelSlideDown__1vW2S"};

const ranks = keyMirror__default["default"]({
    '1': null,
    '2': null,
    '3': null,
    '4': null,
    '5': null,
    '6': null
});
function Heading(props) {
    const { id , className , isPageTitle =false , isVisuallyHidden =false , label , rank =ranks['2'] , size =headingSizes.large1X , testHook , children ,  } = props;
    const Element = `h${isPageTitle ? ranks['1'] : ranks[rank]}`;
    return jsxRuntime.jsxs(Element, Object.assign({
        className: cx__default["default"](className, {
            [styles$Y.isPageTitle]: isPageTitle,
            [String(styles$Y[size])]: !isPageTitle,
            [styles$Y.isVisuallyHidden]: isVisuallyHidden,
            [styles$Y.withLabel]: !!label
        }),
        "data-test": testHook,
        id: id
    }, {
        children: [
            jsxRuntime.jsx("span", Object.assign({
                className: styles$Y.heading
            }, {
                children: children
            }), void 0),
            label && jsxRuntime.jsx("span", Object.assign({
                className: styles$Y.label,
                "data-test": testHook ? `${testHook}-label` : undefined
            }, {
                children: label
            }), void 0)
        ]
    }), void 0);
}

var styles$X = {"none":"VerticalSpacing_none__1D6bo","noneUp":"VerticalSpacing_noneUp__6aGSU","large":"VerticalSpacing_large__v2n0-","largeUp":"VerticalSpacing_largeUp__SdyIt","large1X":"VerticalSpacing_large1X__oy6ZY","large1XUp":"VerticalSpacing_large1XUp__MolDh","large2X":"VerticalSpacing_large2X__8xDYM","large2XUp":"VerticalSpacing_large2XUp__g-M2k","large3X":"VerticalSpacing_large3X__vKpXZ","large3XUp":"VerticalSpacing_large3XUp__zN3Dg","large4X":"VerticalSpacing_large4X__ho5Io","large4XUp":"VerticalSpacing_large4XUp__SA60o","large5X":"VerticalSpacing_large5X__TNj-T","large5XUp":"VerticalSpacing_large5XUp__3HxnD","large6X":"VerticalSpacing_large6X__5Z5rR","large6XUp":"VerticalSpacing_large6XUp__brDPt","large7X":"VerticalSpacing_large7X__5i92H","large7XUp":"VerticalSpacing_large7XUp__ckYkv","large8X":"VerticalSpacing_large8X__Q7AL5","large8XUp":"VerticalSpacing_large8XUp__DFuxP","large9X":"VerticalSpacing_large9X__iXxry","large9XUp":"VerticalSpacing_large9XUp__uQ9md","root":"VerticalSpacing_root__L8NAX","rootUp":"VerticalSpacing_rootUp__vJi4X","small":"VerticalSpacing_small__ThtDV","smallUp":"VerticalSpacing_smallUp__Yc0LI","small1X":"VerticalSpacing_small1X__ZN11f","small1XUp":"VerticalSpacing_small1XUp__zkSiX","small2X":"VerticalSpacing_small2X__vpJSu","small2XUp":"VerticalSpacing_small2XUp__P2Z0p"};

function VerticalSpacing(props) {
    const { children , isUpwards =false , size =sizes$2.root , testHook  } = props;
    return jsxRuntime.jsx(Box, Object.assign({
        className: cx__default["default"]({
            [String(styles$X[size])]: size && !isUpwards,
            [styles$X[`${size}Up`]]: isUpwards
        }),
        testHook: testHook
    }, {
        children: children
    }), void 0);
}

var styles$W = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","root":"DialogBase_root__FRSn-","isOpen":"DialogBase_isOpen__UNBSF","overlay":"DialogBase_overlay__q0PeC","panelSlideDown":"DialogBase_panelSlideDown__H7deB"};

function DialogBase(props) {
    const { appElement , ariaLabel , children , className , headingId , isOpen , onClose , overlayClassName , ...otherProps } = props;
    ReactModal__default["default"].setAppElement(appElement);
    return jsxRuntime.jsx(ReactModal__default["default"], Object.assign({
        // @ts-ignore react-modal accepts any aria-* property
        aria: {
            labelledby: headingId,
            label: ariaLabel
        },
        htmlOpenClassName: styles$W.isOpen,
        className: cx__default["default"](styles$W.root, className),
        isOpen: isOpen,
        // TS: force assertion from a Button event to a MouseEvent
        onRequestClose: onClose,
        overlayClassName: cx__default["default"](styles$W.overlay, overlayClassName),
        role: "dialog",
        shouldCloseOnEsc: true,
        shouldReturnFocusAfterClose: true
    }, otherProps, {
        children: children
    }), void 0);
}

var styles$V = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","--breakpoint":"min-width: 48.063em","label":"CloseButton_label__QYG8u","circle":"CloseButton_circle__NsZIv","minimal":"CloseButton_minimal__b1eJZ","icon":"CloseButton_icon__o5amW","root":"CloseButton_root__cfEuR","panelSlideDown":"CloseButton_panelSlideDown__LMOjP"};

const variants$c = keyMirror__default["default"]({
    minimal: 'null'
});
function CloseButton$1(props) {
    const { className , label , onClick , testHook , variant  } = props;
    const isMinimalVariant = variant === variants$c.minimal;
    return jsxRuntime.jsxs("button", Object.assign({
        type: "button",
        onClick: onClick,
        className: cx__default["default"](styles$V.root, className, variant && styles$V[variant]),
        "data-test": testHook
    }, {
        children: [
            !isMinimalVariant && jsxRuntime.jsx("span", Object.assign({
                className: styles$V.label
            }, {
                children: label
            }), void 0),
            jsxRuntime.jsx("span", Object.assign({
                className: styles$V.circle
            }, {
                children: jsxRuntime.jsx(Icon, {
                    className: styles$V.icon,
                    name: "close",
                    size: {
                        base: 'sizeIconSmall1X',
                        tablet: isMinimalVariant ? 'sizeIconSmall' : 'sizeIconRoot'
                    },
                    strokeWidth: isMinimalVariant ? {
                        base: undefined,
                        tablet: 2
                    } : undefined,
                    isDecorative: !isMinimalVariant,
                    title: isMinimalVariant ? label : undefined
                }, void 0)
            }), void 0)
        ]
    }), void 0);
}

var styles$U = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","--breakpoint":"min-width: 48.063em","root":"ActionDialog_root__QHc4M","overlay":"ActionDialog_overlay__brMy2","closeButton":"ActionDialog_closeButton__mF-1e","heading":"ActionDialog_heading__YzmLk","content":"ActionDialog_content__1--Gm","footer":"ActionDialog_footer__6xlPD","compact":"ActionDialog_compact__KO-2i","panelSlideDown":"ActionDialog_panelSlideDown__EnoWl"};

const variants$b = keyMirror__default["default"]({
    compact: null
});
function ActionDialog(props) {
    const { appElement , cancelButtonLabel , children , closeAssistiveText , form , heading , isOpen , onClose , submitButtonProps , variant , testHook ,  } = props;
    /* The headingId is used for a11y so that the modal heading is read when
    opening the modal. It doesn't need to be unique since there will always be
    only one modal opened at a time. */ const headingId = 'dialog-heading';
    return jsxRuntime.jsxs(DialogBase, Object.assign({
        appElement: appElement,
        headingId: headingId,
        className: cx__default["default"](styles$U.root, variant && styles$U[variant]),
        isOpen: isOpen,
        onClose: onClose,
        overlayClassName: styles$U.overlay
    }, {
        children: [
            heading && jsxRuntime.jsx("header", {
                children: jsxRuntime.jsxs("div", Object.assign({
                    className: styles$U.heading
                }, {
                    children: [
                        jsxRuntime.jsx(CloseButton$1, {
                            label: closeAssistiveText,
                            onClick: onClose,
                            variant: "minimal",
                            className: styles$U.closeButton,
                            testHook: testHook && `${testHook}-close-button`
                        }, void 0),
                        jsxRuntime.jsx(Container, {
                            children: jsxRuntime.jsx(Heading, Object.assign({
                                id: headingId,
                                size: "large"
                            }, {
                                children: heading
                            }), void 0)
                        }, void 0)
                    ]
                }), void 0)
            }, void 0),
            /*#__PURE__*/ react.cloneElement(form, {}, jsxRuntime.jsxs(jsxRuntime.Fragment, {
                children: [
                    jsxRuntime.jsx(VerticalSpacing, Object.assign({
                        size: variant === variants$b.compact ? 'large' : 'large4X'
                    }, {
                        children: jsxRuntime.jsx(Container, {
                            children: jsxRuntime.jsx("div", Object.assign({
                                className: styles$U.content
                            }, {
                                children: children
                            }), void 0)
                        }, void 0)
                    }), void 0),
                    jsxRuntime.jsx("div", Object.assign({
                        className: styles$U.footer
                    }, {
                        children: jsxRuntime.jsx(Container, {
                            children: jsxRuntime.jsxs(Flex, Object.assign({
                                gap: "spacingLarge",
                                justifyContent: {
                                    base: 'center',
                                    tablet: 'flex-end'
                                }
                            }, {
                                children: [
                                    jsxRuntime.jsx(Button, Object.assign({
                                        variant: "link",
                                        onClick: onClose,
                                        testHook: testHook && `${testHook}-cancel-button`,
                                        isDisabled: submitButtonProps.isLoading
                                    }, {
                                        children: cancelButtonLabel
                                    }), void 0),
                                    jsxRuntime.jsx(Button, Object.assign({
                                        size: "small",
                                        testHook: testHook && `${testHook}-submit-button`,
                                        type: "submit"
                                    }, submitButtonProps), void 0)
                                ]
                            }), void 0)
                        }, void 0)
                    }), void 0)
                ]
            }, void 0))
        ]
    }), void 0);
}

var styles$T = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","root":"PulsatingDot_root__Bxxfg","pulse":"PulsatingDot_pulse__t8pjF","small":"PulsatingDot_small__XXVdE","panelSlideDown":"PulsatingDot_panelSlideDown__YfYfd"};

function PulsatingDot(props) {
    const { className , color , size  } = props;
    return jsxRuntime.jsx("span", {
        className: cx__default["default"](styles$T.root, className, size && styles$T[size]),
        style: color ? {
            '--color': color
        } : undefined
    }, void 0);
}

function BaseLink(props) {
    const { innerRef , to , href , isExternal , component: AppLink , testHook , ...otherProps } = props;
    const sharedProps = {
        ...otherProps,
        'data-test': testHook,
        target: isExternal ? '_blank' : undefined,
        rel: isExternal ? 'noopener noreferrer' : undefined,
        ref: innerRef
    };
    if (AppLink) {
        return jsxRuntime.jsx(AppLink, Object.assign({}, sharedProps, {
            to: to,
            href: href,
            isExternal: isExternal
        }), void 0);
    }
    return jsxRuntime.jsx("a", Object.assign({}, sharedProps, {
        href: href || to
    }, {
        children: sharedProps.children
    }), void 0);
}
var Link$1 = /*#__PURE__*/ react.forwardRef(function Link(props, ref) {
    return jsxRuntime.jsx(BaseLink, Object.assign({}, props, {
        innerRef: ref
    }), void 0);
});

function useMedia() {
    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
        args[_key] = arguments[_key];
    }
    // eslint-disable-next-line prefer-const
    let [settings, ...other] = args;
    if (settings.query && !settings.query.startsWith('(')) {
        settings.query = `(${settings.query})`;
    }
    return reactResponsive.useMediaQuery(settings, ...other);
}
function Media(props) {
    const { element , queries  } = props;
    // We're ignoring Rules of Hooks because the list of queries is not going to
    // change between renders.
    const matches = Object.keys(queries).map((query)=>// eslint-disable-next-line react-hooks/rules-of-hooks
        useMedia({
            query
        })
    );
    return jsxRuntime.jsx(jsxRuntime.Fragment, {
        children: Object.keys(queries).reduce((result, query, i)=>{
            const value = queries[query];
            if (matches[i]) {
                if (!value || ReactIs.isElement(value) || ReactIs.isFragment(value)) {
                    return value;
                }
                return element && /*#__PURE__*/ react.cloneElement(element, value);
            }
            return result;
        }, element)
    }, void 0);
}
Media.query = json2mq__default["default"];
// eslint-disable-next-line @typescript-eslint/no-explicit-any
Media.Any = Media;
Media.Context = reactResponsive.Context;

function Stack(props) {
    const { as , spacing ='spacingRoot' , testHook  } = props;
    const children = flattenChildren__default["default"](props.children);
    const countChildren = children.length;
    const childAs = as === 'ul' || as === 'ol' ? 'li' : undefined;
    return jsxRuntime.jsx(Box, Object.assign({
        as: as,
        testHook: testHook
    }, {
        children: children.map((child, i)=>jsxRuntime.jsx(Box, Object.assign({
                as: childAs
            }, i + 1 < countChildren ? {
                marginBottom: spacing
            } : null, {
                children: child
            }), i)
        )
    }), void 0);
}

keyMirror__default["default"]({
    bodyLarge: null,
    bodyRoot: null,
    bodySmall: null,
    bodySmall1X: null,
    bodySmall2X: null,
    bodySmall3X: null,
    lead: null
});
const defaultStyles$6 = {
    color: 'colorCoreText',
    fontSize: 'fontSizeRoot',
    letterSpacing: 'letterSpacingSmall',
    lineHeight: 'lineHeightRoot'
};
const leadStyles = {
    ...defaultStyles$6,
    color: 'colorFiftyShadesDark',
    fontSize: 'fontSizeLarge',
    fontWeight: 'fontWeightLight'
};
const bodyLargeStyles = {
    ...defaultStyles$6,
    fontFamily: 'fontFamilySystem',
    fontSize: 'fontSizeLarge',
    letterSpacing: 'letterSpacingLarge',
    lineHeight: 'lineHeightSmall'
};
const bodyRootStyles = {
    ...defaultStyles$6,
    fontFamily: 'fontFamilySystem',
    letterSpacing: 'letterSpacingLarge1X',
    lineHeight: 'lineHeightRoot'
};
const bodySmallStyles = {
    ...defaultStyles$6,
    fontFamily: 'fontFamilySystem',
    fontSize: 'fontSizeSmall',
    letterSpacing: 'letterSpacingRoot',
    lineHeight: 'lineHeightLarge'
};
const bodySmall1XStyles = {
    ...defaultStyles$6,
    fontFamily: 'fontFamilySystem',
    fontSize: 'fontSizeSmall1X',
    letterSpacing: 'letterSpacingSmall1X',
    lineHeight: 'lineHeightSmall1X'
};
const bodySmall2XStyles = {
    ...defaultStyles$6,
    fontFamily: 'fontFamilySystem',
    fontSize: 'fontSizeSmall2X',
    letterSpacing: 'letterSpacingNone',
    lineHeight: 'lineHeightLarge'
};
const bodySmall3XStyles = {
    ...defaultStyles$6,
    fontFamily: 'fontFamilySystem',
    fontSize: 'fontSizeSmall3X',
    letterSpacing: 'letterSpacingSmall1X',
    lineHeight: 'lineHeightLarge1X'
};
const variantStyles$1 = {
    bodyLarge: bodyLargeStyles,
    bodyRoot: bodyRootStyles,
    bodySmall: bodySmallStyles,
    bodySmall1X: bodySmall1XStyles,
    bodySmall2X: bodySmall2XStyles,
    bodySmall3X: bodySmall3XStyles,
    lead: leadStyles
};
const Text = /*#__PURE__*/ react.forwardRef(function Text(props, ref) {
    const { as ='div' , variant , ...otherProps } = props;
    return jsxRuntime.jsx(Box, Object.assign({
        ref: ref
    }, variant ? variantStyles$1[variant] : defaultStyles$6, otherProps, {
        as: as
    }), void 0);
});
function TextLoader(props) {
    return jsxRuntime.jsx(Skeleton, Object.assign({}, props, {
        animation: "wave"
    }), void 0);
}

function Truncate(props) {
    const { children , ...otherProps } = props;
    const title = !props.title && typeof children === 'string' ? children : props.title;
    return jsxRuntime.jsx(Box, Object.assign({}, otherProps, {
        title: title,
        as: "span",
        display: "inline-block",
        maxWidth: "sizeFull",
        overflow: "hidden",
        textOverflow: "ellipsis",
        verticalAlign: "middle",
        whiteSpace: "nowrap"
    }, {
        children: children
    }), void 0);
}

var styles$S = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","--upToBreakpoint":"max-width: 48em","--fromBreakpoint":"min-width: 48.063em","root":"ActionPanel_root__G0foj","isLoading":"ActionPanel_isLoading__2A7P9","pulsatingDot":"ActionPanel_pulsatingDot__ppFoB","text":"ActionPanel_text__sNu4p","cta":"ActionPanel_cta__Kp7Sb","panelSlideDown":"ActionPanel_panelSlideDown__X3W4u"};

function ActionPanel(props) {
    const { assistiveText , buttonProps , isLoading , linkProps , testHook , text  } = props;
    return jsxRuntime.jsxs("aside", Object.assign({
        className: cx__default["default"](styles$S.root, {
            [styles$S.isLoading]: isLoading
        }),
        "data-test": testHook
    }, {
        children: [
            jsxRuntime.jsx(Media, {
                element: jsxRuntime.jsx(PulsatingDot, {
                    className: styles$S.pulsatingDot,
                    size: "small"
                }, void 0),
                queries: {
                    [styles$S['--fromBreakpoint']]: {
                        size: undefined
                    }
                }
            }, void 0),
            isLoading && assistiveText && jsxRuntime.jsx(HideVisually, {
                children: assistiveText
            }, void 0),
            jsxRuntime.jsx("div", Object.assign({
                className: styles$S.text
            }, {
                children: isLoading ? jsxRuntime.jsx(jsxRuntime.Fragment, {
                    children: jsxRuntime.jsxs(Stack, Object.assign({
                        spacing: "spacingSmall"
                    }, {
                        children: [
                            jsxRuntime.jsx(TextLoader, {
                                width: {
                                    base: 130,
                                    tablet: 180
                                }
                            }, void 0),
                            jsxRuntime.jsx(TextLoader, {
                                width: {
                                    base: 230,
                                    tablet: 360
                                }
                            }, void 0)
                        ]
                    }), void 0)
                }, void 0) : jsxRuntime.jsxs(jsxRuntime.Fragment, {
                    children: [
                        text && jsxRuntime.jsx(Text, Object.assign({
                            as: "p",
                            fontSize: "fontSizeSmall1X",
                            color: "colorFiftyShadesDark"
                        }, {
                            children: text
                        }), void 0),
                        linkProps && jsxRuntime.jsx(Link$1, Object.assign({}, linkProps, {
                            children: jsxRuntime.jsx(Truncate, {
                                children: linkProps.children
                            }, void 0)
                        }), void 0)
                    ]
                }, void 0)
            }), void 0),
            isLoading && jsxRuntime.jsx("div", Object.assign({
                className: styles$S.cta
            }, {
                children: jsxRuntime.jsx(Media, {
                    element: jsxRuntime.jsx(Icon, {
                        name: "arrow-front",
                        strokeWidth: "2"
                    }, void 0),
                    queries: {
                        [styles$S['--fromBreakpoint']]: jsxRuntime.jsx(ButtonLoader, {
                            size: "small1X"
                        }, void 0)
                    }
                }, void 0)
            }), void 0),
            buttonProps && jsxRuntime.jsx("div", Object.assign({
                className: styles$S.cta
            }, {
                children: jsxRuntime.jsx(Media, {
                    element: buttonProps.to ? jsxRuntime.jsx(Button, Object.assign({
                        variant: "link"
                    }, buttonProps, {
                        children: jsxRuntime.jsx(Icon, {
                            name: "arrow-front",
                            strokeWidth: "2"
                        }, void 0)
                    }), void 0) : null,
                    queries: {
                        [styles$S['--fromBreakpoint']]: jsxRuntime.jsx(Button, Object.assign({}, buttonProps, {
                            size: "small",
                            variant: "info"
                        }), void 0)
                    }
                }, void 0)
            }), void 0)
        ]
    }), void 0);
}

var styles$R = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","--breakpoint":"min-width: 48.063em","root":"Alert_root__bBc52","content":"Alert_content__mvese","text":"Alert_text__e8Z6Y","button":"Alert_button__cUhcb","dismissButton":"Alert_dismissButton__RgZlA","error":"Alert_error__ywHsS","icon":"Alert_icon__wV9MZ","warning":"Alert_warning__yddwe","info":"Alert_info__XlMG3","general":"Alert_general__cWZUO","success":"Alert_success__U4AC4","isGlobal":"Alert_isGlobal__Q26JW","isContentCentered":"Alert_isContentCentered__ECH8K","panelSlideDown":"Alert_panelSlideDown__rSOWe"};

const hideDelays = {
    default: 3000,
    long: 5000,
    longer: 7000
};
const variants$a = keyMirror__default["default"]({
    general: null,
    error: null,
    info: null,
    success: null,
    warning: null
});
const iconNames$1 = Object.freeze({
    general: 'alert-general',
    error: 'alert-error',
    info: 'alert-info',
    success: 'alert-success',
    warning: 'alert-warning'
});
const roleMapping = Object.freeze({
    general: 'status',
    error: 'alert',
    info: 'status',
    success: 'status',
    warning: 'alert'
});
const getButtonVariant = (variant)=>{
    return variant === variants$a.error || variant === variants$a.warning ? variant : undefined;
};
function Alert(props) {
    const { buttonProps , children , dismissAssistiveText , hideDelay ='default' , isAutoDismissible , isContentCentered , isDismissible , isGlobal , onDismiss , testHook , variant ,  } = props;
    var _role;
    // Unless a custom role is provided , use the sensible default based on the
    // variant.
    const role = (_role = props.role) !== null && _role !== void 0 ? _role : roleMapping[variant];
    react.useEffect(()=>{
        const timeout = isAutoDismissible && onDismiss ? setTimeout(onDismiss, hideDelays[hideDelay]) : null;
        return ()=>{
            if (timeout) clearTimeout(timeout);
        };
    }, [
        hideDelay,
        isAutoDismissible,
        onDismiss
    ]);
    return jsxRuntime.jsxs(Box, Object.assign({
        className: cx__default["default"](styles$R.root, {
            [styles$R.isContentCentered]: isContentCentered,
            [styles$R.isGlobal]: isGlobal,
            [String(styles$R[variant])]: variant
        }),
        role: role,
        testHook: testHook
    }, {
        children: [
            jsxRuntime.jsx(Icon, {
                name: iconNames$1[variant],
                size: "sizeIconSmall",
                display: {
                    base: 'none',
                    tablet: 'inline-block'
                },
                className: styles$R.icon
            }, void 0),
            jsxRuntime.jsxs("div", Object.assign({
                className: styles$R.content
            }, {
                children: [
                    jsxRuntime.jsx("div", Object.assign({
                        className: styles$R.text
                    }, {
                        children: children
                    }), void 0),
                    buttonProps && jsxRuntime.jsx("div", Object.assign({
                        className: styles$R.button
                    }, {
                        children: jsxRuntime.jsx(Button, Object.assign({}, buttonProps, {
                            size: "small1X",
                            variant: getButtonVariant(variant)
                        }), void 0)
                    }), void 0)
                ]
            }), void 0),
            isDismissible && dismissAssistiveText && onDismiss && jsxRuntime.jsx(Box, Object.assign({
                as: "button",
                type: "button",
                onClick: onDismiss,
                className: styles$R.dismissButton,
                testHook: testHook ? `${testHook}-close-button` : undefined
            }, {
                children: jsxRuntime.jsx(Icon, {
                    name: "close",
                    size: "sizeIconSmall2X",
                    isDecorative: false,
                    title: dismissAssistiveText
                }, void 0)
            }), void 0)
        ]
    }), void 0);
}

function AlertDialogOverlay(props) {
    return jsxRuntime.jsx(Box, Object.assign({}, props, {
        as: alertDialog.AlertDialogOverlay,
        alignItems: "center",
        display: "flex",
        justifyContent: "center",
        zIndex: "zIndex2"
    }), void 0);
}
function AlertDialogContent(props) {
    return jsxRuntime.jsx(Box, Object.assign({}, props, {
        as: alertDialog.AlertDialogContent,
        borderRadius: "borderRadiusRoot",
        marginInline: {
            base: 'spacingLarge',
            tablet: 'auto'
        },
        maxWidth: "sizeModalSmall",
        padding: {
            base: 'spacingLarge1X',
            tablet: 'spacingLarge3X'
        },
        width: "sizeFull"
    }), void 0);
}
function AlertDialog(props) {
    const { children , heading , isLoading , isOpen , onConfirm , onConfirmLabel , onDismiss , onDismissLabel ='Cancel' , variant ,  } = props;
    const initialFocusRef = react.useRef(null);
    return jsxRuntime.jsx(AlertDialogOverlay, Object.assign({
        isOpen: isOpen,
        leastDestructiveRef: initialFocusRef
    }, {
        children: jsxRuntime.jsx(AlertDialogContent, {
            children: jsxRuntime.jsxs(Stack, Object.assign({
                spacing: "spacingLarge1X"
            }, {
                children: [
                    jsxRuntime.jsxs(Stack, Object.assign({
                        spacing: "spacingSmall"
                    }, {
                        children: [
                            jsxRuntime.jsx(alertDialog.AlertDialogLabel, {
                                children: jsxRuntime.jsx(Text, Object.assign({
                                    as: "h3",
                                    color: "colorFiftyShadesDarkest",
                                    fontFamily: "fontFamilySystem",
                                    fontWeight: "fontWeightMedium"
                                }, {
                                    children: heading
                                }), void 0)
                            }, void 0),
                            children && jsxRuntime.jsx(alertDialog.AlertDialogDescription, {
                                children: jsxRuntime.jsx(Text, Object.assign({
                                    variant: "bodySmall",
                                    color: "colorFiftyShadesDark"
                                }, {
                                    children: children
                                }), void 0)
                            }, void 0)
                        ]
                    }), void 0),
                    jsxRuntime.jsxs(Flex, Object.assign({
                        gap: "spacingSmall1X",
                        justifyContent: "flex-end"
                    }, {
                        children: [
                            onDismiss && jsxRuntime.jsx(Button, Object.assign({
                                ref: initialFocusRef,
                                size: "small1X",
                                variant: "info",
                                onClick: onDismiss
                            }, {
                                children: onDismissLabel
                            }), void 0),
                            jsxRuntime.jsx(Button, Object.assign({
                                ref: !onDismiss ? initialFocusRef : undefined,
                                size: "small1X",
                                variant: variant,
                                onClick: onConfirm,
                                isLoading: isLoading
                            }, {
                                children: onConfirmLabel
                            }), void 0)
                        ]
                    }), void 0)
                ]
            }), void 0)
        }, void 0)
    }), void 0);
}

var styles$Q = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","--breakpoint":"min-width: 48.063em","root":"WithIcon_root__vmCAx","icon":"WithIcon_icon__HZtZw","panelSlideDown":"WithIcon_panelSlideDown__pb1jr"};

const WithIcon = /*#__PURE__*/ react.forwardRef(function WithIcon(props, ref) {
    const { as: Component = containerElements.div , className , children , iconProps , ...otherProps } = props;
    return jsxRuntime.jsxs(Component, Object.assign({}, otherProps, {
        className: cx__default["default"](styles$Q.root, className),
        ref: ref
    }, {
        children: [
            jsxRuntime.jsx("div", Object.assign({
                className: styles$Q.icon
            }, {
                children: jsxRuntime.jsx(Icon, Object.assign({}, iconProps, {
                    size: {
                        base: 'sizeIconSmall',
                        tablet: 'sizeIconRoot'
                    }
                }), void 0)
            }), void 0),
            children
        ]
    }), void 0);
});

var styles$P = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","--breakpoint":"min-width: 48.063em","root":"AttachmentList_root__acgU4","attachment":"AttachmentList_attachment__80Tu3","removeIcon":"AttachmentList_removeIcon__lgT8L","isTruncated":"AttachmentList_isTruncated__mTljr","isFullWidth":"AttachmentList_isFullWidth__qboTF","externalContent":"AttachmentList_externalContent__AgJmy","externalContentDetails":"AttachmentList_externalContentDetails__-5O8L","externalContentName":"AttachmentList_externalContentName__WKjwU","externalContentMeta":"AttachmentList_externalContentMeta__8V6Ph","isDisabled":"AttachmentList_isDisabled__xFQ3w","panelSlideDown":"AttachmentList_panelSlideDown__WJ5md"};

function ExternalContent(props) {
    const { iconProps , isDisabled , linkProps , meta , name , testHook  } = props;
    return jsxRuntime.jsx(WithIcon, Object.assign({}, linkProps, {
        as: isDisabled ? 'button' : Link$1,
        iconProps: iconProps,
        className: cx__default["default"](styles$P.externalContent, {
            [styles$P.isDisabled]: isDisabled
        })
    }, {
        children: jsxRuntime.jsxs("div", Object.assign({
            className: styles$P.externalContentDetails
        }, {
            children: [
                jsxRuntime.jsx("div", Object.assign({
                    className: styles$P.externalContentName,
                    "data-test": testHook && `${testHook}-name`
                }, {
                    children: name
                }), void 0),
                jsxRuntime.jsx("div", Object.assign({
                    className: styles$P.externalContentMeta,
                    "data-test": testHook && `${testHook}-meta`
                }, {
                    children: meta
                }), void 0)
            ]
        }), void 0)
    }), void 0);
}
function Attachment(props) {
    const { children , isTruncated =true , onRemove , removeAssistiveText , testHook , validationTextId ,  } = props;
    return jsxRuntime.jsxs("div", Object.assign({
        className: cx__default["default"](styles$P.attachment, {
            [styles$P.isTruncated]: isTruncated
        }),
        "aria-describedby": validationTextId,
        "data-test": testHook
    }, {
        children: [
            children,
            onRemove && jsxRuntime.jsx(Box, Object.assign({
                as: "button",
                type: "button",
                onClick: onRemove,
                className: styles$P.removeIcon
            }, {
                children: jsxRuntime.jsx(Icon, {
                    name: "close",
                    size: "sizeIconSmall2X",
                    isDecorative: false,
                    title: removeAssistiveText,
                    testHook: testHook && `${testHook}-remove-button`
                }, void 0)
            }), void 0)
        ]
    }), void 0);
}
function Loader$3() {
    return jsxRuntime.jsx(Box, Object.assign({
        alignSelf: "center",
        marginInline: "spacingSmall"
    }, {
        children: jsxRuntime.jsx(TextLoader, {
            width: "sizeFull"
        }, void 0)
    }), void 0);
}
function AttachmentList(props) {
    const { children , testHook  } = props;
    const attachments = flattenChildren__default["default"](children);
    const hasSingleChild = attachments.length === 1;
    return jsxRuntime.jsx("ul", Object.assign({
        className: styles$P.root,
        "data-test": testHook
    }, {
        children: attachments.map((attachment, i)=>jsxRuntime.jsx("li", Object.assign({
                className: attachment.props.isFullWidth || hasSingleChild ? styles$P.isFullWidth : undefined
            }, {
                children: attachment
            }), i)
        )
    }), void 0);
}
AttachmentList.Attachment = Attachment;
AttachmentList.ExternalContent = ExternalContent;
AttachmentList.Loader = Loader$3;

function FieldResetButton(props) {
    const { marginRight , onClick , testHook  } = props;
    return jsxRuntime.jsx(Box, Object.assign({
        as: "button",
        type: "button",
        onClick: onClick,
        color: "colorFiftyShadesDark",
        marginRight: marginRight,
        position: "relative",
        testHook: testHook
    }, {
        children: jsxRuntime.jsx(Icon, {
            name: "close",
            size: "sizeIconSmall2X",
            isDecorative: false,
            title: "Clear"
        }, void 0)
    }), void 0);
}

var styles$O = {"root":"HelpText_root__WPkmx","error":"HelpText_error__zW1rk","warning":"HelpText_warning__FhiGQ"};

keyMirror__default["default"]({
    error: null,
    warning: null
});
function HelpText(props) {
    const { children , id , marginTop ='spacingSmall1X' , testHook , variant  } = props;
    return jsxRuntime.jsx(Box, Object.assign({
        as: "p",
        className: cx__default["default"](styles$O.root, {
            [String(variant && styles$O[variant])]: variant
        }),
        marginTop: marginTop,
        testHook: testHook,
        id: id
    }, {
        children: children
    }), void 0);
}

var styles$N = {"root":"Label_root__-5ayN","large":"Label_large__4T9Pz","ghost":"Label_ghost__qYbv1"};

const variants$9 = keyMirror__default["default"]({
    ghost: null
});
function Label(props) {
    const { // There are cases when we don't want to render as a `label` element e.g.
    // when the wrapped children already contain a `label` which would be invalid.
    // See https://html.spec.whatwg.org/multipage/forms.html#the-label-element
    as ='label' , children , className , marginBottom ='spacingSmall1X' , size , variant , testHook , ...otherProps } = props;
    return jsxRuntime.jsx(Box, Object.assign({}, otherProps, {
        as: as,
        className: cx__default["default"](styles$N.root, className, {
            [String(size && styles$N[size])]: size,
            [String(variant && styles$N[variant])]: variant
        }),
        marginBottom: marginBottom,
        testHook: testHook
    }, {
        children: children
    }), void 0);
}

function useId(prefix) {
    // TODO: use React.useOpaqueIdentifier once neon is upgraded to React v18.
    const id = autoId.useId();
    return prefix ? `${prefix}-${id}` : id;
}

var styles$M = {"root":"FormField_root__tYE4o","secondaryLabel":"FormField_secondaryLabel__dBVvP","fieldContainer":"FormField_fieldContainer__p5soc","isDisabled":"FormField_isDisabled__zsPE5","field":"FormField_field__6ZfHI","error":"FormField_error__ZK0cK","warning":"FormField_warning__B-UmK"};

function useFormField(props) {
    const { label , helpText , isDisabled , isRequired , errorVariant , validationText , secondaryLabel , testHook ,  } = props;
    const id = useId('FormField');
    const helpTextId = useId('HelpText');
    const validationTextId = useId('ValidationText');
    const hasLabels = label || secondaryLabel;
    const classnames = styles$M.root;
    const containerClassnames = cx__default["default"](styles$M.fieldContainer, {
        [styles$M.isDisabled]: isDisabled,
        [String(errorVariant && styles$M[errorVariant])]: errorVariant
    });
    const fieldClassnames = styles$M.field;
    const fieldAttributes = {
        'aria-describedby': cx__default["default"]({
            [String(helpTextId)]: helpText,
            [String(validationTextId)]: validationText
        }) || undefined,
        'aria-invalid': errorVariant === 'error' ? true : undefined,
        disabled: isDisabled,
        id,
        required: isRequired
    };
    const fieldLabel = jsxRuntime.jsx(jsxRuntime.Fragment, {
        children: hasLabels && jsxRuntime.jsxs(Label, Object.assign({
            htmlFor: id,
            testHook: testHook && `${testHook}-label`
        }, {
            children: [
                label,
                secondaryLabel && jsxRuntime.jsx("span", Object.assign({
                    className: styles$M.secondaryLabel
                }, {
                    children: secondaryLabel
                }), void 0)
            ]
        }), void 0)
    }, void 0);
    const fieldHelpText = jsxRuntime.jsxs(jsxRuntime.Fragment, {
        children: [
            helpText && jsxRuntime.jsx(HelpText, Object.assign({
                id: helpTextId,
                testHook: testHook && `${testHook}-help-text`
            }, {
                children: helpText
            }), void 0),
            validationText && errorVariant && jsxRuntime.jsx(HelpText, Object.assign({
                id: validationTextId,
                testHook: testHook && `${testHook}-validation`,
                variant: errorVariant || undefined
            }, {
                children: validationText
            }), void 0)
        ]
    }, void 0);
    return {
        classnames,
        containerClassnames,
        fieldClassnames,
        fieldAttributes,
        fieldLabel,
        fieldHelpText
    };
}

var styles$L = {"root":"SearchInput_root__ZAsr0","icon":"SearchInput_icon__VQak2","input":"SearchInput_input__Ll3zk","resetButtonContainer":"SearchInput_resetButtonContainer__8l0QI"};

function SearchInput(props) {
    const { as: Component = inputElements.input , onReset , value , testHook , ...otherProps } = props;
    const inputRef = react.useRef(null);
    const handleClearSearch = ()=>{
        var ref;
        (ref = inputRef.current) === null || ref === void 0 ? void 0 : ref.focus();
        onReset();
    };
    return jsxRuntime.jsxs(Box, Object.assign({
        className: styles$L.root
    }, {
        children: [
            jsxRuntime.jsx(Icon, {
                className: styles$L.icon,
                name: "search",
                size: "sizeIconSmall2X"
            }, void 0),
            jsxRuntime.jsx(Component, Object.assign({}, otherProps, {
                ref: inputRef,
                className: styles$L.input,
                value: value,
                "data-test": testHook && `${testHook}-search`
            }), void 0),
            jsxRuntime.jsx(Box, Object.assign({
                className: styles$L.resetButtonContainer
            }, {
                children: value && jsxRuntime.jsx(FieldResetButton, {
                    onClick: handleClearSearch,
                    testHook: testHook && `${testHook}-field-reset-button`
                }, void 0)
            }), void 0)
        ]
    }), void 0);
}

var styles$K = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","--symbol-color":"--neon-Menu-symbol-color","root":"MenuItem_root__wN0xu","withCircle":"MenuItem_withCircle__9hHPr","isActive":"MenuItem_isActive__raK6b","isDanger":"MenuItem_isDanger__pWRaN","isDisabled":"MenuItem_isDisabled__0mXxb","icon":"MenuItem_icon__qfpfx","iconWrap":"MenuItem_iconWrap__pZ6WM","menu":"MenuItem_menu__GAroM","large":"MenuItem_large__120oN","narrow":"MenuItem_narrow__7jDhn","panelSlideDown":"MenuItem_panelSlideDown__2m1No"};

const variants$8 = keyMirror__default["default"]({
    large: null,
    narrow: null
});
function MenuItem(props) {
    const { children , color , iconName , isActive , isDanger , isDisabled , testHook , variant , withActiveIcon , withTruncation =true ,  } = props;
    return jsxRuntime.jsxs(Box, Object.assign({
        className: cx__default["default"](styles$K.root, {
            [styles$K.withCircle]: color && !iconName,
            [styles$K.isActive]: isActive,
            [styles$K.isDanger]: isDanger,
            [styles$K.isDisabled]: isDisabled,
            [String(variant && styles$K[variant])]: variant
        }),
        vars: color ? {
            [styles$K['--symbol-color']]: color
        } : undefined,
        testHook: testHook
    }, {
        children: [
            iconName && jsxRuntime.jsx(Icon, {
                className: styles$K.icon,
                name: iconName,
                size: "sizeIconSmall1X"
            }, void 0),
            withTruncation ? jsxRuntime.jsx(Truncate, {
                children: children
            }, void 0) : children,
            withActiveIcon && isActive && jsxRuntime.jsx("span", Object.assign({
                className: styles$K.iconWrap
            }, {
                children: jsxRuntime.jsx(Icon, {
                    className: cx__default["default"](styles$K.icon, styles$K.isActive),
                    name: "check",
                    size: "sizeIconSmall1X",
                    strokeWidth: "2"
                }, void 0)
            }), void 0)
        ]
    }), void 0);
}

var styles$J = {"input":"TextField_input__4K5F6","textarea":"TextField_textarea__HnjPa","withInsertAfter":"TextField_withInsertAfter__nGzCz","insertAfterContainer":"TextField_insertAfterContainer__hutLK"};

keyMirror__default["default"]({
    email: null,
    number: null,
    password: null,
    search: null,
    tel: null,
    text: null,
    url: null
});
const variantIcons$1 = {
    error: 'alert-error',
    warning: 'alert-warning'
};
const variantIconColors = {
    error: 'colorStatusErrorDark',
    warning: 'colorStatusWarningDark'
};
const TextField = /*#__PURE__*/ react.forwardRef(function TextField(props, ref) {
    const { as =inputElements.input , containerRef , helpText , insertAfter , isDisabled , isRequired , label , value , rows =4 , secondaryLabel , withVariantIcon =true , testHook , type ='text' , validationText , errorVariant , ...otherProps } = props;
    const isInput = as === inputElements.input;
    const isTextarea = as === inputElements.textarea;
    const withInsertAfter = isInput && (insertAfter || errorVariant && withVariantIcon);
    invariant__default["default"](!(isTextarea && insertAfter), `You can not use the insertAfter prop on a TextField of type 'textarea'.`);
    const { classnames , containerClassnames , fieldClassnames , fieldAttributes , fieldLabel , fieldHelpText ,  } = useFormField({
        isDisabled,
        isRequired,
        label,
        helpText,
        validationText,
        errorVariant,
        secondaryLabel,
        testHook
    });
    const attributes = {
        ...fieldAttributes,
        ...otherProps
    };
    return jsxRuntime.jsxs(Box, Object.assign({
        testHook: testHook,
        className: classnames
    }, {
        children: [
            fieldLabel,
            jsxRuntime.jsxs(Box, Object.assign({
                className: containerClassnames,
                ref: containerRef
            }, {
                children: [
                    jsxRuntime.jsx(Box, Object.assign({}, attributes, {
                        as: as,
                        className: cx__default["default"](fieldClassnames, {
                            [styles$J.withInsertAfter]: withInsertAfter,
                            [styles$J.input]: isInput,
                            [styles$J.textarea]: isTextarea
                        }),
                        ref: ref,
                        type: isInput ? type : undefined,
                        value: value,
                        testHook: testHook && `${testHook}-input`,
                        rows: isTextarea ? rows : undefined
                    }), void 0),
                    withInsertAfter && jsxRuntime.jsx("div", Object.assign({
                        className: styles$J.insertAfterContainer
                    }, {
                        children: insertAfter || errorVariant && jsxRuntime.jsx(Icon, {
                            color: variantIconColors[errorVariant],
                            name: variantIcons$1[errorVariant],
                            size: "sizeIconSmall"
                        }, void 0)
                    }), void 0)
                ]
            }), void 0),
            fieldHelpText
        ]
    }), void 0);
});

function useLatch(param) {
    let { value , onChange ,  } = param;
    const wasOn = react.useRef(false);
    // Don't change this effect before you understand the limitations of other
    // implementations! See this link for more info
    // https://codesandbox.io/s/isopen-onopen-onclose-6pepx
    react.useEffect(()=>{
        if (!wasOn.current && value) {
            wasOn.current = true;
            onChange(true);
        }
        if (wasOn.current && !value) {
            wasOn.current = false;
            onChange(false);
        }
    }, [
        value
    ]); // eslint-disable-line react-hooks/exhaustive-deps
}

var styles$I = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","overlay":"Drawer_overlay__zKaWo","root":"Drawer_root__HP-AW","header":"Drawer_header__JsJe2","content":"Drawer_content__ISW3h","withPadding":"Drawer_withPadding__Ew-r-","footer":"Drawer_footer__m-ygO","item":"Drawer_item__S1fPj","withSeparator":"Drawer_withSeparator__Eqk3d","fadedOut":"Drawer_fadedOut__2lTDF","itemContent":"Drawer_itemContent__JJVZ3","fullHeight":"Drawer_fullHeight__Svq2i","noMaxHeight":"Drawer_noMaxHeight__WnmEE","panelSlideDown":"Drawer_panelSlideDown__ZDcK5"};

keyMirror__default["default"]({
    fullHeight: null,
    noMaxHeight: null
});
function Header(props) {
    const { children  } = props;
    return jsxRuntime.jsx("div", Object.assign({
        className: styles$I.header
    }, {
        children: children
    }), void 0);
}
function Footer(props) {
    const { children  } = props;
    return jsxRuntime.jsx("div", Object.assign({
        className: styles$I.footer
    }, {
        children: children
    }), void 0);
}
function CloseButton(props) {
    const { onClick , testHook  } = props;
    return jsxRuntime.jsx(Button, Object.assign({
        variant: "link",
        onClick: onClick,
        testHook: testHook && `${testHook}-close`
    }, {
        children: jsxRuntime.jsx(Icon, {
            name: "close",
            size: "sizeIconSmall2X",
            strokeWidth: "2",
            isDecorative: false,
            title: "Close"
        }, void 0)
    }), void 0);
}
function Content$1(props) {
    const { withPadding =true , children  } = props;
    return jsxRuntime.jsx("ul", Object.assign({
        className: cx__default["default"](styles$I.content, withPadding && styles$I.withPadding)
    }, {
        children: flattenChildren__default["default"](children).map((child, i)=>jsxRuntime.jsx("li", {
                children: child
            }, i)
        )
    }), void 0);
}
keyMirror__default["default"]({
    button: null,
    div: null,
    li: null
});
const Item = /*#__PURE__*/ react.forwardRef(function Item(props, ref) {
    const { element , onClick , fadedOut , withSeparator , children , testHook , ...otherProps } = props;
    const Component = element || (onClick ? 'button' : 'div');
    return jsxRuntime.jsx(Component, Object.assign({
        // @ts-ignore TODO-TS[ENHANCEMENT] ref needs to be improved
        ref: ref
    }, otherProps, {
        onClick: onClick,
        type: Component === 'button' ? 'button' : undefined,
        className: cx__default["default"](styles$I.item, {
            [styles$I.fadedOut]: fadedOut,
            [styles$I.withSeparator]: withSeparator
        }),
        "data-test": testHook
    }, {
        children: jsxRuntime.jsx(Box, Object.assign({
            className: styles$I.itemContent
        }, {
            children: children
        }), void 0)
    }), void 0);
});
function Drawer(props) {
    const { ariaLabel , children , footer , header , isOpen , onOpen , onClose , testHook , variant  } = props;
    // @ts-ignore TODO-TS[ENHANCEMENT] need better types for flattenChildren across app
    const hasContent = flattenChildren__default["default"](children).some((child)=>child.type === Content$1
    );
    useLatch({
        value: isOpen,
        onChange: (value)=>{
            return value ? onOpen === null || onOpen === void 0 ? void 0 : onOpen() : onClose === null || onClose === void 0 ? void 0 : onClose();
        }
    });
    return jsxRuntime.jsx(dialog.DialogOverlay, Object.assign({
        className: styles$I.overlay,
        isOpen: isOpen,
        onDismiss: onClose,
        "data-test": testHook && `${testHook}-overlay`
    }, {
        children: jsxRuntime.jsxs(dialog.DialogContent, Object.assign({
            className: cx__default["default"](styles$I.root, {
                [String(variant && styles$I[variant])]: variant
            }),
            "aria-label": ariaLabel
        }, {
            children: [
                header && jsxRuntime.jsx(Header, {
                    children: header
                }, void 0),
                hasContent ? children : jsxRuntime.jsx(Content$1, {
                    children: children
                }, void 0),
                footer && jsxRuntime.jsx(Footer, {
                    children: footer
                }, void 0)
            ]
        }), void 0)
    }), void 0);
}
Drawer.Header = Header;
Drawer.Footer = Footer;
Drawer.CloseButton = CloseButton;
Drawer.Content = Content$1;
Drawer.Item = Item;

var rootPixelSizes = Object.freeze({
    rootPixelSizeNeon: 16,
    rootPixelSizeUserAgent: 16
});

const { rootPixelSizeNeon , rootPixelSizeUserAgent: rootPixelSizeUserAgent$1  } = rootPixelSizes;
const pxToRelativeUnit = (px, unit, root)=>`${Number((px / root).toFixed(3))}${unit}`
;
const pxToEm = (px)=>pxToRelativeUnit(px, 'em', rootPixelSizeUserAgent$1)
;
const pxToRem = (px)=>pxToRelativeUnit(px, 'rem', rootPixelSizeNeon)
;

const breakpointWidths = {
    small1X: 360,
    small: 480,
    medium: 768,
    large: 992,
    large1X: 1200
};
const breakpoints = Object.freeze({
    breakpointLarge: pxToEm(breakpointWidths.large),
    breakpointLargeFrom: pxToEm(breakpointWidths.large + 1),
    breakpointLarge1X: pxToEm(breakpointWidths.large1X),
    breakpointLarge1XFrom: pxToEm(breakpointWidths.large1X + 1),
    breakpointMedium: pxToEm(breakpointWidths.medium),
    breakpointMediumFrom: pxToEm(breakpointWidths.medium + 1),
    breakpointSmall1X: pxToEm(breakpointWidths.small1X),
    breakpointSmall1XFrom: pxToEm(breakpointWidths.small1X + 1),
    breakpointSmall: pxToEm(breakpointWidths.small),
    breakpointSmallFrom: pxToEm(breakpointWidths.small + 1)
});
// Named breakpoints used by the ThemeProvider for responsive system props
const themeBreakpoints = {
    mobile: breakpoints.breakpointSmall,
    tablet: breakpoints.breakpointMedium,
    desktop: breakpoints.breakpointLarge,
    wide: breakpoints.breakpointLarge1X
};

const createPositionMaxWidth = (maxWidth)=>(targetRect, popoverRect)=>({
            ...Popover.positionDefault(targetRect, popoverRect),
            maxWidth
        })
;
const createDOMRectFromRef = (ref)=>{
    var ref1;
    const boundingClient = (ref1 = ref.current) === null || ref1 === void 0 ? void 0 : ref1.getBoundingClientRect();
    // DOMRect is undefined in jsdom (e.g. Carbon unit tests)
    if (typeof DOMRect === 'undefined') {
        return null;
    }
    return new DOMRect(boundingClient === null || boundingClient === void 0 ? void 0 : boundingClient.x, boundingClient === null || boundingClient === void 0 ? void 0 : boundingClient.y, boundingClient === null || boundingClient === void 0 ? void 0 : boundingClient.width, boundingClient === null || boundingClient === void 0 ? void 0 : boundingClient.height);
};
// Custom popover position function for ComboboxPopover and MenuPopover. It can add an offset so
// that it doesn't overlay the element, and it can match a targeted elements width.
const popoverPosition = function() {
    let { targetContainer , offset =5  } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    return (targetRect, popoverRect)=>{
        const triggerPosition = targetContainer ? createDOMRectFromRef(targetContainer) : targetRect;
        const position = Popover.positionDefault(triggerPosition, popoverRect);
        var _top;
        const positionTop = typeof position.top === 'string' ? parseFloat(position.top) : (_top = position.top) !== null && _top !== void 0 ? _top : 0;
        const directionUp = targetRect && popoverRect ? Popover.getCollisions(targetRect, popoverRect).directionUp : undefined;
        return {
            ...position,
            top: directionUp ? `${positionTop - offset}px` : `${positionTop + offset}px`,
            minWidth: Popover.positionMatchWidth(triggerPosition, popoverRect).width
        };
    };
};

var styles$H = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","withChevron":"Autosuggest_withChevron__DTKFz","withTextFade":"Autosuggest_withTextFade__rzdwm","isDisabled":"Autosuggest_isDisabled__Gs8Zi","popover":"Autosuggest_popover__a8uAe","panelSlideDown":"Autosuggest_panelSlideDown__JDf3D","list":"Autosuggest_list__wpnAz","listItem":"Autosuggest_listItem__kWC-K","drawerTrigger":"Autosuggest_drawerTrigger__nH-0E"};

function NoResultMenuItem(props) {
    const { children , variant  } = props;
    return jsxRuntime.jsx(MenuItem, Object.assign({
        variant: variant
    }, {
        children: jsxRuntime.jsx(Box, Object.assign({
            as: "span",
            role: "alert"
        }, {
            children: children
        }), void 0)
    }), void 0);
}
const Autosuggest = /*#__PURE__*/ react.forwardRef(function Autosuggest(props, ref1) {
    const { buttonText , drawerProps , helpText , isDisabled , isRequired , label , options , onBlur , onReset , onSearchReset , onSelect , noResultText , renderAddOptionText , secondaryLabel , testHook , validationText , value , errorVariant , ...otherProps } = props;
    const textFieldContainerRef = react.useRef(null);
    const textFieldRef = react.useRef(null);
    const textFieldMergedRef = useMergedRef__default["default"](ref1, textFieldRef);
    const matches = useMedia({
        minWidth: breakpoints.breakpointMediumFrom
    });
    const [isDrawerOpen, setIsDrawerOpen] = react.useState(false);
    // There is an issue in Comobox: https://github.com/reach/reach-ui/issues/792
    // When selecting an option, onBlur is triggered before onSelect which makes
    // it impossible to decide if the input field can be cleared. Using this hook,
    // onBlur is only called when the user didn't select an option.
    useOnClickOutside__default["default"](textFieldRef, (e)=>{
        var ref;
        // TODO-TS[ENHANCEMENT] requires behaviour change - remove `as HTMLElement`
        // assertion and null check as e.target can be null
        const selectedOption = ((ref = e.target.closest('li')) === null || ref === void 0 ? void 0 : ref.getAttribute('role')) === 'option';
        if (matches && !selectedOption && document.activeElement === textFieldRef.current) {
            onBlur();
        }
    });
    const handleReset = ()=>{
        var ref;
        if (!onReset) {
            return;
        }
        onReset();
        (ref = textFieldRef.current) === null || ref === void 0 ? void 0 : ref.focus();
    };
    const showNoResultMenuItem = !options.length && !renderAddOptionText;
    const showAddOption = react.useCallback(()=>{
        const optionLabels = options.map((option)=>option.label.toLowerCase()
        );
        const isNotInOptions = !optionLabels.includes(value === null || value === void 0 ? void 0 : value.toLowerCase());
        return !!(isNotInOptions && renderAddOptionText && value);
    }, [
        options,
        renderAddOptionText,
        value
    ]);
    const onDrawerOpen = react.useCallback(()=>{
        var ref;
        setIsDrawerOpen(true);
        drawerProps === null || drawerProps === void 0 ? void 0 : (ref = drawerProps.onOpen) === null || ref === void 0 ? void 0 : ref.call(drawerProps);
    }, [
        drawerProps
    ]);
    const onDrawerClose = react.useCallback(()=>{
        var ref;
        setIsDrawerOpen(false);
        onBlur();
        drawerProps === null || drawerProps === void 0 ? void 0 : (ref = drawerProps.onClose) === null || ref === void 0 ? void 0 : ref.call(drawerProps);
    }, [
        drawerProps,
        onBlur
    ]);
    const onDrawerSelect = react.useCallback((option)=>{
        var ref;
        onSelect(option);
        setIsDrawerOpen(false);
        drawerProps === null || drawerProps === void 0 ? void 0 : (ref = drawerProps.onClose) === null || ref === void 0 ? void 0 : ref.call(drawerProps);
    }, [
        drawerProps,
        onSelect
    ]);
    const { classnames , containerClassnames , fieldAttributes , fieldClassnames , fieldHelpText , fieldLabel ,  } = useFormField({
        label,
        helpText,
        isDisabled,
        isRequired,
        validationText,
        errorVariant,
        secondaryLabel,
        testHook
    });
    return jsxRuntime.jsxs(Box, Object.assign({
        testHook: testHook
    }, {
        children: [
            fieldLabel,
            matches ? jsxRuntime.jsxs(combobox.Combobox, Object.assign({
                className: cx__default["default"]({
                    [styles$H.withChevron]: !renderAddOptionText,
                    [styles$H.withTextFade]: !renderAddOptionText,
                    [styles$H.isDisabled]: isDisabled
                }),
                onSelect: onSelect,
                openOnFocus: !renderAddOptionText
            }, {
                children: [
                    jsxRuntime.jsx(combobox.ComboboxInput, Object.assign({}, otherProps, fieldAttributes, {
                        as: TextField,
                        containerRef: textFieldContainerRef,
                        insertAfter: onReset && jsxRuntime.jsx(FieldResetButton, {
                            marginRight: renderAddOptionText ? undefined : 'spacingLarge1X',
                            onClick: handleReset,
                            testHook: testHook && `${testHook}-field-reset-button`
                        }, void 0),
                        isDisabled: isDisabled,
                        ref: textFieldMergedRef,
                        testHook: testHook && `${testHook}-input`,
                        value: value,
                        errorVariant: errorVariant,
                        withVariantIcon: false
                    }), void 0),
                    jsxRuntime.jsx(combobox.ComboboxPopover, Object.assign({
                        className: styles$H.popover,
                        // @ts-ignore TODO-TS[ENHANCEMENT] position seems to vary from component to component
                        position: popoverPosition({
                            targetContainer: textFieldContainerRef
                        })
                    }, {
                        children: jsxRuntime.jsxs(combobox.ComboboxList, Object.assign({
                            className: styles$H.list
                        }, {
                            children: [
                                showAddOption() && // @ts-ignore TODO-TS
                                jsxRuntime.jsx(combobox.ComboboxOption, Object.assign({
                                    className: styles$H.listItem,
                                    value: value
                                }, {
                                    children: jsxRuntime.jsx(MenuItem, Object.assign({
                                        variant: "large",
                                        testHook: testHook && `${testHook}-item-addOption`
                                    }, {
                                        children: jsxRuntime.jsx(jsxRuntime.Fragment, {
                                            children: renderAddOptionText && renderAddOptionText(jsxRuntime.jsx(combobox.ComboboxOptionText, {}, void 0))
                                        }, void 0)
                                    }), void 0)
                                }), void 0),
                                options.length > 0 && jsxRuntime.jsx(jsxRuntime.Fragment, {
                                    children: options.map((option, i)=>jsxRuntime.jsx(combobox.ComboboxOption, Object.assign({
                                            className: styles$H.listItem,
                                            value: option.label
                                        }, {
                                            children: jsxRuntime.jsx(MenuItem, Object.assign({}, option, {
                                                variant: "large",
                                                testHook: testHook && `${testHook}-item-${i}`
                                            }, {
                                                children: jsxRuntime.jsx(combobox.ComboboxOptionText, {}, void 0)
                                            }), void 0)
                                        }), i)
                                    )
                                }, void 0),
                                showNoResultMenuItem && jsxRuntime.jsx(NoResultMenuItem, Object.assign({
                                    variant: "large"
                                }, {
                                    children: noResultText
                                }), void 0)
                            ]
                        }), void 0)
                    }), void 0)
                ]
            }), void 0) : jsxRuntime.jsx(Box, Object.assign({
                className: cx__default["default"](containerClassnames, {
                    [styles$H.isDisabled]: isDisabled,
                    [styles$H.withChevron]: !renderAddOptionText
                })
            }, {
                children: jsxRuntime.jsx("button", Object.assign({
                    disabled: fieldAttributes.disabled,
                    className: cx__default["default"](styles$H.drawerTrigger, fieldClassnames, classnames),
                    onClick: onDrawerOpen,
                    type: "button",
                    "data-test": testHook && `${testHook}-trigger`
                }, {
                    children: jsxRuntime.jsx(Truncate, Object.assign({
                        paddingRight: !renderAddOptionText ? 'spacingLarge1X' : undefined,
                        color: !value ? 'colorFiftyShadesDark' : undefined
                    }, {
                        children: value || buttonText
                    }), void 0)
                }), void 0)
            }), void 0),
            fieldHelpText,
            isDrawerOpen && jsxRuntime.jsxs(Drawer, Object.assign({}, drawerProps, {
                variant: "fullHeight",
                isOpen: isDrawerOpen,
                onClose: onDrawerClose,
                testHook: testHook && `${testHook}-drawer`
            }, {
                children: [
                    jsxRuntime.jsx(Drawer.Header, {
                        children: jsxRuntime.jsx(Drawer.CloseButton, {
                            onClick: onDrawerClose,
                            testHook: testHook && `${testHook}-close`
                        }, void 0)
                    }, void 0),
                    jsxRuntime.jsx(Drawer.Content, Object.assign({
                        withPadding: false
                    }, {
                        children: jsxRuntime.jsxs(combobox.Combobox, Object.assign({
                            onSelect: onDrawerSelect
                        }, {
                            children: [
                                jsxRuntime.jsx(Drawer.Item, Object.assign({
                                    fadedOut: true
                                }, {
                                    children: jsxRuntime.jsx(SearchInput, Object.assign({}, otherProps, {
                                        value: value,
                                        autoFocus: true,
                                        onReset: onSearchReset,
                                        testHook: testHook && `${testHook}-search-input`,
                                        as: combobox.ComboboxInput
                                    }), void 0)
                                }), void 0),
                                jsxRuntime.jsxs(combobox.ComboboxList, Object.assign({
                                    className: styles$H.list
                                }, {
                                    children: [
                                        showAddOption() && jsxRuntime.jsx(combobox.ComboboxOption, Object.assign({
                                            as: Drawer.Item,
                                            element: "li",
                                            onClick: ()=>onDrawerSelect(value)
                                            ,
                                            className: styles$H.listItem,
                                            // @ts-ignore TODO-TS
                                            value: value,
                                            "data-test": testHook && `${testHook}-item-addOption`
                                        }, {
                                            children: renderAddOptionText && // @ts-ignore Box being reworked - see box notes
                                            jsxRuntime.jsx("div", {
                                                children: renderAddOptionText(jsxRuntime.jsx(combobox.ComboboxOptionText, {}, void 0))
                                            }, void 0)
                                        }), void 0),
                                        options.length > 0 && jsxRuntime.jsx(jsxRuntime.Fragment, {
                                            children: options.map((option, i)=>jsxRuntime.jsx(combobox.ComboboxOption, Object.assign({
                                                    as: Drawer.Item,
                                                    element: "li",
                                                    value: option.label,
                                                    "data-test": testHook && `${testHook}-item-${i}`
                                                }, {
                                                    children: jsxRuntime.jsx(MenuItem, Object.assign({}, option, {
                                                        children: jsxRuntime.jsx(combobox.ComboboxOptionText, {}, void 0)
                                                    }), void 0)
                                                }), i)
                                            )
                                        }, void 0),
                                        showNoResultMenuItem && jsxRuntime.jsx(Drawer.Item, {
                                            children: jsxRuntime.jsx(NoResultMenuItem, {
                                                children: noResultText
                                            }, void 0)
                                        }, void 0)
                                    ]
                                }), void 0)
                            ]
                        }), void 0)
                    }), void 0)
                ]
            }), void 0)
        ]
    }), void 0);
});

var styles$G = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","large":"Tooltip_large__Hgr3a","isTextOnly":"Tooltip_isTextOnly__9WPKy","panelSlideDown":"Tooltip_panelSlideDown__jF-Nc"};

function Tooltip(props) {
    const { children , isTextOnly =true , size , ...otherProps } = props;
    return jsxRuntime.jsx(Tippy__default["default"], Object.assign({
        animation: "shift-toward",
        arrow: true,
        popperOptions: {
            modifiers: [
                {
                    name: 'flip',
                    options: {
                        fallbackPlacements: [
                            'bottom',
                            'right'
                        ]
                    }
                }, 
            ]
        }
    }, otherProps, {
        className: cx__default["default"]({
            [String(size && styles$G[size])]: size,
            [styles$G.isTextOnly]: isTextOnly
        })
    }, {
        children: children && ReactIs__namespace.typeOf(children) === ReactIs__namespace.Element ? /*#__PURE__*/ react.cloneElement(children, {
            tabIndex: 0
        }) : children
    }), void 0);
}
Tooltip.defaultProps = {
    theme: 'dark'
};

const sizingsAvatar = Object.freeze({
    sizeAvatarLarge1X: pxToRem(84),
    sizeAvatarLarge: pxToRem(44),
    sizeAvatarRoot: pxToRem(36),
    sizeAvatarSmall: pxToRem(30),
    sizeAvatarSmall1X: pxToRem(24)
});

const variants$7 = keyMirror__default["default"]({
    muted: null
});
const avatarDefaultSize = 'sizeAvatarRoot';
function initials(name) {
    if (!name) return null;
    const words = name.trim().split(' ');
    const firstInitial = words[0].charAt(0);
    const lastInitial = words[words.length - 1].charAt(0);
    return `${firstInitial}${lastInitial}`.toUpperCase();
}
function AvatarContents(props) {
    const { icon , isDecorative , name , size =avatarDefaultSize , src , tooltip  } = props;
    if (!icon && !src && !name) return null;
    if (icon) {
        return jsxRuntime.jsx(Flex, Object.assign({
            justifyContent: "center",
            alignItems: "center",
            size: size
        }, {
            children: icon
        }), void 0);
    }
    if (src) {
        // to avoid repetion with screen readers, the alt attribute isn't set if the
        // isDecorative or the tooltip props are set
        return jsxRuntime.jsx(Box, {
            as: "img",
            src: src,
            alt: !isDecorative && !tooltip && name || '',
            size: size
        }, void 0);
    }
    return jsxRuntime.jsx(Box, Object.assign({
        as: "abbr",
        color: "colorCoreWhite",
        display: "block",
        fontFamily: "fontFamilySystem",
        fontSize: // eslint-disable-next-line no-nested-ternary
        size === 'sizeAvatarSmall1X' ? 'fontSizeSmall3X' : size === 'sizeAvatarLarge1X' ? 'fontSizeLarge3X' : 'fontSizeSmall2X',
        fontWeight: "fontWeightLight",
        letterSpacing: "letterSpacingLarge2X",
        lineHeight: size,
        textAlign: "center",
        textIndent: "letterSpacingLarge2X",
        // overwrite normalize.css defaults
        _title: {
            textDecoration: 'none'
        },
        "aria-hidden": isDecorative ? 'true' : undefined
    }, {
        children: initials(name)
    }), void 0);
}
function Avatar(props) {
    const { backgroundColor ='colorFiftyShadesLight' , icon , isDecorative , name , size =avatarDefaultSize , src , tooltip , variant , ...otherProps } = props;
    invariant__default["default"](Object.keys(sizingsAvatar).includes(size), 'The Avatar size must be one of the sizingsAvatar tokens.');
    const contents = jsxRuntime.jsx(Box, Object.assign({}, otherProps, {
        backgroundColor: backgroundColor,
        borderRadius: "borderRadiusCircle",
        flexShrink: 0,
        opacity: variant === variants$7.muted ? 0.5 : undefined,
        overflow: "hidden",
        size: size,
        tabIndex: tooltip ? 0 : undefined
    }, {
        children: jsxRuntime.jsx(AvatarContents, {
            icon: icon,
            isDecorative: isDecorative,
            name: name,
            size: size,
            src: src,
            tooltip: tooltip
        }, void 0)
    }), void 0);
    return tooltip ? jsxRuntime.jsx(Tooltip, Object.assign({
        content: tooltip,
        appendTo: "parent"
    }, {
        children: contents
    }), void 0) : contents;
}

// max number of names shown in the +n tooltip
const countMaxDisplayedNames = 10;
function AvatarGroupItem(props) {
    const { children  } = props;
    return jsxRuntime.jsx(Box, Object.assign({
        as: "li",
        display: "inline-block",
        marginLeft: "spacingNegativeSmall2X",
        verticalAlign: "top",
        _first: {
            marginLeft: 'spacingNone'
        }
    }, {
        children: children
    }), void 0);
}
function AvatarGroup(props) {
    var ref;
    const { max =5 , renderName  } = props;
    const children = react.Children.toArray(props.children);
    const hiddenAvatars = children.slice(max);
    const countHiddenAvatars = hiddenAvatars.length;
    const countHiddenNamesInTooltip = countHiddenAvatars - countMaxDisplayedNames;
    // extract the size from the first avatar to use for the n+ item
    const avatarSize = ((ref = children[0]) === null || ref === void 0 ? void 0 : ref.props.size) || avatarDefaultSize;
    return jsxRuntime.jsxs(Box, Object.assign({
        as: "ul"
    }, {
        children: [
            react.Children.map(children.slice(0, max), (child, i)=>jsxRuntime.jsx(AvatarGroupItem, {
                    children: child
                }, i)
            ),
            countHiddenAvatars > 0 && jsxRuntime.jsx(AvatarGroupItem, {
                children: jsxRuntime.jsx(Tooltip, Object.assign({
                    content: jsxRuntime.jsxs(Stack, Object.assign({
                        as: "ul",
                        spacing: "spacingSmall4X"
                    }, {
                        children: [
                            react.Children.map(hiddenAvatars, (hiddenAvatar)=>renderName ? renderName(hiddenAvatar.props) : hiddenAvatar.props.name
                            ),
                            countHiddenNamesInTooltip > 0 && `and ${countHiddenNamesInTooltip} more…`
                        ]
                    }), void 0),
                    isTextOnly: true,
                    appendTo: "parent"
                }, {
                    children: jsxRuntime.jsxs(Box, Object.assign({
                        as: "span",
                        backgroundColor: "colorFiftyShadesLighter",
                        borderRadius: "borderRadiusCircle",
                        display: "block",
                        size: avatarSize,
                        color: "colorFiftyShadesDarker",
                        fontFamily: "fontFamilySystem",
                        fontSize: "fontSizeSmall2X",
                        fontWeight: "fontWeightMedium",
                        lineHeight: avatarSize,
                        textAlign: "center",
                        tabIndex: 0,
                        verticalAlign: "middle"
                    }, {
                        children: [
                            "+",
                            countHiddenAvatars
                        ]
                    }), void 0)
                }), void 0)
            }, void 0)
        ]
    }), void 0);
}

const a11y = Object.freeze({
    a11yMinimumTouchTargetSize: pxToRem(48),
    a11yOutlineOffset: pxToRem(2),
    a11yOutlineWidth: pxToRem(4)
});

const borderRadii = Object.freeze({
    borderRadiusNone: '0',
    borderRadiusSmall: pxToRem(3),
    borderRadiusRoot: pxToRem(5),
    borderRadiusLarge: pxToRem(10),
    borderRadiusLarge1X: pxToRem(20),
    borderRadiusCircle: '50%',
    borderRadiusLegacyButton: pxToRem(100)
});

const borderWidths = Object.freeze({
    borderWidthNone: '0',
    borderWidthRoot: '1px',
    borderWidthLarge: '2px',
    borderWidthLarge1X: '4px'
});

const shared = {
    colorCoreBlack: '#303338',
    colorCoreBrand: '#177cf9',
    colorInteractiveLink: '#066fef'
};
keyMirror__default["default"]({
    colorArcticIce: null,
    colorAtomiBlues: null,
    colorAwkwardOrchid: null,
    colorBlueSkies: null,
    colorFairyFloss: null,
    colorFiftyShades: null,
    colorGreenMonster: null,
    colorMadMagenta: null,
    colorMatchaLatte: null,
    colorOceanSwim: null,
    colorPurpleRain: null,
    colorStatusError: null,
    colorStatusSuccess: null,
    colorStatusWarning: null,
    colorStrawberryFields: null,
    colorSunnyArvo: null,
    colorTangerineTease: null
});
const colors = Object.freeze({
    // `null` values means product design are yet to define the colour
    // Core
    colorCoreBlack: shared.colorCoreBlack,
    colorCoreBrand: shared.colorCoreBrand,
    colorCoreText: shared.colorCoreBlack,
    colorCoreWhite: '#fff',
    // Interactive
    colorInteractiveFocusRing: shared.colorInteractiveLink,
    colorInteractiveLink: shared.colorInteractiveLink,
    colorInteractiveLinkHover: shared.colorCoreBlack,
    // Arctic ice
    colorArcticIceDark: '#007ea8',
    colorArcticIceDarker: '#006486',
    colorArcticIceDarkest: '#005172',
    colorArcticIceLight: null,
    colorArcticIceLighter: '#c1e9f4',
    colorArcticIceLightest: '#e7f6fa',
    colorArcticIceRoot: '#65cae4',
    // Atomi blues
    colorAtomiBluesDark: shared.colorInteractiveLink,
    colorAtomiBluesDarker: '#1a61ad',
    colorAtomiBluesDarkest: '#344563',
    colorAtomiBluesLight: '#9bc5f8',
    colorAtomiBluesLighter: '#d9e9fc',
    colorAtomiBluesLightest: '#f3f8ff',
    colorAtomiBluesRoot: shared.colorCoreBrand,
    // Awkward orchid
    colorAwkwardOrchidDark: '#935cbc',
    colorAwkwardOrchidDarker: '#804aad',
    colorAwkwardOrchidDarkest: '#6c3997',
    colorAwkwardOrchidLight: null,
    colorAwkwardOrchidLighter: '#e0caf0',
    colorAwkwardOrchidLightest: '#f3ebf9',
    colorAwkwardOrchidRoot: '#b27cda',
    // Blue skies
    colorBlueSkiesDark: null,
    colorBlueSkiesDarker: '#007aa3',
    colorBlueSkiesDarkest: '#006080',
    colorBlueSkiesLight: '#66caeb',
    colorBlueSkiesLighter: '#ceedf8',
    colorBlueSkiesLightest: '#e6f6fb',
    colorBlueSkiesRoot: '#00a7dd',
    // Fairy floss
    colorFairyFlossDark: null,
    colorFairyFlossDarker: '#d33c5f',
    colorFairyFlossDarkest: '#a8304c',
    colorFairyFlossLight: null,
    colorFairyFlossLighter: '#f6cfda',
    colorFairyFlossLightest: '#fbecf0',
    colorFairyFlossRoot: '#e988a3',
    // Fifty shades
    colorFiftyShadesDark: '#6e7680',
    colorFiftyShadesDarker: '#5b636c',
    colorFiftyShadesDarkest: shared.colorCoreBlack,
    colorFiftyShadesLight: '#bfc4cb',
    colorFiftyShadesLighter: '#e1e4e7',
    colorFiftyShadesLightest: '#f8fafb',
    colorFiftyShadesRoot: '#9ca3ac',
    // Green monster
    colorGreenMonsterDark: '#00a87e',
    colorGreenMonsterDarker: '#007a5c',
    colorGreenMonsterDarkest: '#00674a',
    colorGreenMonsterLight: null,
    colorGreenMonsterLighter: '#99ead6',
    colorGreenMonsterLightest: '#d8f7ef',
    colorGreenMonsterRoot: '#00cc99',
    // Mad magenta
    colorMadMagentaDark: null,
    colorMadMagentaDarker: '#a20059',
    colorMadMagentaDarkest: '#810047',
    colorMadMagentaLight: null,
    colorMadMagentaLighter: '#e6afcd',
    colorMadMagentaLightest: '#f5e1ec',
    colorMadMagentaRoot: '#c13883',
    // Matcha latte
    colorMatchaLatteDark: null,
    colorMatchaLatteDarker: '#88b05f',
    colorMatchaLatteDarkest: '#537f24',
    colorMatchaLatteLight: null,
    colorMatchaLatteLighter: '#e3f3d1',
    colorMatchaLatteLightest: '#f4faed',
    colorMatchaLatteRoot: '#bae191',
    // Ocean swim
    colorOceanSwimDark: null,
    colorOceanSwimDarker: '#007c85',
    colorOceanSwimDarkest: '#00636a',
    colorOceanSwimLight: null,
    colorOceanSwimLighter: '#99e9e7',
    colorOceanSwimLightest: '#d9f6f6',
    colorOceanSwimRoot: '#00c9c3',
    // Purple rain
    colorPurpleRainDark: null,
    colorPurpleRainDarker: '#48418b',
    colorPurpleRainDarkest: '#39346f',
    colorPurpleRainLight: null,
    colorPurpleRainLighter: '#c5badd',
    colorPurpleRainLightest: '#e9e5f2',
    colorPurpleRainRoot: '#6f54aa',
    // Status error
    colorStatusErrorDark: '#dd002f',
    colorStatusErrorDarker: '#c82626',
    colorStatusErrorDarkest: '#a01e1e',
    colorStatusErrorLight: null,
    colorStatusErrorLighter: '#ffbdbf',
    colorStatusErrorLightest: '#ffe5e6',
    colorStatusErrorRoot: '#ff5a5f',
    // Status success
    colorStatusSuccessDark: '#00A87E',
    colorStatusSuccessDarker: '#007A5C',
    colorStatusSuccessDarkest: '#00674A',
    colorStatusSuccessLight: null,
    colorStatusSuccessLighter: '#99EAD6',
    colorStatusSuccessLightest: '#D8F7EF',
    colorStatusSuccessRoot: '#00CC99',
    // Status warning
    colorStatusWarningDark: '#f86530',
    colorStatusWarningDarker: '#d43e08',
    colorStatusWarningDarkest: '#9d2e06',
    colorStatusWarningLight: null,
    colorStatusWarningLighter: '#fdd9cd',
    colorStatusWarningLightest: '#feece6',
    colorStatusWarningRoot: '#f9845b',
    // Strawberry fields
    colorStrawberryFieldsDark: '#dd002f',
    colorStrawberryFieldsDarker: '#c82626',
    colorStrawberryFieldsDarkest: '#a01e1e',
    colorStrawberryFieldsLight: null,
    colorStrawberryFieldsLighter: '#ffbdbf',
    colorStrawberryFieldsLightest: '#ffe5e6',
    colorStrawberryFieldsRoot: '#ff5a5f',
    // Sunny arvo
    colorSunnyArvoDark: '#fcb95b',
    colorSunnyArvoDarker: '#de935d',
    colorSunnyArvoDarkest: '#a76553',
    colorSunnyArvoLight: null,
    colorSunnyArvoLighter: '#feefc5',
    colorSunnyArvoLightest: '#fef9e9',
    colorSunnyArvoRoot: '#fed86f',
    // Tangerine tease
    colorTangerineTeaseDark: '#d43e08',
    colorTangerineTeaseDarker: '#bd4428',
    colorTangerineTeaseDarkest: '#622214',
    colorTangerineTeaseLight: null,
    colorTangerineTeaseLighter: '#fdd9cd',
    colorTangerineTeaseLightest: '#feece6',
    colorTangerineTeaseRoot: '#f9845b',
    // Transparency
    colorTransparent: 'transparent',
    colorWhiteTransparent20: '#FFFFFF20',
    colorWhiteTransparent40: '#FFFFFF40',
    colorWhiteTransparent70: '#FFFFFF70'
});

const boxShadowWidthRoot = '0 0 0 1px';
const boxShadowWidthLarge = '0 0 0 2px';
// More info about 8-Digit Hex Color Code: https://css-tricks.com/8-digit-hex-codes/
const boxShadowColorAlpha10 = '1A'; // 10%
const boxShadowColorAlpha80 = 'CC'; // 80%
const boxShadows = Object.freeze({
    boxShadow: `0 10px 20px 0 ${colors.colorCoreBlack}${boxShadowColorAlpha10}`,
    boxShadowHigh: `0 0 20px 0 ${colors.colorFiftyShadesLighter}`,
    boxShadowBorder: `${boxShadowWidthRoot} ${colors.colorFiftyShadesLighter}`,
    boxShadowBorderFocused: `${boxShadowWidthRoot} ${colors.colorCoreBrand}`,
    boxShadowBorderError: `${boxShadowWidthRoot} ${colors.colorStatusErrorRoot}`,
    boxShadowBorderErrorFocused: `${boxShadowWidthRoot} ${colors.colorStatusErrorDark}`,
    boxShadowBorderWarning: `${boxShadowWidthRoot} ${colors.colorStatusWarningDark}`,
    boxShadowBorderWarningFocused: `${boxShadowWidthRoot} ${colors.colorStatusWarningDarker}`,
    boxShadowBorderInset: `inset ${boxShadowWidthRoot} ${colors.colorFiftyShadesLighter}`,
    boxShadowBorderInsetDisabled: `inset ${boxShadowWidthRoot} ${colors.colorFiftyShadesLightest}`,
    boxShadowBorderInsetFocused: `inset ${boxShadowWidthRoot} ${colors.colorInteractiveLink}`,
    boxShadowBorderInsetSelected: `inset ${boxShadowWidthLarge} ${colors.colorCoreBrand}`,
    boxShadowBorderInsetError: `inset ${boxShadowWidthRoot} ${colors.colorStatusErrorRoot}`,
    boxShadowBorderInsetErrorFocused: `inset ${boxShadowWidthRoot} ${colors.colorStatusErrorDark}`,
    boxShadowBorderInsetWarning: `inset ${boxShadowWidthRoot} ${colors.colorStatusWarningDark}`,
    boxShadowBorderInsetWarningFocused: `inset ${boxShadowWidthRoot} ${colors.colorStatusWarningDarker}`,
    boxShadowBorderInsetLargeCorrect: `inset ${boxShadowWidthLarge} ${colors.colorGreenMonsterDark}`,
    boxShadowBorderInsetLargeError: `inset ${boxShadowWidthLarge} ${colors.colorStatusErrorRoot}`,
    boxShadowBorderInsetLargeWarning: `inset ${boxShadowWidthLarge} ${colors.colorStatusWarningDark}`,
    boxShadowCard: `2px 2px 10px 0 ${colors.colorFiftyShadesLighter}`,
    boxShadowCardHover: `2px 2px 10px 0 ${colors.colorFiftyShadesLight}${boxShadowColorAlpha80}`
});

function createVar() {
    for(var _len = arguments.length, names = new Array(_len), _key = 0; _key < _len; _key++){
        names[_key] = arguments[_key];
    }
    return `--neon-${names.join('-')}`;
}

const components = Object.freeze({
    'WithIcon-size': createVar('WithIcon', 'size')
});

const fontFamilySystem = `system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"`;
const fontFamilies = Object.freeze({
    fontFamilyMonospace: 'monospace',
    fontFamilyRoot: `'sofia-pro', ${fontFamilySystem}`,
    fontFamilySystem
});

var cssUnits = keyMirror__default["default"]({
    em: null,
    rem: null
});

const { rootPixelSizeNeon: __16$1 , rootPixelSizeUserAgent  } = rootPixelSizes;
const fontSizes = Object.freeze({
    fontSizeSmall3X: pxToRem(__16$1 - 6),
    fontSizeSmall2X: pxToRem(__16$1 - 4),
    fontSizeSmall1X: pxToRem(__16$1 - 3),
    fontSizeSmall: pxToRem(__16$1 - 2),
    fontSizeRoot: `${__16$1 / rootPixelSizeUserAgent}${cssUnits.rem}`,
    fontSizeLarge: pxToRem(__16$1 + 2),
    fontSizeLarge1X: pxToRem(__16$1 + 4),
    fontSizeLarge2X: pxToRem(__16$1 + 6),
    fontSizeLarge3X: pxToRem(__16$1 + 8),
    fontSizeLarge4X: pxToRem(__16$1 + 12),
    fontSizeLarge5X: pxToRem(__16$1 + 14),
    fontSizeLarge6X: pxToRem(__16$1 + 20)
});

/**
 * Weights.
 *
 * These weights match our web font: 'Sofia Pro' which is served via Typekit.
 * To see all of the Typekit CSS grab the `typekit` URL in
 * 'src/constants/paths.js' and load it in your browser.
 */ const fontWeights = Object.freeze({
    fontWeightLighter: 200,
    fontWeightLight: 300,
    fontWeightNormal: 400,
    fontWeightMedium: 500,
    // ! don't use this with Sofia Pro!
    fontWeightSemiBold: 600,
    fontWeightBold: 700
});

const letterSpacings = Object.freeze({
    letterSpacingNone: 0,
    letterSpacingSmall1X: pxToRem(0.08),
    letterSpacingSmall: pxToRem(0.22),
    letterSpacingRoot: pxToRem(0.24),
    letterSpacingLarge: pxToRem(0.41),
    letterSpacingLarge1X: pxToRem(0.44),
    letterSpacingLarge2X: pxToRem(1)
});

const lineHeights = Object.freeze({
    lineHeightNone: 0,
    lineHeightSmall3X: 1,
    lineHeightSmall2X: 1.2,
    lineHeightSmall1X: 1.46,
    lineHeightSmall: 1.55,
    lineHeightRoot: 1.625,
    lineHeightLarge: 1.8,
    lineHeightLarge1X: 2
});

const progressCircleSizes = Object.freeze({
    'progressCircleSizeLarge1X-px': 196,
    'progressCircleSizeLarge-px': 144,
    'progressCircleSizeRoot-px': 96,
    'progressCircleSizeSmall-px': 62,
    'progressCircleSizeSmall1X-px': 38
});

const sizingsIcon = Object.freeze({
    sizeIconSmall3X: pxToRem(6),
    sizeIconSmall2X: pxToRem(12),
    sizeIconSmall1X: pxToRem(16),
    sizeIconSmall: pxToRem(18),
    sizeIconRoot: pxToRem(24),
    sizeIconLarge: pxToRem(36),
    sizeIconLarge1X: pxToRem(48),
    sizeIconLarge2X: pxToRem(60),
    sizeIconLarge3X: pxToRem(80),
    sizeIconLarge4X: pxToRem(96)
});

const sizingsModal = Object.freeze({
    sizeModalRoot: pxToRem(635),
    sizeModalSmall: pxToRem(460)
});

// TODO: (PROD-3570) define proper sizings scale and tokens
const sizings = Object.freeze({
    sizeNone: pxToRem(0),
    // the two sizes below are temporary and only used by the docs Placeholder
    // component
    sizeSmall4X: pxToRem(88),
    sizeSmall3X: pxToRem(192),
    sizeSmall2X: pxToRem(424),
    sizeSmall1X: pxToRem(456),
    sizeSmall: pxToRem(600),
    sizeRoot: pxToRem(776),
    sizeLarge: pxToRem(960),
    sizeLarge1X: pxToRem(1146),
    sizeFull: '100%',
    ...sizingsAvatar,
    ...sizingsIcon,
    ...sizingsModal
});

const { rootPixelSizeNeon: __16  } = rootPixelSizes;
const spacing = Object.freeze({
    spacingNone: pxToRem(0),
    spacingSmall4X: pxToRem(1),
    spacingSmall3X: pxToRem(__16 - 14),
    spacingSmall2X: pxToRem(__16 - 12),
    spacingSmall1X: pxToRem(__16 - 8),
    spacingSmall: pxToRem(__16 - 4),
    spacingRoot: pxToRem(__16),
    spacingLarge: pxToRem(__16 + 4),
    spacingLarge1X: pxToRem(__16 + 8),
    spacingLarge2X: pxToRem(__16 + 12),
    spacingLarge3X: pxToRem(__16 + 16),
    spacingLarge4X: pxToRem(__16 + 20),
    spacingLarge5X: pxToRem(__16 + 24),
    spacingLarge6X: pxToRem(__16 + 32),
    spacingLarge7X: pxToRem(__16 + 40),
    spacingLarge8X: pxToRem(__16 + 56),
    spacingLarge9X: pxToRem(__16 + 80),
    // negative spacing tokens
    spacingNegativeSmall4X: pxToRem(-1),
    spacingNegativeSmall3X: pxToRem(-__16 + 14),
    spacingNegativeSmall2X: pxToRem(-__16 + 12),
    spacingNegativeSmall1X: pxToRem(-__16 + 8),
    spacingNegativeSmall: pxToRem(-__16 + 4),
    spacingNegativeRoot: pxToRem(-__16),
    spacingNegativeLarge: pxToRem(-__16 - 4),
    spacingNegativeLarge1X: pxToRem(-__16 - 8),
    spacingNegativeLarge2X: pxToRem(-__16 - 12),
    spacingNegativeLarge3X: pxToRem(-__16 - 16),
    spacingNegativeLarge4X: pxToRem(-__16 - 20),
    spacingNegativeLarge5X: pxToRem(-__16 - 24),
    spacingNegativeLarge6X: pxToRem(-__16 - 32),
    spacingNegativeLarge7X: pxToRem(-__16 - 40),
    spacingNegativeLarge8X: pxToRem(-__16 - 56),
    spacingNegativeLarge9X: pxToRem(-__16 - 80)
});

const transitions = Object.freeze({
    transitionRoot: 'all 100ms linear'
});

const zIndexes = Object.freeze({
    zIndex0: 0,
    zIndex1: 1,
    zIndex2: 2,
    zIndex3: 3,
    zIndex4: 4,
    zIndex5: 5
});

const tokens = Object.freeze({
    ...a11y,
    ...borderRadii,
    ...borderWidths,
    ...boxShadows,
    ...breakpoints,
    ...colors,
    ...components,
    ...fontFamilies,
    ...fontSizes,
    ...fontWeights,
    ...letterSpacings,
    ...lineHeights,
    ...progressCircleSizes,
    ...sizings,
    ...spacing,
    ...transitions,
    ...zIndexes
});

const getButtonPadding = (size)=>{
    switch(size){
        case 'small':
            return 'spacingSmall';
        case 'root':
            return 'spacingSmall';
        case 'large':
            return 'spacingRoot';
        default:
            return undefined;
    }
};
const iconSizeMap = {
    small1X: 'sizeIconSmall2X',
    small: 'sizeIconSmall2X',
    root: 'sizeIconSmall',
    large: 'sizeIconSmall'
};
function IconButton(props) {
    const { assistiveText , name , size ='root' , strokeWidth , verticalAlign ='middle' , testHook , ...otherProps } = props;
    const paddingInline = getButtonPadding(size);
    return jsxRuntime.jsxs(Button, Object.assign({}, otherProps, {
        size: size
    }, paddingInline && {
        paddingInline
    }, {
        testHook: testHook
    }, {
        children: [
            jsxRuntime.jsx(Icon, {
                name: name,
                size: iconSizeMap[size],
                display: "inline-block",
                strokeWidth: strokeWidth,
                testHook: testHook ? `${testHook}-icon` : undefined,
                verticalAlign: verticalAlign
            }, void 0),
            jsxRuntime.jsx(HideVisually, {
                children: assistiveText
            }, void 0)
        ]
    }), void 0);
}

function ButtonAdd(props) {
    const { assistiveText , ...otherProps } = props;
    const isMobile = useMedia({
        maxWidth: tokens.breakpointMedium
    });
    return isMobile ? jsxRuntime.jsx(IconButton, {
        isLoading: otherProps.isLoading,
        name: "plus",
        assistiveText: assistiveText,
        onClick: otherProps.onClick,
        testHook: otherProps.testHook,
        strokeWidth: "2"
    }, void 0) : jsxRuntime.jsx(Button, Object.assign({
        variant: "bordered"
    }, otherProps), void 0);
}
function ButtonAddLoader(props) {
    const isMobile = useMedia({
        maxWidth: tokens.breakpointMedium
    });
    return isMobile ? jsxRuntime.jsx(Skeleton, {
        borderRadius: "borderRadiusRoot",
        size: 40
    }, void 0) : jsxRuntime.jsx(ButtonLoader, Object.assign({}, props), void 0);
}
ButtonAdd.Loader = ButtonAddLoader;

function useKeyDown(onClick) {
    const onKeyDown = react.useCallback((event)=>{
        if (onClick && (event.key === 'Enter' || event.key === ' ')) {
            // unknown: We are asserting because we are knowingly mapping a click
            // event to a keyboard event
            onClick(event);
        }
    }, [
        onClick
    ]);
    return onKeyDown;
}

var styles$F = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","button":"Menu_button__--Gph","withIcon":"Menu_withIcon__Iu1NW","popover":"Menu_popover__-dP6l","menu":"Menu_menu__YZJaB","panelSlideDown":"Menu_panelSlideDown__l-lfa","withPosition":"Menu_withPosition__6Dv5t","menuItem":"Menu_menuItem__Rw-AT"};

const breakpoint$4 = {
    minWidth: breakpoints.breakpointMediumFrom
};
keyMirror__default["default"]({
    vertical: null
});
const optionToProps = (param)=>{
    let { label , ...props } = param;
    return {
        ...props,
        children: label,
        withSeparator: undefined
    };
};
// Access the Reach MenuButton context to only render the MenuPopover when it's
// actually open. This ensures it can be used within a Modal without being
// incorrectly given aria-hidden when the modal opens.
// See https://github.com/reach/reach-ui/issues/870 for more.
function MenuPopover(props) {
    const { isExpanded  } = menuButton.useMenuButtonContext();
    return isExpanded ? jsxRuntime.jsx(menuButton.MenuPopover, Object.assign({}, props), void 0) : null;
}
const MenuButton = /*#__PURE__*/ react.forwardRef(function MenuButton(props, ref) {
    const { isExpanded  } = menuButton.useMenuButtonContext();
    return jsxRuntime.jsx(menuButton.MenuButton, Object.assign({
        ref: ref
    }, props, isExpanded ? {} : {
        'aria-controls': undefined
    }), void 0);
});
function Menu(props) {
    const { ariaLabel , drawerProps , iconName ='menu-more' , trigger , itemVariant =variants$8.narrow , items , popoverPosition , isDisabled , variant , testHook , ...otherProps } = props;
    // Generate a default id for the MenuButton to work around the issue with the
    // reach-ui/dropdown lib: https://github.com/reach/reach-ui/pull/970.
    const autoId = useId('Menu');
    var _id;
    const menuButtonId = (_id = props.id) !== null && _id !== void 0 ? _id : autoId;
    const buttonRef = react.useRef(null);
    const [isDrawerOpen, setIsDrawerOpen] = react.useState(false);
    const matches = useMedia(breakpoint$4);
    const handleClick = react.useCallback((event)=>{
        // don't show the menu list when we need to show the drawer
        if (!matches) {
            event.preventDefault();
            setIsDrawerOpen(true);
        }
    }, [
        matches
    ]);
    const handleKeyDown = useKeyDown(handleClick);
    const drawerOnClose = react.useCallback(()=>{
        var ref, ref1;
        setIsDrawerOpen(false);
        drawerProps === null || drawerProps === void 0 ? void 0 : (ref = drawerProps.onClose) === null || ref === void 0 ? void 0 : ref.call(drawerProps); // eslint-disable-line no-unused-expressions
        (ref1 = buttonRef.current) === null || ref1 === void 0 ? void 0 : ref1.focus(); // eslint-disable-line no-unused-expressions
    }, [
        drawerProps
    ]);
    return jsxRuntime.jsxs(jsxRuntime.Fragment, {
        children: [
            jsxRuntime.jsxs(menuButton.Menu, {
                children: [
                    jsxRuntime.jsx(MenuButton, Object.assign({}, otherProps, {
                        ref: buttonRef,
                        id: menuButtonId,
                        className: cx__default["default"](styles$F.button, {
                            [styles$F.withIcon]: !trigger
                        }),
                        "aria-label": ariaLabel,
                        onKeyDown: handleKeyDown,
                        onMouseDown: handleClick,
                        disabled: isDisabled,
                        "data-test": testHook && `${testHook}-trigger`
                    }, {
                        children: trigger || jsxRuntime.jsx(Icon, {
                            name: variant === 'vertical' ? 'menu-kebab' : iconName
                        }, void 0)
                    }), void 0),
                    jsxRuntime.jsx(MenuPopover, Object.assign({
                        className: cx__default["default"](styles$F.popover, {
                            [styles$F.withPosition]: popoverPosition
                        }),
                        position: popoverPosition,
                        onKeyDown: (event)=>{
                            if (event.key === 'Escape') {
                                // prevent event from bubbling up e.g. when used in a modal
                                event.stopPropagation();
                            }
                        }
                    }, {
                        children: jsxRuntime.jsx(menuButton.MenuItems, Object.assign({
                            className: styles$F.menu
                        }, {
                            children: items.map((param, i // TODO: focus active item on mount
                            )=>{
                                let { onSelect , ...item } = param;
                                return(// https://www.w3.org/TR/wai-aria-practices-1.2/#listbox_kbd_interaction
                                jsxRuntime.jsx(menuButton.MenuItem, Object.assign({
                                    className: styles$F.menuItem,
                                    onSelect: onSelect,
                                    "data-test": testHook && `${testHook}-item-${i}`
                                }, {
                                    children: jsxRuntime.jsx(MenuItem, Object.assign({}, optionToProps(item), {
                                        variant: itemVariant
                                    }), void 0)
                                }), i));
                            })
                        }), void 0)
                    }), void 0)
                ]
            }, void 0),
            jsxRuntime.jsx(Drawer, Object.assign({}, drawerProps, {
                ariaLabel: "Menu drawer",
                isOpen: isDrawerOpen,
                onClose: drawerOnClose,
                testHook: testHook && `${testHook}-drawer`
            }, {
                children: jsxRuntime.jsx(Drawer.Content, {
                    children: items.map((param, i // TODO: focus active item on mount
                    )=>{
                        let { onSelect , ...item } = param;
                        return(// https://www.w3.org/TR/wai-aria-practices-1.2/#listbox_kbd_interaction
                        jsxRuntime.jsx(Drawer.Item, Object.assign({
                            onClick: ()=>{
                                onSelect();
                                setIsDrawerOpen(false);
                            },
                            withSeparator: item.withSeparator != null ? item.withSeparator : true,
                            testHook: testHook && `${testHook}-list-item-${i}`
                        }, {
                            children: jsxRuntime.jsx(MenuItem, Object.assign({}, optionToProps(item), {
                                withActiveIcon: true
                            }), void 0)
                        }), i));
                    })
                }, void 0)
            }), void 0)
        ]
    }, void 0);
}
Menu.Item = MenuItem;
function StatefulMenu(props) {
    const { isDisabled , placeholder , trigger , options , value , onChange , testHook , ...otherProps } = props;
    const placeholderOption = placeholder ? {
        label: placeholder,
        value: null,
        isDisabled: true
    } : null;
    const optionsWithPlaceholder = placeholderOption ? [
        placeholderOption,
        ...options
    ] : options;
    // TODO-TS not sure if `as OptionWithValue` is the correct assertion here.., what is providerOption?
    const providedOption = ___default["default"].find(optionsWithPlaceholder, {
        value
    }) || optionsWithPlaceholder[0];
    // decide between controlled or uncontrolled behaviour
    const [internalState, setCurrent] = react.useState(providedOption);
    const current = typeof value === 'undefined' ? internalState : providedOption;
    const currentItem = jsxRuntime.jsx(MenuItem, Object.assign({}, optionToProps(current)), void 0);
    return jsxRuntime.jsx(Menu, Object.assign({}, otherProps, {
        trigger: trigger ? /*#__PURE__*/ react.cloneElement(trigger, {
            isDisabled
        }, currentItem) : currentItem,
        items: optionsWithPlaceholder.map((option)=>({
                ...option,
                isActive: option.value === current.value,
                onSelect () {
                    setCurrent(option);
                    onChange(option.value);
                }
            })
        ),
        isDisabled: isDisabled,
        testHook: testHook
    }), void 0);
}

const breakpoint$3 = {
    maxWidth: breakpoints.breakpointMedium
};
function Loader$2() {
    const isMobile = useMedia(breakpoint$3);
    const item = jsxRuntime.jsx(Box, Object.assign({
        as: "li",
        flexShrink: 0
    }, {
        children: jsxRuntime.jsx(ButtonLoader, {
            size: "small1X"
        }, void 0)
    }), void 0);
    return jsxRuntime.jsxs(Flex, Object.assign({
        as: "ul",
        display: "inline-flex",
        gap: "spacingSmall1X",
        justifyContent: "center",
        wrap: true
    }, {
        children: [
            item,
            item,
            !isMobile && item,
            !isMobile && item
        ]
    }), void 0);
}
function ButtonGroup(props) {
    const { collapse , children , testHook  } = props;
    const isMobile = useMedia(breakpoint$3);
    const buttons = flattenChildren__default["default"](children);
    // eslint-disable-next-line no-nested-ternary
    const collapseAfter = collapse ? isMobile ? 1 : collapse.after : buttons.length;
    return jsxRuntime.jsxs(Flex, Object.assign({
        as: "ul",
        display: "inline-flex",
        gap: "spacingSmall1X",
        justifyContent: "center",
        wrap: true,
        testHook: testHook
    }, {
        children: [
            ___default["default"].take(buttons, collapseAfter).map((button, i)=>jsxRuntime.jsx(Box, Object.assign({
                    as: "li",
                    flexShrink: 0
                }, {
                    children: button
                }), i)
            ),
            collapse && collapseAfter < buttons.length && jsxRuntime.jsx(Box, Object.assign({
                as: "li",
                flexShrink: 0
            }, {
                children: jsxRuntime.jsx(Menu, {
                    ariaLabel: collapse.label,
                    drawerProps: collapse.drawerProps,
                    trigger: jsxRuntime.jsx(Button, Object.assign({
                        as: "span",
                        variant: collapse.variant,
                        iconBefore: jsxRuntime.jsx(Icon, {
                            name: "menu-more",
                            size: "sizeIconSmall1X"
                        }, void 0)
                    }, {
                        children: collapse.label
                    }), void 0),
                    items: ___default["default"].slice(buttons, collapseAfter).map((param)=>{
                        let { props: buttonProps  } = param;
                        var ref;
                        return {
                            label: buttonProps.children,
                            iconName: (ref = buttonProps.iconBefore) === null || ref === void 0 ? void 0 : ref.props.name,
                            onSelect: buttonProps.onClick,
                            withSeparator: false,
                            isDanger: buttonProps.variant === 'error'
                        };
                    }),
                    testHook: testHook && `${testHook}-collapse`
                }, void 0)
            }), "collapse")
        ]
    }), void 0);
}ButtonGroup.Loader = Loader$2;

const variants$6 = {
    bordered: 'bordered',
    rounded: 'rounded',
    elevated: 'elevated'
};
const defaultStyles$5 = {
    backgroundColor: 'colorCoreWhite',
    display: 'block',
    transition: 'transitionRoot'
};
const borderedStyles = {
    ...defaultStyles$5,
    borderWidth: 'borderWidthRoot',
    borderStyle: 'solid',
    borderColor: 'colorFiftyShadesLighter'
};
const roundedStyles = {
    ...defaultStyles$5,
    ...borderedStyles,
    borderRadius: 'borderRadiusRoot'
};
const elevatedStyles = {
    ...defaultStyles$5,
    borderRadius: 'borderRadiusRoot',
    boxShadow: 'boxShadowCard'
};
const hoverAndFocusStyles = {
    boxShadow: 'boxShadowCardHover',
    // relative positioning and zIndex are needed to have stacked cards' shadows show above their siblings
    position: 'relative',
    zIndex: 'zIndex1'
};
const variantStyles = {
    [variants$6.bordered]: borderedStyles,
    [variants$6.rounded]: roundedStyles,
    [variants$6.elevated]: elevatedStyles
};
function Card$1(props) {
    const { as ='div' , withHover =true , variant =variants$6.bordered , children , ...otherProps } = props;
    const { hoverProps , isHovered  } = interactions.useHover({
        isDisabled: !withHover
    });
    return jsxRuntime.jsx(Box, Object.assign({}, otherProps, {
        as: as
    }, variantStyles[variant], hoverProps, isHovered && hoverAndFocusStyles, {
        _focusWithin: withHover ? hoverAndFocusStyles : undefined
    }, {
        children: children
    }), void 0);
}

const defaultStyles$4 = {
    borderWidth: 'borderWidthRoot',
    borderStyle: 'solid',
    borderColor: 'colorFiftyShadesLighter',
    borderRadius: 'borderRadiusLarge',
    color: 'colorFiftyShadesDarker',
    display: 'inline-block',
    fontFamily: 'fontFamilySystem',
    fontSize: 'fontSizeSmall3X',
    fontWeight: 'fontWeightBold',
    letterSpacing: 'letterSpacingLarge1X',
    lineHeight: 'lineHeightRoot',
    paddingInline: 'spacingSmall1X',
    textAlign: 'center',
    textTransform: 'uppercase'
};
const chunckyStyles = {
    ...defaultStyles$4,
    borderWidth: 'borderWidthLarge',
    fontWeight: 'fontWeightBold'
};
const dashedStyles = {
    ...defaultStyles$4,
    borderStyle: 'dashed'
};
const filledStyles = {
    ...defaultStyles$4,
    color: 'colorFiftyShadesDarkest'
};
const variantStylesMapping$3 = {
    chunky: chunckyStyles,
    dashed: dashedStyles,
    filled: filledStyles
};
function Tag(props) {
    const { children , color , fillColor ='colorCoreWhite' , tooltip , variant  } = props;
    const tag = jsxRuntime.jsx(Box, Object.assign({
        as: "span"
    }, variant ? variantStylesMapping$3[variant] : defaultStyles$4, variant === 'filled' && {
        borderColor: fillColor
    }, color && {
        color
    }, {
        backgroundColor: fillColor,
        tabIndex: tooltip ? 0 : undefined
    }, {
        children: children
    }), void 0);
    return tooltip ? jsxRuntime.jsx(Tooltip, Object.assign({
        content: tooltip,
        theme: "light-border"
    }, {
        children: tag
    }), void 0) : tag;
}

var styles$E = {"cardListItem":"CardList_cardListItem__DeB8L","card":"CardList_card__lcO2Y","isCta":"CardList_isCta__TUF8Z","avatar":"CardList_avatar__-q0St","details":"CardList_details__sG5Fp","text":"CardList_text__QWyN-","tag":"CardList_tag__nHyGb","icon":"CardList_icon__lcvWc","spinner":"CardList_spinner__2mQti"};

function Card(props) {
    const { as: Component = containerElements.div , avatar , ctaProps , description , isLoading , tags , title , ...rest } = props;
    const hasTags = tags && tags.length > 0;
    const isCta = rest.href || rest.to || rest.onClick;
    return jsxRuntime.jsxs(Component, Object.assign({}, rest, {
        "data-test": rest.testHook,
        className: cx__default["default"](styles$E.card, {
            [styles$E.isCta]: isCta
        })
    }, {
        children: [
            avatar && jsxRuntime.jsx("div", Object.assign({
                className: styles$E.avatar
            }, {
                children: avatar
            }), void 0),
            jsxRuntime.jsxs("div", Object.assign({
                className: styles$E.details
            }, {
                children: [
                    jsxRuntime.jsxs("div", Object.assign({
                        className: styles$E.text
                    }, {
                        children: [
                            jsxRuntime.jsx(Text, {
                                children: title
                            }, void 0),
                            jsxRuntime.jsx(Text, Object.assign({
                                fontSize: "fontSizeSmall1X",
                                color: "colorFiftyShadesDark"
                            }, {
                                children: description
                            }), void 0)
                        ]
                    }), void 0),
                    hasTags && jsxRuntime.jsx(VerticalSpacing, Object.assign({
                        size: "small2X",
                        isUpwards: true
                    }, {
                        children: jsxRuntime.jsx("ul", {
                            children: tags && hasTags && tags.map((tag, i)=>jsxRuntime.jsx("li", Object.assign({
                                    className: styles$E.tag
                                }, {
                                    children: jsxRuntime.jsx(Tag, Object.assign({}, tag), void 0)
                                }), i)
                            )
                        }, void 0)
                    }), void 0),
                    ctaProps && jsxRuntime.jsx(VerticalSpacing, Object.assign({
                        isUpwards: true
                    }, {
                        children: jsxRuntime.jsx(Button, Object.assign({}, ctaProps), void 0)
                    }), void 0)
                ]
            }), void 0),
            isCta && !isLoading && jsxRuntime.jsx(Icon, {
                name: "arrow-front",
                className: styles$E.icon
            }, void 0),
            isLoading && jsxRuntime.jsx("span", Object.assign({
                className: styles$E.spinner
            }, {
                children: jsxRuntime.jsx(Spinner, {
                    size: "small"
                }, void 0)
            }), void 0)
        ]
    }), void 0);
}
function CardList(props) {
    const { children , testHook , containerProps ={}  } = props;
    return jsxRuntime.jsx(Container, Object.assign({
        maxWidth: "sizeSmall"
    }, containerProps, {
        children: jsxRuntime.jsx("ul", Object.assign({
            "data-test": testHook
        }, {
            children: react.Children.map(children, (child, i)=>jsxRuntime.jsx("li", Object.assign({
                    className: styles$E.cardListItem
                }, {
                    children: child
                }), i)
            )
        }), void 0)
    }), void 0);
}
CardList.Card = Card;

var styles$D = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","root":"Checkbox_root__cUooE","isDisabled":"Checkbox_isDisabled__X2TPL","checkbox":"Checkbox_checkbox__8-2Sj","icon":"Checkbox_icon__MqMcy","small":"Checkbox_small__yKQ8E","ghost":"Checkbox_ghost__j-mYg","isChecked":"Checkbox_isChecked__c3kbT","panelSlideDown":"Checkbox_panelSlideDown__tZ2Rn"};

const variants$5 = keyMirror__default["default"]({
    ghost: null
});
const variantMapping = {
    [variants$5.ghost]: variants$9.ghost
};
const Checkbox = /*#__PURE__*/ react.forwardRef(function Checkbox(props, ref) {
    const { checked , isDisabled , label , onChange , size , testHook , variant , ...otherProps } = props;
    const id = useId('Checkbox');
    return jsxRuntime.jsxs("div", Object.assign({
        className: cx__default["default"](styles$D.root, {
            [String(size && styles$D[size])]: size,
            [String(variant && styles$D[variant])]: variant,
            [styles$D.isChecked]: checked,
            [styles$D.isDisabled]: isDisabled
        }),
        "data-test": testHook
    }, {
        children: [
            jsxRuntime.jsxs(checkbox.CustomCheckboxContainer, Object.assign({
                className: styles$D.checkbox,
                checked: checked,
                disabled: isDisabled,
                onChange: (event)=>onChange(event.target.checked)
            }, {
                children: [
                    jsxRuntime.jsx(checkbox.CustomCheckboxInput, Object.assign({}, otherProps, {
                        ref: ref,
                        id: id,
                        "data-test": testHook && `${testHook}-input`
                    }), void 0),
                    checked && jsxRuntime.jsx(Icon, {
                        className: styles$D.icon,
                        name: checked === true ? 'check' : 'minus',
                        size: !size ? 'sizeIconSmall2X' : undefined
                    }, void 0)
                ]
            }), void 0),
            label && jsxRuntime.jsx(Label, Object.assign({
                htmlFor: id,
                variant: variant && variantMapping[variant],
                testHook: testHook && `${testHook}-label`,
                marginBottom: "spacingNone"
            }, {
                children: label
            }), void 0)
        ]
    }), void 0);
});

const sizeToSpacing = Object.freeze({
    [sizes$2.none]: spacing.spacingNone,
    [sizes$2.large]: spacing.spacingLarge,
    [sizes$2.large1X]: spacing.spacingLarge1X,
    [sizes$2.large2X]: spacing.spacingLarge2X,
    [sizes$2.large3X]: spacing.spacingLarge3X,
    [sizes$2.large4X]: spacing.spacingLarge4X,
    [sizes$2.large5X]: spacing.spacingLarge5X,
    [sizes$2.large6X]: spacing.spacingLarge6X,
    [sizes$2.large7X]: spacing.spacingLarge7X,
    [sizes$2.large8X]: spacing.spacingLarge8X,
    [sizes$2.large9X]: spacing.spacingLarge9X,
    [sizes$2.root]: spacing.spacingRoot,
    [sizes$2.small]: spacing.spacingSmall,
    [sizes$2.small1X]: spacing.spacingSmall1X,
    [sizes$2.small2X]: spacing.spacingSmall2X
});
function getSpacing(size) {
    return sizeToSpacing[size];
}

var styles$C = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","--alignY":"--neon-Grid-alignY","--spacing":"--neon-Grid-spacing","--template":"--neon-Grid-template","--templateTablet":"--neon-Grid-templateTablet","--templateDesktop":"--neon-Grid-templateDesktop","root":"Grid_root__MthaQ","tablet":"Grid_tablet__YIDko","desktop":"Grid_desktop__Q7cyI","column":"Grid_column__ix4vl","hideOnMobile":"Grid_hideOnMobile__UhU5H","hideOnTablet":"Grid_hideOnTablet__-q-cg","hideOnDesktop":"Grid_hideOnDesktop__ZSyFX","collapseBelowTablet":"Grid_collapseBelowTablet__QO3-j","collapseBelowDesktop":"Grid_collapseBelowDesktop__sF8Er","panelSlideDown":"Grid_panelSlideDown__vIUk3"};

const alignYRules = {
    content: 'baseline',
    bottom: 'end',
    center: 'center'
};
const collapseBelowRules = keyMirror__default["default"]({
    desktop: null,
    tablet: null
});
function Column(props) {
    const { children , width  } = props;
    let classNames;
    if (Array.isArray(width) && width.includes('none')) {
        const [mobile, tablet, desktop] = width;
        classNames = cx__default["default"]({
            [styles$C.hideOnMobile]: mobile === 'none',
            [styles$C.hideOnTablet]: tablet === 'none',
            [styles$C.hideOnDesktop]: desktop === 'none'
        });
    }
    return jsxRuntime.jsx(Box, Object.assign({
        className: cx__default["default"](styles$C.column, classNames)
    }, {
        children: children
    }), void 0);
}
/**
 * Creates `grid-template-columns` values for all the columns for different breakpoints
 * e.g. a first column with ['none', '1', '1'] and second column width ['1', '1, '2']
 * would return [['1fr'], ['1fr 1fr'], ['1fr 2fr']] ('none' values are excluded as hidden)
 */ const getGridTemplateColumns = (children)=>{
    const allColumnsWidths = flattenChildren__default["default"](children).map((column)=>{
        const { width  } = column.props;
        return Array.isArray(width) ? width : [
            width
        ];
    });
    return ___default["default"].zipWith(...allColumnsWidths, function() {
        for(var _len = arguments.length, widths = new Array(_len), _key = 0; _key < _len; _key++){
            widths[_key] = arguments[_key];
        }
        return widths.map((width)=>{
            if (width === 'none') {
                return;
            }
            if (width === 'content') {
                return 'auto';
            }
            const fractionalWidth = parseInt(width, 10);
            return fractionalWidth ? `${fractionalWidth}fr` : '1fr';
        }).join(' ');
    });
};
function Grid(props) {
    const { alignY , collapseBelow , height , spacing =sizes$2.root , children  } = props;
    const [defaultTemplate, tabletTemplate, desktopTemplate] = getGridTemplateColumns(children);
    return jsxRuntime.jsx(Box, Object.assign({
        className: cx__default["default"](styles$C.root, {
            [styles$C.tablet]: !!tabletTemplate,
            [styles$C.desktop]: !!desktopTemplate,
            [styles$C.collapseBelowDesktop]: collapseBelow === collapseBelowRules.desktop,
            [styles$C.collapseBelowTablet]: collapseBelow === collapseBelowRules.tablet
        }),
        height: height,
        vars: {
            ...alignY && {
                [styles$C['--alignY']]: alignYRules[alignY]
            },
            [styles$C['--spacing']]: getSpacing(spacing),
            [styles$C['--template']]: defaultTemplate,
            ...tabletTemplate && {
                [styles$C['--templateTablet']]: tabletTemplate
            },
            ...desktopTemplate && {
                [styles$C['--templateDesktop']]: desktopTemplate
            }
        }
    }, {
        children: children
    }), void 0);
}

var styles$B = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","--color":"--neon-CompletionCount-color","root":"CompletionCount_root__lQuOB","iconWithCircle":"CompletionCount_iconWithCircle__UUQGK","label":"CompletionCount_label__Lx3zq","labelValue":"CompletionCount_labelValue__MVbam","labelText":"CompletionCount_labelText__nmccu","panelSlideDown":"CompletionCount_panelSlideDown__ah2Pd"};

function IconWithCircle(props) {
    const { color  } = props;
    return jsxRuntime.jsx("span", Object.assign({
        className: styles$B.iconWithCircle,
        style: {
            [styles$B['--color']]: color
        }
    }, {
        children: jsxRuntime.jsx(Icon, {
            name: "check",
            size: "sizeIconSmall3X",
            display: "inline-flex"
        }, void 0)
    }), void 0);
}
function CompletionCount(props) {
    const { assistiveText , color , max , onClick , testHook , label , value  } = props;
    const labelId = useId('CompletionCount');
    const onKeyDown = useKeyDown(onClick);
    // this component is consumed inside an anchor in Carbon so it is rendered
    // as a div instead of a button
    return jsxRuntime.jsxs("div", Object.assign({
        className: styles$B.root,
        onClick: onClick,
        onKeyDown: onKeyDown,
        "data-test": testHook,
        role: "button",
        tabIndex: 0
    }, {
        children: [
            jsxRuntime.jsxs(Flex, Object.assign({
                gap: "spacingSmall1X"
            }, {
                children: [
                    jsxRuntime.jsx(IconWithCircle, {
                        color: color
                    }, void 0),
                    jsxRuntime.jsxs("span", Object.assign({
                        className: styles$B.label,
                        id: labelId
                    }, {
                        children: [
                            jsxRuntime.jsx("span", Object.assign({
                                "aria-hidden": true,
                                className: styles$B.labelValue
                            }, {
                                children: value
                            }), void 0),
                            jsxRuntime.jsx("span", Object.assign({
                                className: styles$B.labelText
                            }, {
                                children: label
                            }), void 0)
                        ]
                    }), void 0)
                ]
            }), void 0),
            jsxRuntime.jsx(HideVisually, {
                children: jsxRuntime.jsx("progress", Object.assign({
                    "aria-labelledby": labelId,
                    max: max,
                    value: value
                }, {
                    children: assistiveText
                }), void 0)
            }, void 0)
        ]
    }), void 0);
}
CompletionCount.Icon = IconWithCircle;

var styles$A = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","isFocused":"DatePicker_isFocused__na3oY","panelSlideDown":"DatePicker_panelSlideDown__EB4Kj"};

const DATE_FORMATS = {
    default: 'ddd D MMM',
    today: '[Today]',
    tomorrow: '[Tomorrow]',
    withYear: 'ddd D MMM YYYY'
};
function getDateFormat(date, dateFormats) {
    const now = moment__default["default"]();
    if (date.isSame(now, 'day')) return dateFormats.today;
    if (date.isSame(moment__default["default"]().add(1, 'day'), 'day')) return dateFormats.tomorrow;
    if (date.isSame(now, 'year')) return dateFormats.default;
    return dateFormats.withYear;
}
function DatePicker(props) {
    const { dateFormats =DATE_FORMATS , label , value =moment__default["default"]() , onChange , testHook  } = props;
    const isMobile = useMedia({
        maxWidth: tokens.breakpointMedium
    });
    const [date1, setDate] = react.useState(value);
    const [isFocused, setIsFocused] = react.useState(false);
    var ref;
    const inputId = (ref = useId('DatePicker')) !== null && ref !== void 0 ? ref : '';
    const onDateChange = react.useCallback((newDate)=>{
        if (!newDate) return;
        setDate(newDate);
        onChange(newDate);
    }, [
        onChange
    ]);
    return jsxRuntime.jsxs(Box, Object.assign({
        as: "span",
        className: isFocused ? styles$A.isFocused : undefined,
        testHook: testHook
    }, {
        children: [
            jsxRuntime.jsx(Label, Object.assign({
                htmlFor: inputId
            }, {
                children: label
            }), void 0),
            jsxRuntime.jsx(reactDates.SingleDatePicker, {
                id: inputId,
                ariaLabel: undefined,
                date: date1,
                readOnly: true,
                keepFocusOnInput: true,
                displayFormat: getDateFormat(date1, dateFormats),
                dayAriaLabelFormat: DATE_FORMATS.withYear,
                // @ts-ignore type mismatch between react-dates and the latest version of moment
                onDateChange: onDateChange,
                focused: isFocused,
                onFocusChange: (param)=>{
                    let { focused  } = param;
                    return setIsFocused(focused);
                },
                block: true,
                noBorder: true,
                verticalSpacing: 0,
                numberOfMonths: 1,
                transitionDuration: 0,
                customInputIcon: jsxRuntime.jsx(Icon, {
                    name: "calendar",
                    size: "sizeIconSmall1X"
                }, void 0),
                inputIconPosition: "after",
                withPortal: isMobile,
                phrases: {
                    ...defaultPhrases.SingleDatePickerPhrases,
                    // @ts-ignore focusStartDate is correct but missing from the lib types declarations
                    focusStartDate: 'Select a date',
                    chooseAvailableDate: (param)=>{
                        let { date  } = param;
                        return date;
                    }
                }
            }, void 0)
        ]
    }), void 0);
}DatePicker.DATE_FORMATS = DATE_FORMATS;

var styles$z = {"root":"DateTime_root__W4znc","isOverdue":"DateTime_isOverdue__0F1-B","noWrap":"DateTime_noWrap__ZA6ZR","small":"DateTime_small__V0eoF DateTime_noWrap__ZA6ZR"};

const dateFormat = 'ddd D MMM';
// https://momentjs.com/docs/#/displaying/calendar-time/
const calendarFormat = {
    sameDay: '[Today]',
    nextDay: '[Tomorrow]',
    lastDay: '[Yesterday]',
    nextWeek: dateFormat,
    lastWeek: dateFormat,
    sameElse: dateFormat
};
const timeFormat = '[at] h a';
keyMirror__default["default"]({
    noWrap: null
});
function DateTime(props) {
    const { prefix , value , size , variant , withStatus =true , testHook  } = props;
    const date = moment__default["default"](value);
    const dateString = date.calendar(null, calendarFormat);
    const timeString = date.format(timeFormat);
    return jsxRuntime.jsxs(Box, Object.assign({
        as: "time",
        className: cx__default["default"](styles$z.root, {
            [String(size && styles$z[size])]: size === dateTimeSizes.small,
            [String(variant && styles$z[variant])]: variant,
            [styles$z.isOverdue]: withStatus && date.isBefore()
        }),
        dateTime: date.format(),
        testHook: testHook
    }, {
        children: [
            prefix,
            jsxRuntime.jsx("span", {
                children: dateString
            }, void 0),
            " ",
            jsxRuntime.jsx("span", {
                children: timeString
            }, void 0)
        ]
    }), void 0);
}

var styles$y = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","root":"SelectTrigger_root__eo2fZ","isDisabled":"SelectTrigger_isDisabled__kKlK-","icon":"SelectTrigger_icon__Vx8cU","borderless":"SelectTrigger_borderless__Pp28l","filter":"SelectTrigger_filter__Wz9Bx","panelSlideDown":"SelectTrigger_panelSlideDown__RFb4i"};

const variants$4 = keyMirror__default["default"]({
    borderless: null,
    filter: null
});
function SelectTrigger(props) {
    const { children , iconName , isDisabled , testHook , variant  } = props;
    if (!children) return null;
    return jsxRuntime.jsxs(Box, Object.assign({
        className: cx__default["default"](styles$y.root, {
            [styles$y.isDisabled]: isDisabled,
            [String(variant && styles$y[variant])]: variant
        }),
        testHook: testHook
    }, {
        children: [
            iconName && jsxRuntime.jsx(Icon, {
                size: "sizeIconSmall1X",
                name: iconName,
                className: styles$y.icon
            }, void 0),
            variant === variants$4.filter ? children : jsxRuntime.jsx(Truncate, Object.assign({
                flexGrow: 1,
                textAlign: "left",
                testHook: testHook && `${testHook}-label`
            }, {
                children: children
            }), void 0)
        ]
    }), void 0);
}
function SelectTriggerLoader(props) {
    const { variant  } = props;
    const isFilter = variant === variants$4.filter;
    return jsxRuntime.jsx(Skeleton, {
        borderRadius: isFilter ? 'borderRadiusLarge1X' : 'borderRadiusSmall',
        height: isFilter ? 34 : 45,
        width: 115
    }, void 0);
}
SelectTrigger.Loader = SelectTriggerLoader;

// TODO: Consolidate our Select components and triggers:
// https://hschub.atlassian.net/browse/PROD-3396
function SelectField(props) {
    const { helpText , isDisabled , isRequired , label , onChange , options , secondaryLabel , testHook , value , validationText , errorVariant , ...otherProps } = props;
    const { classnames , containerClassnames , fieldAttributes , fieldLabel , fieldHelpText  } = useFormField({
        label,
        helpText,
        isRequired,
        secondaryLabel,
        testHook,
        validationText,
        errorVariant
    });
    return jsxRuntime.jsxs(Box, Object.assign({
        className: classnames,
        testHook: testHook
    }, {
        children: [
            fieldLabel,
            jsxRuntime.jsx(Box, Object.assign({
                className: containerClassnames
            }, {
                children: jsxRuntime.jsx(StatefulMenu, Object.assign({}, otherProps, fieldAttributes, {
                    isDisabled: isDisabled,
                    itemVariant: "large",
                    trigger: jsxRuntime.jsx(SelectTrigger, {
                        variant: "borderless"
                    }, void 0),
                    options: options,
                    onChange: onChange,
                    value: value,
                    testHook: testHook && `${testHook}-menu`,
                    popoverPosition: popoverPosition()
                }), void 0)
            }), void 0),
            fieldHelpText
        ]
    }), void 0);
}

const labelFormat = 'h a';
function get12hClock(inputFormat, range) {
    const min = range && moment__default["default"](range.min, inputFormat);
    const max = range && moment__default["default"](range.max, inputFormat);
    const current = moment__default["default"]().set({
        minute: 0,
        second: 0,
        millisecond: 0
    });
    return ___default["default"].range(0, 24).reduce((acc, hour)=>{
        current.set({
            hour
        });
        if (!range || min && max && current.isBetween(min, max, 'minute', '[]')) {
            return acc.concat({
                label: current.format(labelFormat),
                value: current.format(inputFormat)
            });
        }
        return acc;
    }, []);
}
function TimePicker(props) {
    const { inputFormat , range , ...selectProps } = props;
    return jsxRuntime.jsx(SelectField, Object.assign({}, selectProps, {
        options: get12hClock(inputFormat, range)
    }), void 0);
}

const timeInputFormat = 'H:mm';
function useDateTimePicker(props) {
    const { datePickerWrapper =jsxRuntime.jsx(jsxRuntime.Fragment, {}, void 0) , datePickerProps , timePickerWrapper =jsxRuntime.jsx(jsxRuntime.Fragment, {}, void 0) , timePickerProps , value , onChange , testHook ,  } = props;
    const [dateAndTime, setDateAndTime] = react.useState(()=>value.clone().startOf('hour')
    );
    const onDateChange = (date)=>{
        const newDate = dateAndTime.clone().set({
            date: date.get('date'),
            month: date.get('month'),
            year: date.get('year')
        });
        setDateAndTime(newDate);
        onChange(newDate);
    };
    const onTimeChange = (timeString)=>{
        const time = moment__default["default"](timeString, timeInputFormat);
        const newDate = dateAndTime.clone().set({
            hour: time.get('hour'),
            minute: time.get('minute')
        });
        setDateAndTime(newDate);
        onChange(newDate);
    };
    return {
        datePicker: /*#__PURE__*/ react.cloneElement(datePickerWrapper, {}, jsxRuntime.jsx(DatePicker, Object.assign({}, datePickerProps, {
            value: dateAndTime,
            onChange: onDateChange,
            testHook: testHook && `${testHook}-date`
        }), void 0)),
        timePicker: /*#__PURE__*/ react.cloneElement(timePickerWrapper, {}, jsxRuntime.jsx(TimePicker, Object.assign({}, timePickerProps, {
            inputFormat: timeInputFormat,
            value: dateAndTime.format(timeInputFormat),
            onChange: onTimeChange,
            testHook: testHook && `${testHook}-time`
        }), void 0))
    };
}function DateTimePicker(props) {
    const { datePicker , timePicker  } = useDateTimePicker(props);
    return jsxRuntime.jsxs(jsxRuntime.Fragment, {
        children: [
            datePicker,
            timePicker
        ]
    }, void 0);
}

var styles$x = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","--breakpoint":"min-width: 48.063em","fullscreen":"Dialog_fullscreen__QeKBy","header":"Dialog_header__FO0qa","heading":"Dialog_heading__DMPZL","lineSeparator":"Dialog_lineSeparator__chpLw","content":"Dialog_content__sYtFy","panelSlideDown":"Dialog_panelSlideDown__aswgC"};

keyMirror__default["default"]({
    fullscreen: null
});
function Dialog$1(props) {
    const { appElement , children , closeText , containerSize ='sizeRoot' , heading , headingContent , isContainerGutterless , isContainerGutterlessOnMobile , isOpen , onClose , subheading , variant , withSeparator =true ,  } = props;
    /* The headingId is used for a11y so that the modal heading is read when
    opening the modal. It doesn't need to be unique since there will always be
    only one modal opened at a time. */ const headingId = 'dialog-heading';
    // eslint-disable-next-line no-nested-ternary
    const containerPaddingInline = isContainerGutterless ? 'spacingNone' : isContainerGutterlessOnMobile ? {
        base: 'spacingNone',
        tablet: 'spacingRoot',
        desktop: 'spacingLarge3X'
    } : undefined;
    return jsxRuntime.jsxs(DialogBase, Object.assign({
        className: variant && styles$x[variant],
        appElement: appElement,
        headingId: headingId,
        isOpen: isOpen,
        onClose: onClose
    }, {
        children: [
            jsxRuntime.jsxs("header", Object.assign({
                className: styles$x.header
            }, {
                children: [
                    jsxRuntime.jsx(Container, Object.assign({
                        maxWidth: "sizeFull",
                        textAlign: "right"
                    }, {
                        children: jsxRuntime.jsx(CloseButton$1, {
                            label: closeText,
                            onClick: onClose
                        }, void 0)
                    }), void 0),
                    heading && jsxRuntime.jsxs(Container, Object.assign({
                        maxWidth: containerSize
                    }, {
                        children: [
                            jsxRuntime.jsxs("div", Object.assign({
                                className: styles$x.heading
                            }, {
                                children: [
                                    jsxRuntime.jsxs(Stack, Object.assign({
                                        spacing: "spacingSmall1X"
                                    }, {
                                        children: [
                                            jsxRuntime.jsx(Media, {
                                                element: jsxRuntime.jsx(Heading, Object.assign({
                                                    id: headingId,
                                                    size: "large"
                                                }, {
                                                    children: heading
                                                }), void 0),
                                                queries: {
                                                    [styles$x['--breakpoint']]: {
                                                        size: 'large1X'
                                                    }
                                                }
                                            }, void 0),
                                            subheading && jsxRuntime.jsx(Text, Object.assign({
                                                as: "p",
                                                variant: "lead"
                                            }, {
                                                children: subheading
                                            }), void 0)
                                        ]
                                    }), void 0),
                                    headingContent && jsxRuntime.jsx(VerticalSpacing, Object.assign({
                                        size: "large2X",
                                        isUpwards: true
                                    }, {
                                        children: headingContent
                                    }), void 0)
                                ]
                            }), void 0),
                            withSeparator && jsxRuntime.jsx("div", {
                                className: styles$x.lineSeparator
                            }, void 0)
                        ]
                    }), void 0)
                ]
            }), void 0),
            jsxRuntime.jsx(Container, Object.assign({
                paddingInline: containerPaddingInline,
                maxWidth: containerSize
            }, {
                children: jsxRuntime.jsx("div", Object.assign({
                    className: styles$x.content
                }, {
                    children: children
                }), void 0)
            }), void 0)
        ]
    }), void 0);
}

function isAbove(value, threshold) {
    return Math.round(value * 100) >= threshold * 100;
}
function toPercent(value) {
    let precision = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    const factor = 10 ** precision;
    return `${Math.round(value * 100 * factor) / factor}%`;
}

var styles$w = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","icon":"Diff_icon__t2oDM","isUp":"Diff_isUp__aNLpU","isDown":"Diff_isDown__NDBFP","text":"Diff_text__O6v5o","small":"Diff_small__lMZrI","filled":"Diff_filled__8qZMg","panelSlideDown":"Diff_panelSlideDown__GqIpD"};

keyMirror__default["default"]({
    filled: null
});
function Diff(props) {
    const { innerRef , value , threshold =0 , size , tooltip , variant , testHook  } = props;
    const needsAssistiveText = !isAbove(value, 0) || undefined;
    const isUp = isAbove(value, threshold);
    const diff = jsxRuntime.jsxs("span", Object.assign({
        ref: innerRef,
        className: cx__default["default"]({
            [String(size && styles$w[size])]: size,
            [String(variant && styles$w[variant])]: variant,
            [styles$w.isUp]: isUp,
            [styles$w.isDown]: !isUp
        })
    }, {
        children: [
            jsxRuntime.jsx(Icon, {
                className: styles$w.icon,
                display: "inline-block",
                name: isUp ? 'arrow-up' : 'arrow-down',
                size: "sizeIconSmall2X"
            }, void 0),
            needsAssistiveText && jsxRuntime.jsx(HideVisually, {
                children: toPercent(value)
            }, void 0),
            jsxRuntime.jsx("span", Object.assign({
                "aria-hidden": needsAssistiveText,
                className: styles$w.text,
                "data-test": testHook
            }, {
                children: toPercent(Math.abs(value))
            }), void 0)
        ]
    }), void 0);
    return tooltip ? jsxRuntime.jsx(Tooltip, Object.assign({
        content: tooltip,
        theme: "light-border"
    }, {
        children: diff
    }), void 0) : diff;
}const DiffWithRef = /*#__PURE__*/ react.forwardRef(function DiffWithRef(props, ref) {
    return jsxRuntime.jsx(Diff, Object.assign({
        innerRef: ref
    }, props), void 0);
});

var styles$v = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","root":"Divider_root__Qj9jN","panelSlideDown":"Divider_panelSlideDown__voXbi"};

function Divider(props) {
    const { testHook  } = props;
    return jsxRuntime.jsx(Box, {
        className: styles$v.root,
        testHook: testHook
    }, void 0);
}

var styles$u = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","--breakpoint":"min-width: 48.063em","root":"DraggableAnswer_root__VOQv4","container":"DraggableAnswer_container__mMqpX","icon":"DraggableAnswer_icon__vNO8o","info":"DraggableAnswer_info__3wGVu","correct":"DraggableAnswer_correct__12syu","incorrect":"DraggableAnswer_incorrect__GRL8d","warning":"DraggableAnswer_warning__A2jCk","isDragged":"DraggableAnswer_isDragged__4-JzK","dropped":"DraggableAnswer_dropped__9NmJ7","draggable":"DraggableAnswer_draggable__17M3-","skipped":"DraggableAnswer_skipped__T-XZz","isDisabled":"DraggableAnswer_isDisabled__sDCKh","answer":"DraggableAnswer_answer__MQ3-5","placeholder":"DraggableAnswer_placeholder__rR4sn","placeholderFilled":"DraggableAnswer_placeholderFilled__0u4fA","placeholderIncorrect":"DraggableAnswer_placeholderIncorrect__5g7I1","placeholderOver":"DraggableAnswer_placeholderOver__uwhn-","placeHolderHiddenContent":"DraggableAnswer_placeHolderHiddenContent__zBrF3","panelSlideDown":"DraggableAnswer_panelSlideDown__G98En"};

const variants$3 = {
    correct: 'correct',
    draggable: 'draggable',
    dropped: 'dropped',
    incorrect: 'incorrect',
    skipped: 'skipped',
    warning: 'warning'
};
const iconNames = {
    correct: 'circle-solid-check',
    incorrect: 'circle-solid-cross',
    draggable: 'drag',
    warning: 'circle-solid-check'
};
function DraggableAnswer(props) {
    const { children , isDisabled , info , onRemove , testHook , variant ='draggable' , isDragged ,  } = props;
    const answer = jsxRuntime.jsx("span", Object.assign({
        className: styles$u.answer
    }, {
        children: children
    }), void 0);
    const iconName = iconNames[variant];
    return jsxRuntime.jsxs(Box, Object.assign({
        className: cx__default["default"](styles$u.root, {
            [String(variant && styles$u[variant])]: variant,
            [styles$u.isDisabled]: isDisabled,
            [styles$u.isDragged]: isDragged
        }),
        testHook: testHook,
        as: "span"
    }, {
        children: [
            jsxRuntime.jsxs("span", Object.assign({
                className: styles$u.container
            }, {
                children: [
                    jsxRuntime.jsx(Truncate, {
                        children: answer
                    }, void 0),
                    onRemove ? jsxRuntime.jsx(Box, Object.assign({
                        as: "button",
                        type: "button",
                        onClick: onRemove,
                        testHook: testHook && `${testHook}-icon`
                    }, {
                        children: jsxRuntime.jsx(Icon, {
                            className: styles$u.icon,
                            name: "close",
                            size: "sizeIconSmall2X",
                            isDecorative: false,
                            title: "Remove answer"
                        }, void 0)
                    }), void 0) : iconName && jsxRuntime.jsx(Icon, {
                        className: styles$u.icon,
                        name: iconName,
                        size: variant === 'draggable' ? 'sizeIconSmall2X' : undefined,
                        testHook: testHook && `${testHook}-icon`
                    }, void 0)
                ]
            }), void 0),
            info && jsxRuntime.jsx("span", Object.assign({
                className: styles$u.info,
                "data-test": testHook && `${testHook}-info`
            }, {
                children: info
            }), void 0)
        ]
    }), void 0);
}const Droppable = /*#__PURE__*/ react.forwardRef(function Droppable(props, ref) {
    const { assistiveText , children , isFilled , isIncorrect , isOver , testHook  } = props;
    return jsxRuntime.jsxs("span", Object.assign({
        ref: ref,
        className: cx__default["default"](styles$u.placeholder, {
            [styles$u.placeholderFilled]: isFilled,
            [styles$u.placeholderIncorrect]: isIncorrect,
            [styles$u.placeholderOver]: isOver
        }),
        "data-test": testHook
    }, {
        children: [
            assistiveText && jsxRuntime.jsx(HideVisually, {
                children: assistiveText
            }, void 0),
            !isFilled ? jsxRuntime.jsx("span", Object.assign({
                className: styles$u.placeHolderHiddenContent
            }, {
                children: children
            }), void 0) : children
        ]
    }), void 0);
});
DraggableAnswer.Droppable = Droppable;

function Definition$1(props) {
    const { definition , children  } = props;
    return jsxRuntime.jsx(Tooltip, Object.assign({
        theme: "light-border",
        size: "large",
        trigger: "click focus",
        interactive: true,
        content: definition
    }, {
        children: jsxRuntime.jsx(Box, Object.assign({
            as: "span",
            borderBottomWidth: "borderWidthLarge",
            borderBottomStyle: "dotted",
            borderBottomColor: "colorAtomiBluesDark",
            role: "button"
        }, {
            children: children
        }), void 0)
    }), void 0);
}

function useWindowResize() {
    const [resized, setResized] = react.useState(0);
    react.useEffect(()=>{
        const onResize = ()=>setResized((value)=>value + 1
            )
        ;
        window.addEventListener('resize', onResize);
        return ()=>{
            window.removeEventListener('resize', onResize);
        };
    }, []);
    return resized;
}

var styles$t = {"root":"Image_root__BAkVr","small1X":"Image_small1X__TwQqs"};

const aspectRatios = {
    [imageSizes$1.small1X]: 1,
    [imageSizes$1.small]: 16 / 9,
    [imageSizes$1.root]: 1,
    [imageSizes$1.large]: 9 / 16
};
// exported for unit tests
const images = new Map();
function Img(props) {
    const { alt , size =imageSizes$1.root , src , testHook  } = props;
    const aspectRatio = aspectRatios[size];
    const [dimensions, setDimensions] = react.useState(()=>{
        const { width =0 , height =0  } = images.get(src) || {};
        return {
            intrinsicWidth: width,
            intrinsicHeight: height,
            width,
            height
        };
    });
    // This hooks returns a counter that increments each time it detects the
    // window is resizing. It has no impact on the DOM (see the useLayoutHook
    // using resized).
    const resized = useWindowResize();
    const ref = react.useRef(null);
    // This should be called only in `useLayoutEffect` to avoid layout thrashing.
    // - https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing
    // - https://gist.github.com/paulirish/5d52fb081b3570c81e3a
    const getMaxWidth = ()=>ref.current ? Number.parseInt(getComputedStyle(ref.current).width, 10) : 0
    ;
    const updateDimensions = react.useCallback((param)=>{
        let { maxWidth , ...argDimensions } = param;
        if (!ref.current) return;
        setDimensions((stateDimensions)=>{
            const { intrinsicWidth =stateDimensions.intrinsicWidth , intrinsicHeight =stateDimensions.intrinsicHeight ,  } = argDimensions;
            let width = intrinsicWidth;
            let height = intrinsicHeight;
            if (intrinsicWidth > maxWidth) {
                width = maxWidth;
                const shrinkage = width / intrinsicWidth;
                height = Math.min(maxWidth / aspectRatio, intrinsicHeight * shrinkage);
            }
            return {
                intrinsicWidth,
                intrinsicHeight,
                width,
                height
            };
        });
    }, [
        aspectRatio
    ]);
    // This effect deals with image (pre)loading. Once the image is loaded, it
    // will update the bounding box's dimensions. Technically, it runs whenever
    // the `src` prop changes (new image needs to be (pre)loaded but in most cases
    // it would run on mount only.
    react.useLayoutEffect(()=>{
        const image = new Image();
        image.onload = ()=>updateDimensions({
                intrinsicWidth: image.width,
                intrinsicHeight: image.height,
                maxWidth: getMaxWidth()
            })
        ;
        image.src = src;
        // save a reference so the image keeps loading after the effect has run
        images.set(src, image);
        return ()=>{
            images.delete(src);
        };
    }, [
        src,
        updateDimensions
    ]);
    // This effect does the work that needs to be done when the page is resized.
    // It synchronously reads the width of the bounding box and updates the height
    // based on aspect ratio and image size.
    react.useLayoutEffect(()=>{
        updateDimensions({
            maxWidth: getMaxWidth()
        });
    }, [
        resized,
        updateDimensions
    ]);
    return jsxRuntime.jsx("div", {
        children: jsxRuntime.jsx("div", Object.assign({
            ref: ref,
            className: cx__default["default"](styles$t.root, size === imageSizes$1.small1X && styles$t.small1X),
            style: {
                // this variable determines the maximum box dimensions where the image is inscribed
                // https://css-tricks.com/aspect-ratio-boxes/
                '--aspect-ratio': aspectRatio,
                // height is calculated by taking the smallest of:
                // - scaled image height
                // - bounding box height
                height: dimensions.height
            },
            "data-test": testHook
        }, {
            children: jsxRuntime.jsx("img", {
                alt: alt,
                src: src,
                loading: "lazy"
            }, void 0)
        }), void 0)
    }, void 0);
}

var styles$s = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","--breakpoint":"min-width: 48.063em","root":"Panel_root__wAggm","icon":"Panel_icon__fewfl","general":"Panel_general__14l0a","info":"Panel_info__o6PO6","important":"Panel_important__vOLcE","panelSlideDown":"Panel_panelSlideDown__5MWkk"};

const variants$2 = keyMirror__default["default"]({
    general: null,
    important: null,
    info: null
});
function Panel$1(props) {
    const { className , variant =variants$2.general , children  } = props;
    const withIcon = variant === variants$2.important;
    return jsxRuntime.jsxs("aside", Object.assign({
        className: cx__default["default"](styles$s.root, variant && styles$s[variant], className)
    }, {
        children: [
            withIcon && jsxRuntime.jsx(Icon, {
                name: "lightbulb",
                color: "colorCoreBrand",
                display: {
                    base: 'none',
                    tablet: 'unset'
                },
                className: styles$s.icon
            }, void 0),
            jsxRuntime.jsx("div", {
                children: children
            }, void 0)
        ]
    }), void 0);
}

const DragAndDropQuestionContext = /*#__PURE__*/ react.createContext(undefined);
// The useDragAndDropQuestionContext() is required to communicate between the
// Markdown, which initially contains the answers (e.g. "{{detroit}}") to the
// parent component (e.g. DragAndDropQuestion).
function useDragAndDropQuestionContext() {
    const context = react.useContext(DragAndDropQuestionContext);
    invariant__default["default"](context, 'useDragAndDropQuestionContext must be used within a DragAndDropQuestionContext.Provider. You might be using the drag-and-drop markdown syntax (e.g. `{{answer}}`) outside of a quiz question.');
    return context;
}

function counter() {
    let index = 0;
    return {
        next: ()=>++index
    };
}
function labelCounter(prefix) {
    const ctr = counter();
    return {
        next: ()=>`${prefix}-${___default["default"].padStart(`${ctr.next()}`, 3, '0')}`
    };
}

var markdownStyles = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","--preview-line-clamp":"--neon-MarkdownPreview-lineClamp","root":"Markdown_root__695gl","isLimited":"Markdown_isLimited__xgR9e","em":"Markdown_em__LvLWP","image":"Markdown_image__UIwav","li":"Markdown_li__dfK-w","table":"Markdown_table__oXEPb","ol":"Markdown_ol__cLzz9","ul":"Markdown_ul__y1KUq","paragraph":"Markdown_paragraph__pGbU1","collapse":"Markdown_collapse__TKT9N","dragAndDrop":"Markdown_dragAndDrop__v2qCd","textPost":"Markdown_textPost__j0s2p","blockquote":"Markdown_blockquote__i5hqi","heading":"Markdown_heading__U-Dq2","h1":"Markdown_h1__TJkna","h2":"Markdown_h2__1frw3","h3":"Markdown_h3__Iumds","h4":"Markdown_h4__HRHaE","h5":"Markdown_h5__E9U58","h6":"Markdown_h6__tfCsr","tableWrapper":"Markdown_tableWrapper__ZMhFI","footnoteReference":"Markdown_footnoteReference__P-EMA","footnoteDefinition":"Markdown_footnoteDefinition__d8-p0","link":"Markdown_link__E06LB","panel":"Markdown_panel__KQWJ2","hr":"Markdown_hr__4xKX3","caption":"Markdown_caption__NHI88","preview":"Markdown_preview__DseIP","question":"Markdown_question__-tkNK","explanation":"Markdown_explanation__zujan","quizExplanation":"Markdown_quizExplanation__fcNPW","panelSlideDown":"Markdown_panelSlideDown__6xUTU"};

const panelNodeName = 'neonPanel';
const termsNodeName = 'neonTerms';
const remarkMacro = remarkMacroBuilder__default["default"]();
// @ts-ignore TODO-TS
remarkMacro.addMacro('panel', (content, props, param)=>{
    let { transformer , eat  } = param;
    return {
        type: panelNodeName,
        variant: props.type,
        children: transformer.tokenizeBlock(content, eat.now())
    };
});
// We always have at least one child, so no need for null checks. A paragraph's children are
// rendered by `TextRenderer` so we need to take the children of the last `TextRenderer` element.
// https://github.com/remarkjs/react-markdown/blob/v4.3.1/src/renderers.js#L29
function lastDescendant(children) {
    const childrenArray = flattenChildren__default["default"](children);
    const lastChild = childrenArray.pop();
    if (typeof lastChild === 'string') return lastChild;
    // @ts-ignore as per the comment above. can we rework this so it isn't a type error though?
    return lastChild && lastDescendant(lastChild.props.children);
}
function createRenderers(linkComponent, allowedHtml, customRenderers) {
    // `react-markdown` (current version: 4.3.1) doesn't expose the AST nodes so
    // we have to save our own references
    // https://github.com/arobase-che/remark-attr/issues/16#issuecomment-577487013
    const imageNodes = new Map();
    // generate a unique id for each occurence of the a drag-and-drop answer
    const counterDragAndDrop = counter();
    const nodeKey = (position)=>{
        return JSON.stringify(position === null || position === void 0 ? void 0 : position.start);
    };
    // node value appears twice: once for the opening tag and once for the closing tag
    // (<cite> and </cite>), so we have to allow both
    const allowedHtmlRegex = allowedHtml.map((allowedTag)=>new RegExp(`^</?${allowedTag}>$`)
    );
    /**
     * Function executed in order to determine if the node should be allowed. Ran
     * prior to checking allowedTypes/disallowedTypes. Returning a truthy value will
     * allow the node to be included.
     *
     * Note that if this function returns true and the type is not in `allowedTypes`
     * (or if it's in `disallowedTypes`), it won't be included.
     */ function allowNode(node) {
        if (node.type === 'image') {
            imageNodes.set(nodeKey(node.position), node);
        } else if (node.type === 'html') {
            return allowedHtmlRegex.some((regex)=>regex.test(node.value)
            );
        }
        return true;
    }
    let renderers = {
        blockquote (param) {
            let { children  } = param;
            return jsxRuntime.jsx("blockquote", Object.assign({
                className: markdownStyles.blockquote
            }, {
                children: children
            }), void 0);
        },
        emphasis (param) {
            let { data , children ,  } = param;
            var ref;
            return (data === null || data === void 0 ? void 0 : (ref = data.hProperties) === null || ref === void 0 ? void 0 : ref.definition) ? jsxRuntime.jsx(Definition, Object.assign({
                definition: jsxRuntime.jsx(Markdown, Object.assign({
                    linkComponent: linkComponent,
                    isLimited: true
                }, {
                    children: data.hProperties.definition
                }), void 0)
            }, {
                children: children
            }), void 0) : jsxRuntime.jsx("em", Object.assign({
                className: markdownStyles.em
            }, {
                children: children
            }), void 0);
        },
        footnoteReference (param) {
            let { identifier  } = param;
            return jsxRuntime.jsx(Link, Object.assign({
                component: linkComponent,
                id: `fnref-${identifier}`,
                to: `#fndef-${identifier}`
            }, {
                children: jsxRuntime.jsx("sup", Object.assign({
                    className: markdownStyles.footnoteReference
                }, {
                    children: identifier
                }), void 0)
            }), void 0);
        },
        footnoteDefinition (param) {
            let { identifier , children  } = param;
            return jsxRuntime.jsxs("div", Object.assign({
                className: markdownStyles.footnoteDefinition
            }, {
                children: [
                    jsxRuntime.jsx(Link, Object.assign({
                        component: linkComponent,
                        id: `fndef-${identifier}`,
                        className: markdownStyles.link,
                        to: `#fnref-${identifier}`
                    }, {
                        children: identifier
                    }), void 0),
                    children
                ]
            }), void 0);
        },
        heading (param) {
            let { level , children  } = param;
            const Heading = `h${level}`;
            return jsxRuntime.jsx(Heading, Object.assign({
                className: cx__default["default"](markdownStyles.heading, markdownStyles[`h${level}`])
            }, {
                children: children
            }), void 0);
        },
        image (param) {
            let { alt , src , title , sourcePosition ,  } = param;
            var ref, ref1;
            const node = imageNodes.get(nodeKey(sourcePosition));
            const size = node === null || node === void 0 ? void 0 : (ref = node.data) === null || ref === void 0 ? void 0 : (ref1 = ref.hProperties) === null || ref1 === void 0 ? void 0 : ref1.size;
            return jsxRuntime.jsxs("figure", Object.assign({
                className: markdownStyles.image
            }, {
                children: [
                    jsxRuntime.jsx(Image$1, {
                        size: size ? imageSizes[size] : undefined,
                        alt: alt,
                        src: src
                    }, void 0),
                    title && jsxRuntime.jsx("figcaption", Object.assign({
                        className: markdownStyles.caption
                    }, {
                        children: title
                    }), void 0)
                ]
            }), void 0);
        },
        link (param) {
            let { href , children  } = param;
            return jsxRuntime.jsx(Link, Object.assign({
                component: linkComponent,
                href: href,
                isExternal: true
            }, {
                children: children
            }), void 0);
        },
        list (param) {
            let { ordered , children  } = param;
            const ListEl = ordered ? 'ol' : 'ul';
            return jsxRuntime.jsx(ListEl, Object.assign({
                className: markdownStyles[ListEl]
            }, {
                children: children
            }), void 0);
        },
        listItem (param) {
            let { children  } = param;
            return jsxRuntime.jsx("li", Object.assign({
                className: markdownStyles.li
            }, {
                children: children
            }), void 0);
        },
        paragraph (param) {
            let { children  } = param;
            return jsxRuntime.jsx("p", Object.assign({
                className: cx__default["default"](markdownStyles.paragraph, {
                    [markdownStyles.collapse]: String(lastDescendant(children)).endsWith(':')
                })
            }, {
                children: children
            }), void 0);
        },
        table (param) {
            let { children  } = param;
            return jsxRuntime.jsx("div", Object.assign({
                className: markdownStyles.tableWrapper
            }, {
                children: jsxRuntime.jsx("table", Object.assign({
                    className: markdownStyles.table
                }, {
                    children: children
                }), void 0)
            }), void 0);
        },
        // @ts-ignore TODO-TS
        thematicBreak (param) {
            let { [Math.random()]: props  } = param;
            // this avoids ThematicBreak to be hoisted and break when
            // babel-plugin-transform-react-constant-elements runs
            return jsxRuntime.jsx("hr", Object.assign({
                className: markdownStyles.hr
            }, props), void 0);
        },
        math (param) {
            let { value  } = param;
            return jsxRuntime.jsx(reactKatex.BlockMath, {
                children: value
            }, void 0);
        },
        inlineMath (param) {
            let { value  } = param;
            return jsxRuntime.jsx(reactKatex.InlineMath, {
                children: value
            }, void 0);
        },
        [panelNodeName]: Panel,
        [termsNodeName] (param) {
            let { children  } = param;
            return jsxRuntime.jsx(DragAndDrop, Object.assign({
                id: counterDragAndDrop.next().toString()
            }, {
                children: children
            }), void 0);
        }
    };
    renderers = {
        ...renderers,
        ...customRenderers,
        // @ts-ignore TODO-TS
        imageReference: renderers.image,
        linkReference: renderers.link
    };
    return {
        // We need to allow HTML so that the <cite> tag works properly. Every other
        // HTML tag is filtered by the `allowNode` function.
        allowNode,
        skipHtml: false,
        escapeHtml: false,
        parserOptions: {
            commonmark: true,
            footnotes: true
        },
        plugins: [
            remarkUnwrapImages__default["default"],
            remarkMath__default["default"],
            // https://github.com/remarkjs/remark/tree/master/packages/remark-parse#parserinlinemethods
            [
                remarkAttr__default["default"],
                {
                    elements: [
                        'link',
                        'emphasis'
                    ],
                    extend: {
                        image: [
                            'size'
                        ],
                        emphasis: [
                            'definition'
                        ]
                    }
                }, 
            ],
            remarkMacro.transformer,
            [
                remarkTerms__default["default"],
                [
                    {
                        name: termsNodeName,
                        open: '{{',
                        close: '}}'
                    }, 
                ], 
            ], 
        ],
        // allows us to find the image node in the `image` renderer
        // https://github.com/arobase-che/remark-attr/issues/16#issuecomment-577487013
        rawSourcePos: true,
        renderers,
        // exposed for unit tests
        [Symbol.for('imageNodes')]: imageNodes,
        [Symbol.for('nodeKey')]: nodeKey
    };
}

const MarkdownTheme = styled__default["default"].div`
  --neon-Markdown-bullet-color: ${(props)=>props.color
};
`;
/**
 * @see https://github.com/syntax-tree/mdast
 */ const disallowedTypes = [
    'code',
    'inlineCode'
];
const limitedTypes = [
    'root',
    'paragraph',
    'text',
    'emphasis',
    'strong',
    'blockquote',
    'link',
    'linkReference',
    'list',
    'listItem',
    'image',
    'imageReference',
    'table',
    'tableHead',
    'tableBody',
    'tableRow',
    'tableCell',
    'html', 
];
const allowedHtml = [
    'cite',
    'sub',
    'sup',
    'ul',
    'ol',
    'li',
    'br'
];
const imageSizes = Object.freeze({
    'x-small': imageSizes$1.small1X,
    small: imageSizes$1.small,
    medium: imageSizes$1.root,
    large: imageSizes$1.large
});
const Definition = styled__default["default"](Definition$1)``;
function DragAndDrop(props) {
    const { children , id  } = props;
    const { assistiveTexts: { blankAssistiveText  } , actions: { addAnswer , addAnswerToBank , moveAnswerToBank  } , answerMaxLength , answerMaxLengthInfo , answers , isCheckingAnswers , isPreviewingAnswers , isSkipped ,  } = useDragAndDropQuestionContext();
    // the dropped answer if any
    const answer = answers.find((a)=>a.droppableId === id
    );
    const isFilled = !!answer;
    const isCorrectAnswer = isFilled && (answer === null || answer === void 0 ? void 0 : answer.draggableId) === id;
    const { isOver , setNodeRef  } = core.useDroppable({
        id,
        disabled: isFilled
    });
    // get the DraggableAnswer variant and info props
    let draggableAnswerVariant = variants$3.dropped;
    let draggableAnswerInfo;
    if (isCheckingAnswers) {
        if (isCorrectAnswer) {
            draggableAnswerVariant = variants$3.correct;
        } else {
            draggableAnswerVariant = variants$3.incorrect;
            // the answer is incorrect, display the expected answer with the info prop
            draggableAnswerInfo = children;
        }
    }
    if (isPreviewingAnswers && answerMaxLength) {
        if (ChildrenUtils__default["default"].onlyText(children).length > answerMaxLength) {
            // the answer has two many characters
            draggableAnswerVariant = variants$3.warning;
            draggableAnswerInfo = answerMaxLengthInfo;
        } else {
            draggableAnswerVariant = variants$3.correct;
        }
    }
    if (isSkipped) {
        draggableAnswerVariant = variants$3.skipped;
    }
    const showCorrectAnswers = isPreviewingAnswers || isSkipped;
    // add draggable answer to the DragAndDropQuestion bank using the context
    react.useEffect(()=>{
        const newAnswer = {
            draggableId: id,
            title: children,
            value: ChildrenUtils__default["default"].onlyText(children),
            isExtractedFromMarkdown: true
        };
        showCorrectAnswers ? addAnswer({
            ...newAnswer,
            droppableId: id
        }) : addAnswerToBank(newAnswer);
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    return jsxRuntime.jsx(DraggableAnswer.Droppable, Object.assign({
        ref: setNodeRef,
        isOver: isOver,
        isFilled: isFilled,
        isIncorrect: isCheckingAnswers && !isCorrectAnswer || isPreviewingAnswers && !!draggableAnswerInfo,
        assistiveText: !isFilled ? blankAssistiveText : undefined,
        testHook: `markdown-drag-and-drop-droppable-${id}`
    }, {
        children: answer ? jsxRuntime.jsx(DraggableAnswer, Object.assign({
            variant: draggableAnswerVariant,
            onRemove: isCheckingAnswers || showCorrectAnswers ? undefined : ()=>moveAnswerToBank(answer.draggableId)
            ,
            info: draggableAnswerInfo,
            testHook: `markdown-drag-and-drop-answer-${id}`
        }, {
            children: answer.title
        }), void 0) // display the assistive text (but hidden visually) so that the blank
         : // droppable is aligned correct
        blankAssistiveText
    }), void 0);
}
const Image$1 = Img;
const Link = styled__default["default"](Link$1)``;
function Panel(param) {
    let { variant , children ,  } = param;
    return jsxRuntime.jsx(Panel$1, Object.assign({
        className: markdownStyles.panel,
        variant: variant
    }, {
        children: children
    }), void 0);
}
function Markdown(props) {
    const { allowedElements , className , children , customRenderers , isLimited =false , isUnwrapped , as ='div' , aria , linkComponent =null , testHook , vars ,  } = props;
    const removeParagraphFromTypes = react.useCallback((types)=>{
        return isUnwrapped ? types.filter((type)=>type !== 'paragraph'
        ) : types;
    }, [
        isUnwrapped
    ]);
    const allowedElementRules = isLimited && removeParagraphFromTypes(limitedTypes) || allowedElements;
    // react-markdown runs the parser with all plugins every time it renders,
    // which is expensive and creates new Image elements and thus flickering
    const content = react.useMemo(()=>// @ts-ignore - TODO-TS[ENHANCEMENT] would require behaviour change
        jsxRuntime.jsx(ReactMarkdown__default["default"], Object.assign({}, createRenderers(linkComponent, allowedHtml, customRenderers), allowedElementRules ? {
            allowedTypes: allowedElementRules
        } : {
            disallowedTypes
        }, {
            unwrapDisallowed: isUnwrapped
        }, {
            children: children
        }), void 0)
    , [
        allowedElementRules,
        children,
        customRenderers,
        linkComponent,
        isUnwrapped
    ]);
    return jsxRuntime.jsx(styled.ThemeProvider, Object.assign({
        theme: {
            isLimited
        }
    }, {
        children: jsxRuntime.jsx(Box, Object.assign({}, aria, {
            as: as,
            className: cx__default["default"](markdownStyles.root, className, {
                [markdownStyles.isLimited]: isLimited
            }),
            vars: vars,
            testHook: testHook
        }, {
            children: content
        }), void 0)
    }), void 0);
}

const SvgIllustrationEmptystateAddUsers = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 182 111",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("g", Object.assign({
                transform: "translate(1 1)",
                stroke: "#BFC4CB",
                strokeWidth: 2,
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round"
            }, {
                children: [
                    jsxRuntime.jsx("ellipse", {
                        cx: 156.1,
                        cy: 78.1,
                        rx: 23.5,
                        ry: 22.9
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M156.1 66.6v22.9M167.8 78.1h-23.5M130.3 54.9l-14.1-5v-9.3"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M125.3 21.8c0 12-8.3 21.7-18.5 21.7s-18.5-9.7-18.5-21.7S96.6.1 106.8.1s18.5 9.7 18.5 21.7Z"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M125.2 19.9c-.6.1-1.1 0-1.8.2-6.3 1.2-10.4-1-13.8-7-2.1 3.9-8.6 7-13.9 7-2.6 0-4.9-.5-7.2-1.7M137.3.1c10.2 0 18.5 9.7 18.5 21.7s-8.3 21.7-18.5 21.7M146.7 48.3v-7.7M81.5 73.5h39.4M97.4 40.6v9.3l-15.9 5.6M81.5 55.5V42.1H34v66.8h29.7l17.8-14.5V55.5"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M63.7 62.4V52.3c0-2.4 2-4.4 4.5-4.4s4.5 2 4.5 4.4v10.2M63.7 56.6h8.9M63.7 108.9V94.4h17.8M39.9 71.1h29.7M39.9 79.9h17.8M39.9 88.6h17.8"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M12.273 27.8c0 .8.7 1.4 1.4 1.4h18.9c.8 0 1.4-.6 1.4-1.4V12.2c0-.8-.7-1.4-1.4-1.4h-18.8c-.8 0-1.4.6-1.4 1.4v15.6h-.1ZM.773 27.8l8.6-4.3v-7l-8.6-4.3z",
                        strokeLinejoin: "round"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$m = /*#__PURE__*/ react.forwardRef(SvgIllustrationEmptystateAddUsers);

const SvgIllustrationEmptystateClasses = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 182 158",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("g", Object.assign({
                transform: "translate(1 1)",
                stroke: "#BFC4CB",
                strokeWidth: 2,
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, {
                children: [
                    jsxRuntime.jsx("circle", {
                        cx: 90.226,
                        cy: 129.021,
                        r: 9.566
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M107.131 155.538h-33.91c0-9.365 7.585-16.95 16.955-16.95 9.365 0 16.955 7.585 16.955 16.95h0Z"
                    }, void 0),
                    jsxRuntime.jsx("circle", {
                        cx: 17.006,
                        cy: 129.021,
                        r: 9.566
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M33.911 155.538H0c0-9.365 7.586-16.95 16.956-16.95 9.365 0 16.955 7.585 16.955 16.95h0Z"
                    }, void 0),
                    jsxRuntime.jsx("circle", {
                        cx: 162.43,
                        cy: 129.021,
                        r: 9.566
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M179.335 155.538h-33.911c0-9.365 7.585-16.95 16.955-16.95 9.365 0 16.956 7.585 16.956 16.95h0ZM17.288 106.78V93.986h145.424v12.794M90.05 80.339v28.478"
                    }, void 0),
                    jsxRuntime.jsx("ellipse", {
                        cx: 112.166,
                        cy: 18.714,
                        rx: 18.237,
                        ry: 18.25
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M141.344 66.154H82.989c0-16.112 13.057-29.197 29.177-29.197 16.128 0 29.178 13.085 29.178 29.197h0ZM88.243 20.388h-23.21v-6.035H49.947v46.769a4.522 4.522 0 0 0 4.526 4.526 4.526 4.526 0 0 0 4.526-4.526v-34.7H88.01M54.473 65.648h21.12"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$l = /*#__PURE__*/ react.forwardRef(SvgIllustrationEmptystateClasses);

const SvgIllustrationEmptystateInsights = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 182 122",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd"
            }, {
                children: [
                    jsxRuntime.jsx("path", {
                        d: "M26.027 51.317V30.248c0-5.105 4.123-9.248 9.204-9.248h99.455M1 108.818v5.576c0 3.41 5.637 6.165 9.024 6.165h161.591c3.393 0 9.024-2.756 9.024-6.165v-5.576H1Z",
                        stroke: "#BFC4CB",
                        strokeWidth: 2,
                        strokeLinecap: "round",
                        strokeLinejoin: "round"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M152 6.4c-9.94 0-18 8.06-18 18 0 9.941 8.06 18 18 18 9.941 0 18-8.059 18-18h-18v-18Z",
                        stroke: "#BFC4CB",
                        strokeWidth: 2,
                        strokeLinecap: "round",
                        strokeLinejoin: "round"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M157.4 19h18c0-9.94-8.059-18-18-18v18ZM107.916 87.916H73.084V53.084",
                        stroke: "#BFC4CB",
                        strokeWidth: 2,
                        strokeLinecap: "round",
                        strokeLinejoin: "round"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M85.291 75.709a2.272 2.272 0 1 1-3.212 3.212 2.272 2.272 0 0 1 3.212-3.212M97.951 64.912l6.164-7.875M87.365 63.625l6.997 2.498M73.084 70.167l10.177-6.058M97.012 76.179l6.663-3.771M85.957 77.315h6.815M73.084 84.13l8.647-5.649M86.806 61.322a2.272 2.272 0 1 1-3.213 3.212 2.272 2.272 0 0 1 3.213-3.212M98.164 65.108a2.272 2.272 0 1 1-3.213 3.212 2.272 2.272 0 0 1 3.213-3.212M107.25 53.75a2.272 2.272 0 1 1-3.212 3.212 2.272 2.272 0 0 1 3.213-3.213M107.25 69.65a2.272 2.272 0 1 1-3.212 3.213 2.272 2.272 0 0 1 3.213-3.212M96.65 75.709a2.272 2.272 0 1 1-3.213 3.212 2.272 2.272 0 0 1 3.213-3.212M35.917 56.083c6.444 6.443 6.444 16.89 0 23.334-6.443 6.444-16.89 6.444-23.334 0-6.444-6.443-6.444-16.89 0-23.334 6.444-6.444 16.89-6.444 23.334 0",
                        stroke: "#BFC4CB",
                        strokeWidth: 2,
                        strokeLinecap: "round",
                        strokeLinejoin: "round"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M19.75 64a4.5 4.5 0 1 1 4.5 4.5V73",
                        stroke: "#BFC4CB",
                        strokeWidth: 2,
                        strokeLinecap: "round",
                        strokeLinejoin: "round"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M24.25 75.5c.69 0 1.25.56 1.25 1.25 0 .627-.465 1.155-1.115 1.242L24.25 78c-.627 0-1.155-.465-1.242-1.115L23 76.75c0-.627.465-1.155 1.115-1.242l.135-.008Zm-.034 1.002c-.123.017-.216.123-.217.214l.003.068c.017.123.123.216.214.217l.068-.003a.25.25 0 0 0 .039-.487l-.065-.01-.042.001Z",
                        fill: "#BFC4CB",
                        fillRule: "nonzero"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        stroke: "#BFC4CB",
                        strokeWidth: 2,
                        strokeLinecap: "round",
                        strokeLinejoin: "round",
                        d: "M147.5 42.5v66M134 31H35v24.5M35 80v28.5M26 84v24.5M155 43v65.5"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$k = /*#__PURE__*/ react.forwardRef(SvgIllustrationEmptystateInsights);

const SvgIllustrationEmptystateMarkbook = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 182 140",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("path", {
                d: "M26 125.5v-79c.333-2.667 2.5-8 8.5-8H57M155 125.5v-79c-.333-2.667-2.5-8-8.5-8h-21",
                stroke: "#BFC4CB",
                strokeWidth: 2,
                strokeLinecap: "round"
            }, void 0),
            jsxRuntime.jsx("path", {
                clipRule: "evenodd",
                d: "M1 126.454v5.576c0 3.409 5.637 6.165 9.024 6.165h161.591c3.393 0 9.024-2.756 9.024-6.165v-5.576H1Z",
                stroke: "#BFC4CB",
                strokeWidth: 2,
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0),
            jsxRuntime.jsx("path", {
                d: "M88.273 38.373h-9.826L66.094 50.831V38.373h-9.265V1h58.676v32.5",
                stroke: "#BFC4CB",
                strokeWidth: 2,
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0),
            jsxRuntime.jsx("path", {
                d: "M79.93 15.476c0-3.196 2.588-5.79 5.776-5.79 3.188 0 5.775 2.594 5.775 5.79s-2.587 5.79-5.775 5.79v1.93",
                stroke: "#BFC4CB",
                strokeWidth: 2,
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0),
            jsxRuntime.jsx("path", {
                clipRule: "evenodd",
                d: "M86.668 28.022a.964.964 0 0 1-.962.965.964.964 0 0 1 0-1.93c.531 0 .962.432.962.965v0ZM105.479 58.343l13.897 11.493V58.343h6.176V33.428H88.493v24.915h16.986Z",
                stroke: "#BFC4CB",
                strokeWidth: 2,
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0),
            jsxRuntime.jsx("path", {
                d: "m112.176 43.462-8.302 7.768-2.767-2.774",
                stroke: "#BFC4CB",
                strokeWidth: 2,
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0),
            jsxRuntime.jsx("path", {
                clipRule: "evenodd",
                d: "M106.16 89.784c0 9.194-7.434 16.646-16.604 16.646-9.171 0-16.604-7.452-16.604-16.646 0-9.195 7.433-16.647 16.604-16.647 9.17 0 16.604 7.452 16.604 16.647v0Z",
                stroke: "#BFC4CB",
                strokeWidth: 2,
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0),
            jsxRuntime.jsx("path", {
                clipRule: "evenodd",
                d: "M85.465 96.297V83.27l11.07 6.514-11.07 6.514Z",
                stroke: "#BFC4CB",
                strokeWidth: 2,
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, void 0),
            jsxRuntime.jsx("path", {
                d: "M35 49v-1h-1v1h1Zm53 1a1 1 0 1 0 0-2v2Zm-52 76V49h-2v77h2Zm-1-76h53v-2H35v2Z",
                fill: "#BFC4CB"
            }, void 0),
            jsxRuntime.jsx("path", {
                d: "M145.5 125.5V49H126",
                stroke: "#BFC4CB",
                strokeWidth: 2,
                strokeLinecap: "round"
            }, void 0)
        ]
    }), void 0);
};
const ForwardRef$j = /*#__PURE__*/ react.forwardRef(SvgIllustrationEmptystateMarkbook);

const SvgIllustrationEmptystateRevisions = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 182 116",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("g", Object.assign({
                stroke: "#BFC4CB",
                strokeWidth: 2,
                fill: "none",
                fillRule: "evenodd"
            }, {
                children: [
                    jsxRuntime.jsx("path", {
                        d: "M1 102.513v5.6c0 3.4 5.6 6.2 9 6.2h161.6c3.4 0 9-2.8 9-6.2v-5.6H1ZM26 79.913v22.1M119 14.613H35.2c-5.1 0-9.2 4.1-9.2 9.2v24.2M154.9 102.013l.1-68M152.5 11.013l-11.629 12.958L135 17.555M63 43.013l44-.2M64 51.813l30 .2M70.5 70.313c1.5 1.5 1.5 3.9 0 5.4-1.5 1.5-3.9 1.5-5.4 0-1.5-1.5-1.5-3.9 0-5.4 1.5-1.5 3.9-1.5 5.4 0M79.3 73.013H108M70.5 84.513c1.5 1.5 1.5 3.9 0 5.4-1.5 1.5-3.9 1.5-5.4 0-1.5-1.5-1.5-3.9 0-5.4 1.5-1.4 3.9-1.4 5.4 0M79.3 87.213H108"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M119 24.613H35v25.9M147 102.513v-68.4M35 76.013v26.5M36.3 52.513c6 6 6 15.8 0 21.8s-15.8 6-21.8 0-6-15.8 0-21.8 15.8-6 21.8 0"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        strokeLinecap: "round",
                        strokeLinejoin: "round",
                        d: "M166.958 33.762h-25l-8.333 8.19v-8.19h-14.583V1h47.916z"
                    }, void 0),
                    jsxRuntime.jsxs("g", Object.assign({
                        strokeLinejoin: "round"
                    }, {
                        children: [
                            jsxRuntime.jsx("path", {
                                d: "M21 60.173c0-2.296 1.976-4.16 4.412-4.16 2.435 0 4.412 1.864 4.412 4.16 0 2.296-1.977 4.16-4.412 4.16v1.386",
                                strokeLinecap: "round"
                            }, void 0),
                            jsxRuntime.jsx("path", {
                                d: "M26.294 70.13a.883.883 0 0 1-1.765 0 .883.883 0 0 1 1.765 0Z"
                            }, void 0)
                        ]
                    }), void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$i = /*#__PURE__*/ react.forwardRef(SvgIllustrationEmptystateRevisions);

const SvgIllustrationEmptystateSearch = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 60 59",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("g", Object.assign({
                stroke: "#BFC4CB",
                fill: "none",
                fillRule: "evenodd"
            }, {
                children: jsxRuntime.jsx("path", {
                    d: "M50.821 36.679c3.905 3.905 3.905 10.237 0 14.142-3.905 3.905-10.237 3.905-14.142 0-3.905-3.905-3.905-10.237 0-14.142 3.905-3.905 10.237-3.905 14.142 0M50.825 50.825l7.925 7.925M46.25 11.25v-5h-32.5v-5H1.25V40a3.75 3.75 0 1 0 7.5 0V11.25h42.5v12.5M5 43.75h18.75"
                }, void 0)
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$h = /*#__PURE__*/ react.forwardRef(SvgIllustrationEmptystateSearch);

const SvgIllustrationEmptystateTasks = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 182 126",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("g", Object.assign({
                stroke: "#BFC4CB",
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, {
                children: [
                    jsxRuntime.jsx("path", {
                        d: "M1 112.5v5.6c0 3.4 5.6 6.2 9 6.2h161.6c3.4 0 9-2.8 9-6.2v-5.6H1ZM26 89.9V112M119 24.6H35.2c-5.1 0-9.2 4.1-9.2 9.2V58M154.9 112V52.6M33.2 68.3 22.9 78.6l-5.2-5.1M70.5 56.1c1.5 1.5 1.5 3.9 0 5.4-1.5 1.5-3.9 1.5-5.4 0-1.5-1.5-1.5-3.9 0-5.4 1.5-1.5 3.9-1.5 5.4 0M79.3 58.8H108M70.5 71.3c1.5 1.5 1.5 3.9 0 5.4-1.5 1.5-3.9 1.5-5.4 0-1.5-1.5-1.5-3.9 0-5.4 1.5-1.5 3.9-1.5 5.4 0M79.3 74H108M70.5 86.5c1.5 1.5 1.5 3.9 0 5.4-1.5 1.5-3.9 1.5-5.4 0-1.5-1.5-1.5-3.9 0-5.4 1.5-1.4 3.9-1.4 5.4 0M79.3 89.2H108M164.1 22.4V5.5h-9M128 5.5h-9v36.1h20.3",
                        strokeWidth: 2
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        strokeWidth: 2,
                        d: "M128 1h6.8v9H128zM148.3 1h6.8v9h-6.8zM134.8 5.5h13.5M119 16.8h45.1M166.9 29.7c5.3 5.3 5.3 13.8 0 19.1-5.3 5.3-13.8 5.3-19.1 0-5.3-5.3-5.3-13.8 0-19.1 5.2-5.2 13.8-5.2 19.1 0"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        strokeWidth: 2,
                        d: "M162.9 41.6h-5.6v-7.9"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        strokeWidth: 2.008,
                        d: "M119 34.6H35v25.9M147 112.5V48.1M35 86v26.5"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M36.3 62.5c6 6 6 15.8 0 21.8s-15.8 6-21.8 0-6-15.8 0-21.8 15.8-6 21.8 0",
                        strokeWidth: 2
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$g = /*#__PURE__*/ react.forwardRef(SvgIllustrationEmptystateTasks);

const SvgIllustrationEmptystateUsers = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 181 116",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("g", Object.assign({
                stroke: "#BFC4CB",
                strokeWidth: 2,
                fill: "none",
                fillRule: "evenodd",
                strokeLinecap: "round",
                strokeLinejoin: "round"
            }, {
                children: [
                    jsxRuntime.jsxs("g", Object.assign({
                        transform: "translate(141 75)"
                    }, {
                        children: [
                            jsxRuntime.jsx("path", {
                                d: "m34.587 33.853 4.437-7.697-4.437-2.57c.608-2.56.608-4.608 0-7.168l4.433-2.56-4.438-7.698-4.433 2.56c-1.735-1.64-3.856-2.849-6.2-3.551V0h-8.874v5.164c-2.348.703-4.465 1.912-6.2 3.552l-4.433-2.56-4.438 7.697 4.434 2.56c-.608 2.56-.608 4.61 0 7.17L0 26.15l4.438 7.698 4.437-2.569c1.735 1.64 3.857 2.844 6.2 3.551V40h8.875v-5.164c2.343-.707 4.464-1.912 6.2-3.552l4.437 2.57Z"
                            }, void 0),
                            jsxRuntime.jsx("circle", {
                                cx: 19.512,
                                cy: 19.512,
                                r: 6.829
                            }, void 0)
                        ]
                    }), void 0),
                    jsxRuntime.jsx("path", {
                        d: "m140.138 70.602-22.31-7.998V51.02M95.183 51.026v11.578l-22.31 7.998c-5.345 1.914-8.826 6.984-8.826 12.648v8.429h59.442"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M128.85 27.875c0 14.83-10.009 26.855-22.345 26.855-12.347 0-22.344-12.025-22.344-26.855 0-14.812 9.997-26.826 22.344-26.826 12.342 0 22.345 12.014 22.345 26.826Z"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M128.674 25.468c-.747.102-1.364.034-2.117.187-7.614 1.461-12.5-1.297-16.695-8.638-2.513 4.82-10.365 8.638-16.824 8.638-3.182 0-5.916-.651-8.65-2.09M143.303 1.049c12.341 0 22.344 12.014 22.344 26.826 0 14.83-10.009 26.855-22.344 26.855M154.625 60.525V51.02"
                    }, void 0),
                    jsxRuntime.jsxs("g", Object.assign({
                        transform: "translate(10 35)"
                    }, {
                        children: [
                            jsxRuntime.jsx("path", {
                                d: "M9.028 0h45.14M9.028 12h45.14M9.028 24h45.14M9.028 35h21.065M9.028 47h21.065"
                            }, void 0),
                            jsxRuntime.jsx("ellipse", {
                                fill: "#FFF",
                                cx: 52.663,
                                cy: 47.856,
                                rx: 15.047,
                                ry: 14.869
                            }, void 0),
                            jsxRuntime.jsx("path", {
                                d: "M60.186 47H45.14M52 55.29V40.421M0 0h3.01M0 12h3.01M0 24h3.01M0 35h3.01M0 47h3.01"
                            }, void 0)
                        ]
                    }), void 0),
                    jsxRuntime.jsx("path", {
                        fill: "#FFF",
                        d: "m23.862 33.889-5.13 1.407 1.466-4.926 10.995-10.56 3.663 3.52z"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "m28.262 22.626 3.663 3.519M20.198 30.37l3.664 3.519M16.534 26.851H3.344c-1.213 0-2.195-.944-2.195-2.111V9.257c0-1.164.982-2.11 2.196-2.11h26.38c1.213 0 2.2.946 2.2 2.11V17"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M31.19 7.85 16.534 19.11 1.88 7.85"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$f = /*#__PURE__*/ react.forwardRef(SvgIllustrationEmptystateUsers);

const SvgIllustrationMainBrowser = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        xmlnsXlink: "http://www.w3.org/1999/xlink",
        viewBox: "0 0 250 250",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("defs", {
                children: [
                    jsxRuntime.jsx("circle", {
                        id: "illustration-main-browser_svg__a",
                        cx: 125,
                        cy: 125,
                        r: 125
                    }, void 0),
                    jsxRuntime.jsx("rect", {
                        id: "illustration-main-browser_svg__c",
                        x: 0,
                        y: 0,
                        width: 150.59,
                        height: 110.221,
                        rx: 12
                    }, void 0)
                ]
            }, void 0),
            jsxRuntime.jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd"
            }, {
                children: [
                    jsxRuntime.jsxs("g", {
                        children: [
                            jsxRuntime.jsx("mask", Object.assign({
                                id: "illustration-main-browser_svg__b",
                                fill: "#fff"
                            }, {
                                children: jsxRuntime.jsx("use", {
                                    xlinkHref: "#illustration-main-browser_svg__a"
                                }, void 0)
                            }), void 0),
                            jsxRuntime.jsx("use", {
                                fill: "#DCECFE",
                                xlinkHref: "#illustration-main-browser_svg__a"
                            }, void 0),
                            jsxRuntime.jsx("path", {
                                d: "M50 132v34H34v-34a8 8 0 1 1 16 0ZM34 144v22H18v-22a8 8 0 1 1 16 0Z",
                                fill: "#0C9",
                                mask: "url(#illustration-main-browser_svg__b)"
                            }, void 0),
                            jsxRuntime.jsx("rect", {
                                fill: "#FED86F",
                                mask: "url(#illustration-main-browser_svg__b)",
                                x: 12,
                                y: 162,
                                width: 42,
                                height: 39,
                                rx: 6
                            }, void 0),
                            jsxRuntime.jsxs("g", Object.assign({
                                mask: "url(#illustration-main-browser_svg__b)"
                            }, {
                                children: [
                                    jsxRuntime.jsx("path", {
                                        d: "M100.057 186.176V86.912c0-6.576 5.177-11.912 11.557-11.912h138.681c6.38 0 11.557 5.336 11.557 11.912v99.264",
                                        fill: "#FFF"
                                    }, void 0),
                                    jsxRuntime.jsx("path", {
                                        fill: "#177CF9",
                                        d: "M181.602 186.065h-70.325V87.87h140.651v98.196z"
                                    }, void 0),
                                    jsxRuntime.jsx("path", {
                                        d: "M68 186V193c0 4.282 7.077 7.742 11.33 7.742h202.887c4.26 0 11.33-3.46 11.33-7.742V186H68Z",
                                        fill: "#FFF"
                                    }, void 0),
                                    jsxRuntime.jsx("path", {
                                        d: "M206.48 138.116c0 13.879-11.22 25.127-25.059 25.127-13.841 0-25.06-11.248-25.06-25.127 0-13.88 11.219-25.128 25.06-25.128 13.84 0 25.06 11.249 25.06 25.128Z",
                                        fill: "#177CF9"
                                    }, void 0),
                                    jsxRuntime.jsx("path", {
                                        fill: "#FFF",
                                        d: "M175.628 148.123v-19.665l16.706 9.832z"
                                    }, void 0)
                                ]
                            }), void 0)
                        ]
                    }, void 0),
                    jsxRuntime.jsxs("g", Object.assign({
                        transform: "translate(68 52)"
                    }, {
                        children: [
                            jsxRuntime.jsx("mask", Object.assign({
                                id: "illustration-main-browser_svg__d",
                                fill: "#fff"
                            }, {
                                children: jsxRuntime.jsx("use", {
                                    xlinkHref: "#illustration-main-browser_svg__c"
                                }, void 0)
                            }), void 0),
                            jsxRuntime.jsx("use", {
                                fill: "#FD819C",
                                xlinkHref: "#illustration-main-browser_svg__c"
                            }, void 0),
                            jsxRuntime.jsx("path", {
                                fill: "#FFF",
                                mask: "url(#illustration-main-browser_svg__d)",
                                d: "M0 0h151.192v13.486H0z"
                            }, void 0),
                            jsxRuntime.jsx("ellipse", {
                                fill: "#FF5A5F",
                                cx: 10.008,
                                cy: 6.477,
                                rx: 2.409,
                                ry: 2.41
                            }, void 0),
                            jsxRuntime.jsx("ellipse", {
                                fill: "#FCB95B",
                                cx: 17.952,
                                cy: 6.477,
                                rx: 2.409,
                                ry: 2.41
                            }, void 0),
                            jsxRuntime.jsx("ellipse", {
                                fill: "#0C9",
                                cx: 25.896,
                                cy: 6.477,
                                rx: 2.409,
                                ry: 2.41
                            }, void 0),
                            jsxRuntime.jsx("circle", {
                                fill: "#48418B",
                                cx: 52.5,
                                cy: 46.5,
                                r: 4.5
                            }, void 0),
                            jsxRuntime.jsx("circle", {
                                fill: "#48418B",
                                cx: 98.5,
                                cy: 46.5,
                                r: 4.5
                            }, void 0),
                            jsxRuntime.jsx("path", {
                                d: "M89.203 79H62.797c1.922-4.66 7.107-8 13.203-8 6.096 0 11.281 3.34 13.203 8Z",
                                stroke: "#FFF",
                                strokeWidth: 2,
                                fill: "#FFF",
                                strokeLinecap: "round",
                                strokeLinejoin: "round"
                            }, void 0)
                        ]
                    }), void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$e = /*#__PURE__*/ react.forwardRef(SvgIllustrationMainBrowser);

const SvgIllustrationMainCharacters = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        xmlnsXlink: "http://www.w3.org/1999/xlink",
        viewBox: "0 0 250 250",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("defs", {
                children: jsxRuntime.jsx("circle", {
                    id: "illustration-main-characters_svg__a",
                    cx: 125,
                    cy: 125,
                    r: 125
                }, void 0)
            }, void 0),
            jsxRuntime.jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd"
            }, {
                children: [
                    jsxRuntime.jsx("mask", Object.assign({
                        id: "illustration-main-characters_svg__b",
                        fill: "#fff"
                    }, {
                        children: jsxRuntime.jsx("use", {
                            xlinkHref: "#illustration-main-characters_svg__a"
                        }, void 0)
                    }), void 0),
                    jsxRuntime.jsx("use", {
                        fill: "#F0EBF9",
                        xlinkHref: "#illustration-main-characters_svg__a"
                    }, void 0),
                    jsxRuntime.jsxs("g", Object.assign({
                        mask: "url(#illustration-main-characters_svg__b)"
                    }, {
                        children: [
                            jsxRuntime.jsxs("g", Object.assign({
                                fill: "#A76553"
                            }, {
                                children: [
                                    jsxRuntime.jsx("path", {
                                        d: "M75.363 159.215h27.249v30.95H75.363z"
                                    }, void 0),
                                    jsxRuntime.jsx("path", {
                                        d: "M.07 20.853a57.77 57.77 0 0 0 13.625 1.625c4.692 0 9.254-.565 13.625-1.625V.506H.07v20.347Z",
                                        style: {
                                            mixBlendMode: 'multiply'
                                        },
                                        transform: "translate(75.363 157.08)"
                                    }, void 0)
                                ]
                            }), void 0),
                            jsxRuntime.jsx("path", {
                                d: "M115.609 185.974H62.507c-20.53 0-37.172 16.675-37.172 37.246v26.628h127.446V223.22c0-20.57-16.642-37.246-37.172-37.246Z",
                                fill: "#0C9"
                            }, void 0),
                            jsxRuntime.jsx("path", {
                                d: "M48.4 188.758c-13.532 5.568-23.065 18.897-23.065 34.462v26.628H48.4v-61.09ZM129.717 188.758c13.531 5.568 23.064 18.897 23.064 34.462v26.628h-23.064v-61.09Z",
                                fill: "#FFF"
                            }, void 0),
                            jsxRuntime.jsx("path", {
                                stroke: "#FFF",
                                fill: "#FFF",
                                strokeLinecap: "round",
                                strokeLinejoin: "round",
                                d: "m87.778 232.085 27.433-45.802H62.11z"
                            }, void 0),
                            jsxRuntime.jsx("path", {
                                d: "m109.75 177.194-15.43 8.922v-.218a2.828 2.828 0 0 0-2.826-2.83h-4.87a2.828 2.828 0 0 0-2.826 2.83v.218l-15.43-8.922c-3.174-1.835-7.142.459-7.142 4.13v15.669c0 3.67 3.968 5.965 7.142 4.13l15.43-8.922v.833a2.828 2.828 0 0 0 2.825 2.83h4.87a2.828 2.828 0 0 0 2.826-2.83v-.833l15.43 8.922c3.174 1.835 7.141-.46 7.141-4.13v-15.669c0-3.671-3.967-5.965-7.14-4.13Z",
                                fill: "#F8E080",
                                fillRule: "nonzero"
                            }, void 0),
                            jsxRuntime.jsxs("g", Object.assign({
                                fill: "#A76553"
                            }, {
                                children: [
                                    jsxRuntime.jsx("path", {
                                        d: "M12.173 57.886C5.45 57.886 0 63.565 0 70.57s5.45 12.685 12.173 12.685h5.587v-25.37h-5.587ZM115.426 57.886c7.058 0 12.779 5.732 12.779 12.804s-5.721 12.804-12.779 12.804h-5.864V57.886h5.864Z",
                                        style: {
                                            mixBlendMode: 'multiply'
                                        },
                                        transform: "translate(25 48.234)"
                                    }, void 0),
                                    jsxRuntime.jsx("path", {
                                        d: "M89.058 48.234c-27.228 0-49.302 22.117-49.302 49.4v25.63c0 27.283 22.074 49.4 49.302 49.4 27.229 0 49.302-22.117 49.302-49.4v-25.63c0-27.283-22.073-49.4-49.302-49.4Z"
                                    }, void 0)
                                ]
                            }), void 0),
                            jsxRuntime.jsxs("g", Object.assign({
                                transform: "translate(39.137 43.809)",
                                fill: "#48418B"
                            }, {
                                children: [
                                    jsxRuntime.jsx("path", {
                                        d: "M99.842 49.929V79.27c0 27.571-22.35 49.929-49.92 49.929C22.343 129.2 0 106.846 0 79.27V49.93C0 22.357 22.35 0 49.921 0c27.577 0 49.921 22.354 49.921 49.929Zm-5.546 2.549c0-18.23-14.774-33.01-33-33.01H39.471c-18.225 0-33 14.776-33 33.01V89.11c0 18.23 14.774 33.01 33 33.01h21.825c18.225 0 33-14.777 33-33.01V52.478Z"
                                    }, void 0),
                                    jsxRuntime.jsx("rect", {
                                        x: 29.158,
                                        y: 77.874,
                                        width: 37.11,
                                        height: 30.973,
                                        rx: 15
                                    }, void 0),
                                    jsxRuntime.jsx("path", {
                                        d: "M.884 86.868h97.191c-2.934 24.268-23.572 43.072-48.596 43.072-25.023 0-45.66-18.804-48.595-43.072Z"
                                    }, void 0),
                                    jsxRuntime.jsx("rect", {
                                        x: 73.336,
                                        y: 76.989,
                                        width: 19.438,
                                        height: 30.973,
                                        rx: 9.719
                                    }, void 0),
                                    jsxRuntime.jsx("path", {
                                        d: "M79.521 77.874h18.555v10.619H79.521zM26.507 86.704c0-5.366-4.35-9.715-9.72-9.715-5.367 0-9.719 4.355-9.719 9.715v11.542c0 5.366 4.35 9.715 9.72 9.715 5.367 0 9.719-4.355 9.719-9.715V86.704Z"
                                    }, void 0),
                                    jsxRuntime.jsx("path", {
                                        d: "M19.438 77.874H.884v10.619h18.554zM106.79 8.85c-1.418 16.363-15.155 29.202-31.886 29.202H44.377c-16.734 0-30.469-12.834-31.886-29.203h94.3Z"
                                    }, void 0)
                                ]
                            }), void 0),
                            jsxRuntime.jsxs("g", Object.assign({
                                transform: "translate(59.119 90.292)"
                            }, {
                                children: [
                                    jsxRuntime.jsx("ellipse", {
                                        fill: "#102D5C",
                                        cx: 6.014,
                                        cy: 19.227,
                                        rx: 5.058,
                                        ry: 5.068
                                    }, void 0),
                                    jsxRuntime.jsx("ellipse", {
                                        fill: "#102D5C",
                                        cx: 53.726,
                                        cy: 19.227,
                                        rx: 5.058,
                                        ry: 5.068
                                    }, void 0),
                                    jsxRuntime.jsx("path", {
                                        d: "M2.991 5.94h7.996a2.867 2.867 0 0 0 0-5.734H2.991a2.867 2.867 0 1 0 0 5.734ZM49.82 5.94h7.996a2.867 2.867 0 1 0 0-5.734H49.82a2.867 2.867 0 0 0 0 5.734Z",
                                        fill: "#102D5C",
                                        fillRule: "nonzero"
                                    }, void 0),
                                    jsxRuntime.jsx("path", {
                                        d: "M14.423 46.434h27.499c-2.002 5.672-7.402 9.735-13.75 9.735-6.347 0-11.747-4.063-13.749-9.735Z",
                                        stroke: "#FFF",
                                        strokeWidth: 2,
                                        fill: "#FFF",
                                        strokeLinecap: "round",
                                        strokeLinejoin: "round"
                                    }, void 0),
                                    jsxRuntime.jsx("path", {
                                        d: "m30.218 15.462 3.534 14.746a4.777 4.777 0 0 1-9.556 0l4.418-14.746",
                                        fill: "#A76553",
                                        style: {
                                            mixBlendMode: 'multiply'
                                        }
                                    }, void 0)
                                ]
                            }), void 0)
                        ]
                    }), void 0),
                    jsxRuntime.jsxs("g", Object.assign({
                        mask: "url(#illustration-main-characters_svg__b)"
                    }, {
                        children: [
                            jsxRuntime.jsxs("g", Object.assign({
                                transform: "translate(166.518 64)"
                            }, {
                                children: [
                                    jsxRuntime.jsx("path", {
                                        d: "M13.261 22.103C13.261 9.896 23.154 0 35.363 0c12.206 0 22.101 9.898 22.101 22.103V98.69c0 12.207-9.892 22.103-22.101 22.103-12.207 0-22.102-9.898-22.102-22.103V22.103Z",
                                        fill: "#FD819C"
                                    }, void 0),
                                    jsxRuntime.jsx("ellipse", {
                                        fill: "#177CF9",
                                        cx: 19.892,
                                        cy: 36.091,
                                        rx: 19.892,
                                        ry: 19.887
                                    }, void 0),
                                    jsxRuntime.jsx("path", {
                                        d: "M62.973 89.852c3.06 13.156-4.85 26.463-18 29.986-13.147 3.523-26.652-4.046-30.581-16.969l48.581-13.017Z",
                                        fill: "#FD819C"
                                    }, void 0)
                                ]
                            }), void 0),
                            jsxRuntime.jsx("path", {
                                d: "M187.55 197.794h-44.276c-17.118 0-30.994 13.879-30.994 31v22.163h106.265v-22.163c0-17.12-13.876-31-30.994-31Z",
                                fill: "#65CAE4"
                            }, void 0),
                            jsxRuntime.jsx("path", {
                                d: "m176.303 195.841 12.438 1.02s-.077 17.934-10.675 19.493c-10.597 1.56-12.736-9.233-12.736-9.233l10.973-11.28Z",
                                fill: "#FFF"
                            }, void 0),
                            jsxRuntime.jsx("path", {
                                d: "m154.93 195.841-12.438 1.02s.077 17.934 10.675 19.493c10.597 1.56 12.735-9.233 12.735-9.233l-10.972-11.28ZM131.51 200.111c-11.282 4.634-19.23 15.728-19.23 28.684v22.163h19.23V200.11ZM199.314 200.111c11.283 4.634 19.231 15.728 19.231 28.684v22.163h-19.231V200.11Z",
                                fill: "#FFF"
                            }, void 0),
                            jsxRuntime.jsxs("g", Object.assign({
                                transform: "translate(153.257 175.218)",
                                fill: "#FED7C6"
                            }, {
                                children: [
                                    jsxRuntime.jsx("path", {
                                        d: "M.795.421h22.72v25.76H.795z"
                                    }, void 0),
                                    jsxRuntime.jsx("ellipse", {
                                        cx: 12.156,
                                        cy: 20.255,
                                        rx: 12.156,
                                        ry: 12.153
                                    }, void 0),
                                    jsxRuntime.jsx("path", {
                                        d: "M.795 17.357a48.252 48.252 0 0 0 11.36 1.352 48.27 48.27 0 0 0 11.362-1.352V.42H.795v16.936Z",
                                        style: {
                                            mixBlendMode: 'multiply'
                                        }
                                    }, void 0)
                                ]
                            }), void 0),
                            jsxRuntime.jsx("path", {
                                d: "M122.15 131.33c-5.606 0-10.15 4.726-10.15 10.557 0 5.832 4.544 10.558 10.15 10.558h4.658V131.33h-4.658ZM208.244 131.33c5.885 0 10.655 4.77 10.655 10.656 0 5.887-4.77 10.657-10.655 10.657h-4.89V131.33h4.89Z",
                                fill: "#FDB599"
                            }, void 0),
                            jsxRuntime.jsx("path", {
                                d: "M165.412 83.15c-22.703 0-41.108 18.409-41.108 41.117v21.332c0 22.708 18.405 41.117 41.108 41.117 22.704 0 41.11-18.409 41.11-41.117v-21.332c-.001-22.708-18.406-41.117-41.11-41.117Z",
                                fill: "#FED7C6"
                            }, void 0),
                            jsxRuntime.jsxs("g", Object.assign({
                                transform: "translate(139.82 117.592)"
                            }, {
                                children: [
                                    jsxRuntime.jsx("path", {
                                        d: "M3.122 5.858h6.667a2.736 2.736 0 0 0 0-5.473H3.122a2.736 2.736 0 0 0 0 5.473Z",
                                        fill: "#102D5C",
                                        fillRule: "nonzero"
                                    }, void 0),
                                    jsxRuntime.jsx("path", {
                                        d: "M42.168 3.122h6.668",
                                        stroke: "#303338",
                                        strokeWidth: 6,
                                        strokeLinecap: "round"
                                    }, void 0),
                                    jsxRuntime.jsx("ellipse", {
                                        fill: "#102D5C",
                                        cx: 5.643,
                                        cy: 16.567,
                                        rx: 4.218,
                                        ry: 4.219
                                    }, void 0),
                                    jsxRuntime.jsx("ellipse", {
                                        fill: "#102D5C",
                                        cx: 45.426,
                                        cy: 16.567,
                                        rx: 4.218,
                                        ry: 4.219
                                    }, void 0),
                                    jsxRuntime.jsx("path", {
                                        d: "m25.824 13.433 2.947 12.274a3.98 3.98 0 0 1-3.984 3.976 3.98 3.98 0 0 1-3.984-3.976l3.684-12.274",
                                        fill: "#FED7C6",
                                        style: {
                                            mixBlendMode: 'multiply'
                                        }
                                    }, void 0),
                                    jsxRuntime.jsx("path", {
                                        d: "M12.654 39.212h22.929c-1.669 4.72-6.172 8.102-11.464 8.102-5.293 0-9.796-3.381-11.465-8.102Z",
                                        stroke: "#FFF",
                                        strokeWidth: 2,
                                        fill: "#FFF",
                                        strokeLinecap: "round",
                                        strokeLinejoin: "round"
                                    }, void 0)
                                ]
                            }), void 0),
                            jsxRuntime.jsx("path", {
                                d: "M165.703 80.204c-22.336 0-41.179 18.952-41.179 41.257v7.86c15.118-6.101 26.444-28.779 26.444-28.779s10.372 47.588 56.65 27.306v-7.258c0-22.305-19.58-40.386-41.915-40.386Z",
                                fill: "#FD819C"
                            }, void 0)
                        ]
                    }), void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$d = /*#__PURE__*/ react.forwardRef(SvgIllustrationMainCharacters);

const SvgIllustrationMainDnd = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        xmlnsXlink: "http://www.w3.org/1999/xlink",
        viewBox: "0 0 250 250",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("defs", {
                children: jsxRuntime.jsx("circle", {
                    id: "illustration-main-dnd_svg__a",
                    cx: 125,
                    cy: 125,
                    r: 125
                }, void 0)
            }, void 0),
            jsxRuntime.jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd"
            }, {
                children: [
                    jsxRuntime.jsx("circle", {
                        fill: "#D9E9FC",
                        fillRule: "nonzero",
                        cx: 125,
                        cy: 125,
                        r: 125
                    }, void 0),
                    jsxRuntime.jsx("mask", Object.assign({
                        id: "illustration-main-dnd_svg__b",
                        fill: "#fff"
                    }, {
                        children: jsxRuntime.jsx("use", {
                            xlinkHref: "#illustration-main-dnd_svg__a"
                        }, void 0)
                    }), void 0),
                    jsxRuntime.jsx("g", Object.assign({
                        mask: "url(#illustration-main-dnd_svg__b)",
                        fill: "#F8FAFB",
                        fillRule: "nonzero"
                    }, {
                        children: jsxRuntime.jsx("path", {
                            d: "M35 64h180v189H35z"
                        }, void 0)
                    }), void 0),
                    jsxRuntime.jsxs("g", Object.assign({
                        mask: "url(#illustration-main-dnd_svg__b)"
                    }, {
                        children: [
                            jsxRuntime.jsx("path", {
                                fill: "#E1E4E7",
                                d: "M35 64h180v24H35z"
                            }, void 0),
                            jsxRuntime.jsxs("g", Object.assign({
                                transform: "translate(43 73)"
                            }, {
                                children: [
                                    jsxRuntime.jsx("ellipse", {
                                        fill: "#FF5A5F",
                                        cx: 3.69,
                                        cy: 3.691,
                                        rx: 3.69,
                                        ry: 3.691
                                    }, void 0),
                                    jsxRuntime.jsx("ellipse", {
                                        fill: "#FCB95B",
                                        cx: 15.5,
                                        cy: 3.691,
                                        rx: 3.69,
                                        ry: 3.691
                                    }, void 0),
                                    jsxRuntime.jsx("ellipse", {
                                        fill: "#0C9",
                                        cx: 27.31,
                                        cy: 3.691,
                                        rx: 3.69,
                                        ry: 3.691
                                    }, void 0)
                                ]
                            }), void 0)
                        ]
                    }), void 0),
                    jsxRuntime.jsx("path", {
                        d: "M172 115.346a2 2 0 1 1-4 0V115a3 3 0 0 0-2.824-2.995L165 112a2 2 0 1 1 0-4 7 7 0 0 1 7 7v.346Zm0 18a2 2 0 1 1-4 0v-8a2 2 0 0 1 4 0v8Zm-.77 18.849a2 2 0 0 1-3.625-1.686l.066-.142c.215-.418.329-.882.329-1.367v-5.654a2 2 0 0 1 4 0V149a6.978 6.978 0 0 1-.77 3.195ZM152.307 156a2 2 0 1 1 0-4h8a2 2 0 1 1 0 4h-8Zm-18 0a2 2 0 1 1 0-4h8a2 2 0 1 1 0 4h-8Zm-18 0a2 2 0 1 1 0-4h8a2 2 0 1 1 0 4h-8Zm-18 0a2 2 0 1 1 0-4h8a2 2 0 1 1 0 4h-8Zm-18 0a2 2 0 1 1 0-4h8a2 2 0 0 1 0 4h-8Zm-18.272-.066a2 2 0 0 1 .4-3.978l.148.015c.137.02.276.029.417.029h7.307a2 2 0 0 1 0 4H63c-.324 0-.647-.022-.965-.066ZM56 137.96a2 2 0 1 1 4 0v8a2 2 0 0 1-4 0v-8Zm0-18a2 2 0 1 1 4 0v8a2 2 0 0 1-4 0v-8ZM68.385 108a2 2 0 1 1 0 4H62.93c-.463.011-.906.126-1.306.333l-.196.111a2 2 0 1 1-2.102-3.403 7.01 7.01 0 0 1 3.558-1.04l5.5-.001Zm18 0a2 2 0 0 1 0 4h-8a2 2 0 1 1 0-4h8Zm18 0a2 2 0 1 1 0 4h-8a2 2 0 1 1 0-4h8Zm18 0a2 2 0 1 1 0 4h-8a2 2 0 1 1 0-4h8Zm18 0a2 2 0 1 1 0 4h-8a2 2 0 1 1 0-4h8Zm18 0a2 2 0 1 1 0 4h-8a2 2 0 1 1 0-4h8Z",
                        fill: "#BFC4CB",
                        fillRule: "nonzero",
                        mask: "url(#illustration-main-dnd_svg__b)",
                        transform: "matrix(1 0 0 -1 0 264)"
                    }, void 0),
                    jsxRuntime.jsxs("g", Object.assign({
                        mask: "url(#illustration-main-dnd_svg__b)"
                    }, {
                        children: [
                            jsxRuntime.jsx("path", {
                                d: "M81 147h99a5 5 0 0 1 5 5v41a5 5 0 0 1-5 5H81a5 5 0 0 1-5-5v-41a5 5 0 0 1 5-5Z",
                                fill: "#E1E4E7"
                            }, void 0),
                            jsxRuntime.jsx("path", {
                                d: "M91 137h99a5 5 0 0 1 5 5v41a5 5 0 0 1-5 5H91a5 5 0 0 1-5-5v-41a5 5 0 0 1 5-5Z",
                                fill: "#0C9"
                            }, void 0)
                        ]
                    }), void 0),
                    jsxRuntime.jsx("g", Object.assign({
                        mask: "url(#illustration-main-dnd_svg__b)"
                    }, {
                        children: jsxRuntime.jsxs("g", Object.assign({
                            transform: "translate(95.677 149.761)"
                        }, {
                            children: [
                                jsxRuntime.jsx("path", {
                                    d: "M31.848 0c4.542 0 8.23 3.54 8.285 7.925h.075v64.198H23.636V9.1a7.847 7.847 0 0 1-.074-1.075c0-4.432 3.71-8.025 8.286-8.025Z",
                                    fill: "#A76553"
                                }, void 0),
                                jsxRuntime.jsx("path", {
                                    d: "M47.848 27c4.542 0 8.23 3.54 8.285 7.925h.075v64.198H39.636V36.1a7.847 7.847 0 0 1-.074-1.075c0-4.432 3.71-8.025 8.286-8.025Z",
                                    fill: "#A76553"
                                }, void 0),
                                jsxRuntime.jsx("path", {
                                    d: "M7.927 45.408c4.24-1.627 8.952.355 10.575 4.43l.07-.026 22.006 47.934-15.47 5.938L3.86 57.405a7.811 7.811 0 0 1-.794-1.535c-1.588-4.138.588-8.822 4.86-10.462ZM63.848 31c4.542 0 8.23 3.54 8.285 7.925h.075v64.198H55.636V40.1a7.847 7.847 0 0 1-.074-1.075c0-4.432 3.71-8.025 8.286-8.025Z",
                                    fill: "#A76553"
                                }, void 0),
                                jsxRuntime.jsx("path", {
                                    d: "M79.848 35c4.542 0 8.23 3.54 8.285 7.925h.075v64.198H71.636V44.1a7.847 7.847 0 0 1-.074-1.075c0-4.432 3.71-8.025 8.286-8.025Z",
                                    fill: "#A76553"
                                }, void 0),
                                jsxRuntime.jsx("circle", {
                                    fill: "#A76553",
                                    transform: "matrix(0 1 1 0 -40.739 40.739)",
                                    cx: 44,
                                    cy: 84.739,
                                    r: 27
                                }, void 0),
                                jsxRuntime.jsx("path", {
                                    fill: "#A76553",
                                    d: "M35.043 64.961v82h53v-82z"
                                }, void 0),
                                jsxRuntime.jsx("path", {
                                    d: "M72.323 38.239a2 2 0 0 1 1.995 1.85l.005.15v34a2 2 0 0 1-3.994.15l-.006-.15v-34a2 2 0 0 1 2-2ZM56.323 34.239a2 2 0 0 1 1.995 1.85l.005.15v34a2 2 0 0 1-3.994.15l-.006-.15v-34a2 2 0 0 1 2-2ZM39.323 30.239a2 2 0 0 1 1.995 1.85l.005.15v34a2 2 0 0 1-3.994.15l-.006-.15v-34a2 2 0 0 1 2-2Z",
                                    fill: "#6D281B",
                                    fillRule: "nonzero"
                                }, void 0)
                            ]
                        }), void 0)
                    }), void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$c = /*#__PURE__*/ react.forwardRef(SvgIllustrationMainDnd);

const SvgIllustrationMainMap = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        xmlnsXlink: "http://www.w3.org/1999/xlink",
        viewBox: "0 0 250 250",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("defs", {
                children: jsxRuntime.jsx("circle", {
                    id: "illustration-main-map_svg__a",
                    cx: 125,
                    cy: 125,
                    r: 125
                }, void 0)
            }, void 0),
            jsxRuntime.jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd"
            }, {
                children: [
                    jsxRuntime.jsx("mask", Object.assign({
                        id: "illustration-main-map_svg__b",
                        fill: "#fff"
                    }, {
                        children: jsxRuntime.jsx("use", {
                            xlinkHref: "#illustration-main-map_svg__a"
                        }, void 0)
                    }), void 0),
                    jsxRuntime.jsx("use", {
                        fillOpacity: 0.16,
                        fill: "#177CF9",
                        xlinkHref: "#illustration-main-map_svg__a"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M268.856 251H-19.667c-6.66 0-11.543-6.235-10.069-12.703l23.244-102.28 6.35-27.942C.932 103.352 5.107 100 9.927 100h229.335c4.82 0 8.993 3.352 10.07 8.075 15.083 66.373 14.104 62.068 29.59 130.222.703 3.082-3.417 12.703-10.066 12.703Z",
                        fill: "#D8F7EF",
                        mask: "url(#illustration-main-map_svg__b)"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "m274 214.982-4.756-20.78H208.37l-5.559-37.403h57.878l-4.753-20.781h-56.217L194.362 100H173.34l5.357 36.018H69.302L74.662 100H53.637l-5.36 36.018H-7.936l-4.756 20.78h57.88l-5.56 37.403h-60.872L-26 214.982h62.538L31.178 251h21.024l5.36-36.018h132.876l5.36 36.018h21.021l-5.357-36.018H274Zm-213.349-20.78 5.561-37.403h115.576l5.558 37.402H60.651Z",
                        fill: "#0C9",
                        fillRule: "nonzero",
                        mask: "url(#illustration-main-map_svg__b)"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M125 28c-23.195 0-42 19.736-42 44.087 0 20.34 29.315 76.22 38.963 94.057 1.34 2.475 4.735 2.475 6.074 0C137.685 148.306 167 92.427 167 72.087 167 47.737 148.194 28 125 28Zm0 59.8c-9.532 0-17.26-8.11-17.26-18.116 0-10.008 7.728-18.12 17.26-18.12 9.532 0 17.26 8.112 17.26 18.12 0 10.006-7.728 18.117-17.26 18.117Z",
                        fill: "#FF5A5F",
                        fillRule: "nonzero",
                        mask: "url(#illustration-main-map_svg__b)"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$b = /*#__PURE__*/ react.forwardRef(SvgIllustrationMainMap);

const SvgIllustrationMainPayment = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        xmlnsXlink: "http://www.w3.org/1999/xlink",
        viewBox: "0 0 250 250",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("defs", {
                children: [
                    jsxRuntime.jsx("circle", {
                        id: "illustration-main-payment_svg__a",
                        cx: 125,
                        cy: 125,
                        r: 125
                    }, void 0),
                    jsxRuntime.jsx("circle", {
                        id: "illustration-main-payment_svg__b",
                        cx: 125,
                        cy: 125,
                        r: 125
                    }, void 0)
                ]
            }, void 0),
            jsxRuntime.jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd"
            }, {
                children: [
                    jsxRuntime.jsx("use", {
                        fill: "#FFF",
                        xlinkHref: "#illustration-main-payment_svg__a"
                    }, void 0),
                    jsxRuntime.jsx("mask", Object.assign({
                        id: "illustration-main-payment_svg__c",
                        fill: "#fff"
                    }, {
                        children: jsxRuntime.jsx("use", {
                            xlinkHref: "#illustration-main-payment_svg__b"
                        }, void 0)
                    }), void 0),
                    jsxRuntime.jsx("use", {
                        fill: "#177CF9",
                        opacity: 0.15,
                        xlinkHref: "#illustration-main-payment_svg__b"
                    }, void 0),
                    jsxRuntime.jsxs("g", Object.assign({
                        mask: "url(#illustration-main-payment_svg__c)"
                    }, {
                        children: [
                            jsxRuntime.jsxs("g", Object.assign({
                                transform: "translate(34 114)"
                            }, {
                                children: [
                                    jsxRuntime.jsxs("g", Object.assign({
                                        fill: "#6D281B"
                                    }, {
                                        children: [
                                            jsxRuntime.jsx("path", {
                                                d: "M52 21.145h19v22H52z"
                                            }, void 0),
                                            jsxRuntime.jsxs("g", Object.assign({
                                                transform: "translate(27 32.5)"
                                            }, {
                                                children: [
                                                    jsxRuntime.jsxs("g", Object.assign({
                                                        transform: "translate(0 12)"
                                                    }, {
                                                        children: [
                                                            jsxRuntime.jsx("path", {
                                                                d: "M6 0h28v10H6z"
                                                            }, void 0),
                                                            jsxRuntime.jsx("circle", {
                                                                cx: 5,
                                                                cy: 5,
                                                                r: 5
                                                            }, void 0)
                                                        ]
                                                    }), void 0),
                                                    jsxRuntime.jsx("circle", {
                                                        cx: 32.999,
                                                        cy: 10.999,
                                                        r: 10.999
                                                    }, void 0)
                                                ]
                                            }), void 0),
                                            jsxRuntime.jsxs("g", Object.assign({
                                                transform: "translate(17 34)"
                                            }, {
                                                children: [
                                                    jsxRuntime.jsx("path", {
                                                        d: "M5 0h40v10H5z"
                                                    }, void 0),
                                                    jsxRuntime.jsx("circle", {
                                                        cx: 5,
                                                        cy: 5,
                                                        r: 5
                                                    }, void 0)
                                                ]
                                            }), void 0)
                                        ]
                                    }), void 0),
                                    jsxRuntime.jsx("path", {
                                        d: "M57.057 10.012v-4.87A4.63 4.63 0 0 0 52.43.515H6.143a4.63 4.63 0 0 0-4.629 4.629v27.771a4.628 4.628 0 0 0 4.629 4.629h46.286a4.628 4.628 0 0 0 4.628-4.629V30.41",
                                        fill: "#0C9"
                                    }, void 0),
                                    jsxRuntime.jsx("path", {
                                        d: "M1.514 12H48.5",
                                        stroke: "#FFF",
                                        strokeWidth: 3,
                                        strokeLinejoin: "round"
                                    }, void 0),
                                    jsxRuntime.jsx("path", {
                                        d: "M8.686 21h9.257",
                                        stroke: "#FFF",
                                        strokeWidth: 3,
                                        strokeLinecap: "round",
                                        strokeLinejoin: "round"
                                    }, void 0),
                                    jsxRuntime.jsx("path", {
                                        fill: "#A76553",
                                        d: "M41 10h19.591v12H41z"
                                    }, void 0),
                                    jsxRuntime.jsx("circle", {
                                        fill: "#A76553",
                                        cx: 41,
                                        cy: 16,
                                        r: 6
                                    }, void 0),
                                    jsxRuntime.jsx("circle", {
                                        fill: "#A76553",
                                        cx: 60.037,
                                        cy: 20.961,
                                        r: 10.961
                                    }, void 0)
                                ]
                            }), void 0),
                            jsxRuntime.jsx("path", {
                                d: "M100.057 190.176V90.912c0-6.576 5.177-11.912 11.557-11.912h138.681c6.38 0 11.557 5.336 11.557 11.912v99.264",
                                fill: "#FFF"
                            }, void 0),
                            jsxRuntime.jsx("path", {
                                fill: "#FD819C",
                                d: "M251.928 190.065H111.277V91.87h140.651z"
                            }, void 0),
                            jsxRuntime.jsx("path", {
                                d: "M68 190V197c0 4.282 7.077 7.742 11.33 7.742h202.887c4.26 0 11.33-3.46 11.33-7.742V190H68Z",
                                fill: "#FFF"
                            }, void 0),
                            jsxRuntime.jsx("path", {
                                d: "M206.48 142.116c0 13.879-11.22 25.127-25.059 25.127-13.841 0-25.06-11.248-25.06-25.127 0-13.88 11.219-25.128 25.06-25.128 13.84 0 25.06 11.249 25.06 25.128Z",
                                fill: "#177CF9"
                            }, void 0),
                            jsxRuntime.jsx("path", {
                                fill: "#FFF",
                                d: "M175.628 152.123v-19.665l16.706 9.832z"
                            }, void 0),
                            jsxRuntime.jsxs("g", Object.assign({
                                transform: "translate(126 37)"
                            }, {
                                children: [
                                    jsxRuntime.jsx("path", {
                                        d: "M59.978 14.956C59.978 6.833 53.393.25 45.268.25c-8.124 0-14.712 6.584-14.712 14.707v9.696",
                                        stroke: "#F8E080",
                                        strokeWidth: 6,
                                        strokeLinecap: "round",
                                        strokeLinejoin: "round"
                                    }, void 0),
                                    jsxRuntime.jsx("path", {
                                        d: "M45.47 35.696C45.47 29.789 40.68 25 34.77 25H10.699C4.79 25 0 29.79 0 35.696V51.74c0 5.907 4.79 10.696 10.699 10.696H34.77c5.908 0 10.699-4.79 10.699-10.696V35.696Z",
                                        fill: "#48418B"
                                    }, void 0),
                                    jsxRuntime.jsx("ellipse", {
                                        fill: "#FFF",
                                        cx: 22.349,
                                        cy: 44.348,
                                        rx: 5.349,
                                        ry: 5.348
                                    }, void 0)
                                ]
                            }), void 0)
                        ]
                    }), void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$a = /*#__PURE__*/ react.forwardRef(SvgIllustrationMainPayment);

const SvgIllustrationMainQuizTier1 = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        xmlnsXlink: "http://www.w3.org/1999/xlink",
        viewBox: "0 0 250 250",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("defs", {
                children: jsxRuntime.jsx("circle", {
                    id: "illustration-main-quiz-tier-1_svg__a",
                    cx: 125,
                    cy: 125,
                    r: 125
                }, void 0)
            }, void 0),
            jsxRuntime.jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd"
            }, {
                children: [
                    jsxRuntime.jsx("mask", Object.assign({
                        id: "illustration-main-quiz-tier-1_svg__b",
                        fill: "#fff"
                    }, {
                        children: jsxRuntime.jsx("use", {
                            xlinkHref: "#illustration-main-quiz-tier-1_svg__a"
                        }, void 0)
                    }), void 0),
                    jsxRuntime.jsx("use", {
                        fill: "#D9E9FC",
                        xlinkHref: "#illustration-main-quiz-tier-1_svg__a"
                    }, void 0),
                    jsxRuntime.jsx("rect", {
                        fill: "#F8FAFB",
                        fillRule: "nonzero",
                        mask: "url(#illustration-main-quiz-tier-1_svg__b)",
                        x: 38.5,
                        y: 65,
                        width: 172.5,
                        height: 227.5,
                        rx: 2
                    }, void 0),
                    jsxRuntime.jsx("rect", {
                        fill: "#177CF9",
                        fillRule: "nonzero",
                        mask: "url(#illustration-main-quiz-tier-1_svg__b)",
                        x: 32.5,
                        y: 80,
                        width: 185,
                        height: 232.5,
                        rx: 2
                    }, void 0),
                    jsxRuntime.jsx("g", Object.assign({
                        fill: "#FFF",
                        fillRule: "nonzero"
                    }, {
                        children: jsxRuntime.jsx("path", {
                            d: "m73.13 141.604 5.353-6.658a2.555 2.555 0 0 1 3.542-.417 2.48 2.48 0 0 1 .426 3.526l-7.113 8.845a2.555 2.555 0 0 1-3.767.221l-3.822-3.74c-.999-.979-.999-2.574 0-3.552a2.556 2.556 0 0 1 3.567 0l1.813 1.775ZM73.13 167.604l5.353-6.658a2.555 2.555 0 0 1 3.542-.417 2.48 2.48 0 0 1 .426 3.526l-7.113 8.845a2.555 2.555 0 0 1-3.767.221l-3.822-3.74c-.999-.979-.999-2.574 0-3.552a2.556 2.556 0 0 1 3.567 0l1.813 1.775ZM73.13 193.604l5.353-6.658a2.555 2.555 0 0 1 3.542-.417 2.48 2.48 0 0 1 .426 3.526l-7.113 8.845a2.555 2.555 0 0 1-3.767.221l-3.822-3.74c-.999-.979-.999-2.574 0-3.552a2.556 2.556 0 0 1 3.567 0l1.813 1.775ZM98.5 136.72h80a5 5 0 1 1 0 10h-80a5 5 0 0 1 0-10ZM98.5 162.72h80a5 5 0 1 1 0 10h-80a5 5 0 0 1 0-10ZM98.5 188.72h80a5 5 0 1 1 0 10h-80a5 5 0 0 1 0-10Z"
                        }, void 0)
                    }), void 0),
                    jsxRuntime.jsx("ellipse", {
                        fill: "#FED86F",
                        fillRule: "nonzero",
                        cx: 125,
                        cy: 79.5,
                        rx: 35,
                        ry: 34.5
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M121.156 91.47c.107 1.539 1.466 2.56 3.004 2.452 1.538-.107 2.7-1.305 2.592-2.843-.108-1.537-1.427-2.604-2.965-2.497-1.538.108-2.739 1.35-2.631 2.889Zm-.868-19.77c-.136.996-1.042 1.692-2 1.545l-.126-.023c-.997-.145-1.624-1.132-1.48-2.13.51-4.37 3.746-7.215 7.719-7.493 4.613-.323 8.98 2.591 9.34 7.718.283 4.057-2.173 7.195-5.382 8.427l-.577.214c-1.67.644-2.455 1.31-2.443 3.193l.002.644c.071 1.025-.72 1.982-1.788 2.056-1.025.072-1.942-.765-2.014-1.79l-.045-.641c-.283-4.056 1.934-5.86 5.045-7.112l.204-.08c1.759-.639 3.336-2.638 3.196-4.646-.195-2.776-2.752-4.357-5.272-4.181-2.179.152-4.082 1.788-4.379 4.298Z",
                        stroke: "#FFF",
                        fill: "#FFF",
                        fillRule: "nonzero"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$9 = /*#__PURE__*/ react.forwardRef(SvgIllustrationMainQuizTier1);

const SvgIllustrationMainQuizTier2 = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        xmlnsXlink: "http://www.w3.org/1999/xlink",
        viewBox: "0 0 250 250",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("defs", {
                children: jsxRuntime.jsx("circle", {
                    id: "illustration-main-quiz-tier-2_svg__a",
                    cx: 125,
                    cy: 125,
                    r: 125
                }, void 0)
            }, void 0),
            jsxRuntime.jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd"
            }, {
                children: [
                    jsxRuntime.jsx("mask", Object.assign({
                        id: "illustration-main-quiz-tier-2_svg__b",
                        fill: "#fff"
                    }, {
                        children: jsxRuntime.jsx("use", {
                            xlinkHref: "#illustration-main-quiz-tier-2_svg__a"
                        }, void 0)
                    }), void 0),
                    jsxRuntime.jsx("use", {
                        fill: "#D9E9FC",
                        xlinkHref: "#illustration-main-quiz-tier-2_svg__a"
                    }, void 0),
                    jsxRuntime.jsx("rect", {
                        fill: "#E988A3",
                        fillRule: "nonzero",
                        mask: "url(#illustration-main-quiz-tier-2_svg__b)",
                        x: 38.5,
                        y: 65,
                        width: 172.5,
                        height: 227.5,
                        rx: 2
                    }, void 0),
                    jsxRuntime.jsx("rect", {
                        fill: "#F8FAFB",
                        fillRule: "nonzero",
                        mask: "url(#illustration-main-quiz-tier-2_svg__b)",
                        x: 32.5,
                        y: 80,
                        width: 185,
                        height: 232.5,
                        rx: 2
                    }, void 0),
                    jsxRuntime.jsx("ellipse", {
                        fill: "#FED86F",
                        fillRule: "nonzero",
                        cx: 125,
                        cy: 79.5,
                        rx: 35,
                        ry: 34.5
                    }, void 0),
                    jsxRuntime.jsx("g", Object.assign({
                        fill: "#177CF9",
                        fillRule: "nonzero"
                    }, {
                        children: jsxRuntime.jsx("path", {
                            d: "M72 164h105.5a5 5 0 1 1 0 10H72a5 5 0 0 1 0-10ZM72 137h105.5a5 5 0 1 1 0 10H72a5 5 0 1 1 0-10ZM72 191h55.5a5 5 0 0 1 0 10H72a5 5 0 0 1 0-10Z"
                        }, void 0)
                    }), void 0),
                    jsxRuntime.jsx("path", {
                        d: "m113.315 84.184 6.504 6.504-7.998 3.217c-1.082.435-2.157-.64-1.722-1.722l3.216-7.999Zm13.718-14.288 6.834 7.314-11.891 11.891-7.074-7.074 12.131-12.131Zm7.38-5.508 5.203 5.202a1.324 1.324 0 0 1 0 1.872l-3.876 3.875-6.834-7.314 3.636-3.635a1.324 1.324 0 0 1 1.872 0Z",
                        fill: "#FFF",
                        fillRule: "nonzero"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$8 = /*#__PURE__*/ react.forwardRef(SvgIllustrationMainQuizTier2);

const SvgIllustrationMainQuizTier3 = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        xmlnsXlink: "http://www.w3.org/1999/xlink",
        viewBox: "0 0 250 250",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("defs", {
                children: jsxRuntime.jsx("circle", {
                    id: "illustration-main-quiz-tier-3_svg__a",
                    cx: 125,
                    cy: 125,
                    r: 125
                }, void 0)
            }, void 0),
            jsxRuntime.jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd"
            }, {
                children: [
                    jsxRuntime.jsx("mask", Object.assign({
                        id: "illustration-main-quiz-tier-3_svg__b",
                        fill: "#fff"
                    }, {
                        children: jsxRuntime.jsx("use", {
                            xlinkHref: "#illustration-main-quiz-tier-3_svg__a"
                        }, void 0)
                    }), void 0),
                    jsxRuntime.jsx("use", {
                        fill: "#D9E9FC",
                        xlinkHref: "#illustration-main-quiz-tier-3_svg__a"
                    }, void 0),
                    jsxRuntime.jsx("rect", {
                        fill: "#177CF9",
                        fillRule: "nonzero",
                        mask: "url(#illustration-main-quiz-tier-3_svg__b)",
                        x: 38.5,
                        y: 65,
                        width: 172.5,
                        height: 227.5,
                        rx: 2
                    }, void 0),
                    jsxRuntime.jsx("rect", {
                        fill: "#F8FAFB",
                        fillRule: "nonzero",
                        mask: "url(#illustration-main-quiz-tier-3_svg__b)",
                        x: 32.5,
                        y: 80,
                        width: 185,
                        height: 232.5,
                        rx: 2
                    }, void 0),
                    jsxRuntime.jsx("ellipse", {
                        fill: "#FED86F",
                        fillRule: "nonzero",
                        cx: 125,
                        cy: 79.5,
                        rx: 35,
                        ry: 34.5
                    }, void 0),
                    jsxRuntime.jsx("g", Object.assign({
                        fill: "#BFC4CB",
                        fillRule: "nonzero"
                    }, {
                        children: jsxRuntime.jsx("path", {
                            d: "M73 133h102.5a5 5 0 1 1 0 10H73a5 5 0 1 1 0-10ZM73 159h102.5a5 5 0 1 1 0 10H73a5 5 0 0 1 0-10ZM73 185h65.5a5 5 0 0 1 0 10H73a5 5 0 0 1 0-10ZM73 211h47.5a5 5 0 0 1 0 10H73a5 5 0 0 1 0-10Z"
                        }, void 0)
                    }), void 0),
                    jsxRuntime.jsx("path", {
                        d: "m151.758 211.875 7.37 7.37-9.064 3.647c-1.226.493-2.445-.726-1.952-1.952l3.646-9.065Zm15.546-16.193 7.746 8.289-13.477 13.477-8.017-8.017 13.748-13.749Zm8.365-6.243 5.896 5.896a1.5 1.5 0 0 1 0 2.122l-4.393 4.391-7.745-8.288 4.12-4.12a1.5 1.5 0 0 1 2.122 0Z",
                        fill: "#E988A3",
                        fillRule: "nonzero"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        stroke: "#FED86F",
                        strokeWidth: 2,
                        fill: "#FED86F",
                        strokeLinecap: "round",
                        strokeLinejoin: "round",
                        d: "m158.504 219.643-10 2.857 2.857-10z"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M132.77 71.056c.966-1.201 2.743-1.408 3.97-.463a2.728 2.728 0 0 1 .473 3.885l-13.117 16.313c-1.048 1.302-3.022 1.417-4.22.245l-7.048-6.9a2.726 2.726 0 0 1 0-3.912 2.87 2.87 0 0 1 3.998 0l4.797 4.695 11.147-13.863Z",
                        stroke: "#FFF",
                        fill: "#FFF",
                        fillRule: "nonzero"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$7 = /*#__PURE__*/ react.forwardRef(SvgIllustrationMainQuizTier3);

const SvgIllustrationMainQuizTier5 = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        xmlnsXlink: "http://www.w3.org/1999/xlink",
        viewBox: "0 0 250 250",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("defs", {
                children: jsxRuntime.jsx("circle", {
                    id: "illustration-main-quiz-tier-5_svg__a",
                    cx: 125,
                    cy: 125,
                    r: 125
                }, void 0)
            }, void 0),
            jsxRuntime.jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd"
            }, {
                children: [
                    jsxRuntime.jsx("mask", Object.assign({
                        id: "illustration-main-quiz-tier-5_svg__b",
                        fill: "#fff"
                    }, {
                        children: jsxRuntime.jsx("use", {
                            xlinkHref: "#illustration-main-quiz-tier-5_svg__a"
                        }, void 0)
                    }), void 0),
                    jsxRuntime.jsx("use", {
                        fill: "#D9E9FC",
                        xlinkHref: "#illustration-main-quiz-tier-5_svg__a"
                    }, void 0),
                    jsxRuntime.jsx("rect", {
                        fill: "#177CF9",
                        fillRule: "nonzero",
                        mask: "url(#illustration-main-quiz-tier-5_svg__b)",
                        x: 38.5,
                        y: 65,
                        width: 172.5,
                        height: 227.5,
                        rx: 2
                    }, void 0),
                    jsxRuntime.jsx("rect", {
                        fill: "#F8FAFB",
                        fillRule: "nonzero",
                        mask: "url(#illustration-main-quiz-tier-5_svg__b)",
                        x: 32.5,
                        y: 80,
                        width: 185,
                        height: 232.5,
                        rx: 2
                    }, void 0),
                    jsxRuntime.jsx("ellipse", {
                        fill: "#FED86F",
                        fillRule: "nonzero",
                        cx: 125,
                        cy: 79.5,
                        rx: 35,
                        ry: 34.5
                    }, void 0),
                    jsxRuntime.jsx("g", Object.assign({
                        fill: "#FFF",
                        fillRule: "nonzero"
                    }, {
                        children: jsxRuntime.jsx("path", {
                            d: "M125.003 63c-6.996 0-12.667 5.672-12.667 12.667 0 6.996 5.67 12.666 12.667 12.666 6.996 0 12.666-5.67 12.666-12.666C137.67 68.672 132 63 125.003 63Zm6.413 10.524-2.987 2.387 1.214 4.24a.681.681 0 0 1-.242.72.683.683 0 0 1-.758.026L125 78.617l-3.64 2.28a.683.683 0 0 1-.758-.026.684.684 0 0 1-.242-.72l1.214-4.24-2.987-2.387a.674.674 0 0 1-.213-.747.663.663 0 0 1 .628-.44h3.586l1.828-3.638c.212-.455.959-.455 1.187 0l1.813 3.638h3.586c.28 0 .533.174.626.44a.676.676 0 0 1-.213.747ZM120.572 89.936a14.056 14.056 0 0 1-7.46-5.913l-4.021 6.952c-.284.493.142 1.089.689.99l4.587-.774 1.598 4.37a.653.653 0 0 0 1.182.114l3.425-5.739ZM129.433 89.936a14.056 14.056 0 0 0 7.46-5.913l4.022 6.952c.284.493-.143 1.089-.69.99l-4.585-.774-1.599 4.37a.653.653 0 0 1-1.181.114l-3.427-5.739Z"
                        }, void 0)
                    }), void 0),
                    jsxRuntime.jsxs("g", Object.assign({
                        fillRule: "nonzero"
                    }, {
                        children: [
                            jsxRuntime.jsx("path", {
                                d: "M92.5 141h83a5 5 0 1 1 0 10h-83a5 5 0 0 1 0-10ZM92.5 167h83a5 5 0 1 1 0 10h-83a5 5 0 0 1 0-10Z",
                                fill: "#BFC4CB"
                            }, void 0),
                            jsxRuntime.jsx("path", {
                                d: "M73 141a5 5 0 1 1 0 10 5 5 0 0 1 0-10ZM73 167a5 5 0 1 1 0 10 5 5 0 0 1 0-10Z",
                                fill: "#E988A3"
                            }, void 0),
                            jsxRuntime.jsx("path", {
                                d: "M92.5 193h83a5 5 0 1 1 0 10h-83a5 5 0 0 1 0-10Z",
                                fill: "#BFC4CB"
                            }, void 0),
                            jsxRuntime.jsx("path", {
                                d: "M73 193a5 5 0 1 1 0 10 5 5 0 0 1 0-10Z",
                                fill: "#E988A3"
                            }, void 0)
                        ]
                    }), void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$6 = /*#__PURE__*/ react.forwardRef(SvgIllustrationMainQuizTier5);

const SvgIllustrationMainRevision = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        xmlnsXlink: "http://www.w3.org/1999/xlink",
        viewBox: "0 0 250 250",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("defs", {
                children: jsxRuntime.jsx("circle", {
                    id: "illustration-main-revision_svg__a",
                    cx: 125,
                    cy: 125,
                    r: 125
                }, void 0)
            }, void 0),
            jsxRuntime.jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd"
            }, {
                children: [
                    jsxRuntime.jsx("mask", Object.assign({
                        id: "illustration-main-revision_svg__b",
                        fill: "#fff"
                    }, {
                        children: jsxRuntime.jsx("use", {
                            xlinkHref: "#illustration-main-revision_svg__a"
                        }, void 0)
                    }), void 0),
                    jsxRuntime.jsx("use", {
                        fill: "#D9E9FC",
                        xlinkHref: "#illustration-main-revision_svg__a"
                    }, void 0),
                    jsxRuntime.jsx("rect", {
                        fill: "#177CF9",
                        fillRule: "nonzero",
                        mask: "url(#illustration-main-revision_svg__b)",
                        x: 38.5,
                        y: 65,
                        width: 172.5,
                        height: 227.5,
                        rx: 2
                    }, void 0),
                    jsxRuntime.jsx("rect", {
                        fill: "#F8FAFB",
                        fillRule: "nonzero",
                        mask: "url(#illustration-main-revision_svg__b)",
                        x: 32.5,
                        y: 80,
                        width: 185,
                        height: 232.5,
                        rx: 2
                    }, void 0),
                    jsxRuntime.jsx("ellipse", {
                        fill: "#FED86F",
                        fillRule: "nonzero",
                        cx: 125,
                        cy: 79.5,
                        rx: 35,
                        ry: 34.5
                    }, void 0),
                    jsxRuntime.jsxs("g", Object.assign({
                        fillRule: "nonzero"
                    }, {
                        children: [
                            jsxRuntime.jsx("path", {
                                d: "M92.5 133h83a5 5 0 1 1 0 10h-83a5 5 0 0 1 0-10ZM92.5 159h83a5 5 0 1 1 0 10h-83a5 5 0 0 1 0-10Z",
                                fill: "#BFC4CB"
                            }, void 0),
                            jsxRuntime.jsx("path", {
                                d: "M73 133h.5a5 5 0 1 1 0 10H73a5 5 0 1 1 0-10ZM73 159h.5a5 5 0 0 1 0 10H73a5 5 0 0 1 0-10Z",
                                fill: "#0C9"
                            }, void 0),
                            jsxRuntime.jsx("path", {
                                d: "M73 188h65.5a5 5 0 0 1 0 10H73a5 5 0 0 1 0-10ZM73 211h47.5a5 5 0 0 1 0 10H73a5 5 0 0 1 0-10Z",
                                fill: "#BFC4CB"
                            }, void 0)
                        ]
                    }), void 0),
                    jsxRuntime.jsx("path", {
                        d: "m151.758 211.875 7.37 7.37-9.064 3.647c-1.226.493-2.445-.726-1.952-1.952l3.646-9.065Zm15.546-16.193 7.746 8.289-13.477 13.477-8.017-8.017 13.748-13.749Zm8.365-6.243 5.896 5.896a1.5 1.5 0 0 1 0 2.122l-4.393 4.391-7.745-8.288 4.12-4.12a1.5 1.5 0 0 1 2.122 0Z",
                        fill: "#B27CDA",
                        fillRule: "nonzero"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M150.4 212.225a1 1 0 0 1 1.668-.432l7.143 7.143a1 1 0 0 1-.432 1.668l-10 2.858a1 1 0 0 1-1.237-1.237Z",
                        fill: "#FED86F"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M127.087 63a1 1 0 0 1 .993.883l.007.117-.001 3.737.297.078c.874.232 1.605.463 2.222.716l.258.11.098.045 2.677-2.675a1 1 0 0 1 1.219-.152l.101.07.094.083 3.936 3.936a1 1 0 0 1 .084 1.32l-.084.094-2.675 2.672.073.163c.28.643.532 1.418.783 2.356l.094.36H141a1 1 0 0 1 .974.77l.02.113.006.117v4.174a1 1 0 0 1-.883.993l-.117.007-3.735-.001-.079.3c-.234.875-.464 1.606-.717 2.222l-.11.257-.046.098 2.676 2.677a1 1 0 0 1 .152 1.218l-.07.102-.083.094-3.934 3.934a1 1 0 0 1-1.32.084l-.094-.083-2.678-2.676-.097.046c-.584.26-1.278.494-2.112.727l-.367.1-.3.079.001 3.735a1 1 0 0 1-.77.974l-.113.02-.117.006h-4.174a1 1 0 0 1-.993-.883l-.007-.117v-3.736l-.303-.079c-.877-.234-1.607-.464-2.222-.717l-.256-.11-.098-.045-2.674 2.675a1 1 0 0 1-1.218.153l-.102-.07-.094-.082-3.936-3.935a1 1 0 0 1-.083-1.32l.083-.094 2.676-2.677-.045-.098c-.26-.584-.494-1.278-.727-2.113l-.1-.366-.08-.3-3.734.001a1 1 0 0 1-.974-.77l-.02-.113-.006-.117v-4.174a1 1 0 0 1 .883-.993l.117-.007h3.734l.08-.3c.234-.874.464-1.605.717-2.221l.11-.257.045-.099-2.676-2.674a1 1 0 0 1-.152-1.219l.069-.101.083-.094 3.936-3.936a1 1 0 0 1 1.32-.084l.094.083 2.676 2.675.1-.045c.584-.26 1.28-.494 2.114-.726l.663-.178V64a1 1 0 0 1 .77-.974l.113-.02.117-.006h4.174Zm-1.001 2h-2.173v3.519a1 1 0 0 1-.543.89l-.113.05-.11.032-.688.171c-1.43.368-2.458.719-3.089 1.104a1 1 0 0 1-1.135-.063l-.093-.083-2.489-2.488-2.522 2.522 2.489 2.488a1 1 0 0 1 .252.99l-.047.128-.059.11c-.444.728-.843 1.983-1.278 3.778a1 1 0 0 1-.858.759l-.114.006H110v2.173l3.516.001a1 1 0 0 1 .89.542l.049.113.033.11c.435 1.795.834 3.05 1.278 3.778a1 1 0 0 1-.063 1.135l-.083.093-2.489 2.488 2.521 2.52 2.488-2.487a1 1 0 0 1 .993-.252l.127.047.11.059c.728.446 1.975.842 3.778 1.279a1 1 0 0 1 .759.858l.006.114V95h2.173l.001-3.516a1 1 0 0 1 .542-.89l.113-.049.11-.033c1.795-.435 3.049-.834 3.776-1.278a1 1 0 0 1 1.135.063l.093.083 2.49 2.487 2.521-2.521-2.487-2.488a1 1 0 0 1-.252-.991l.047-.127.059-.11c.444-.728.843-1.983 1.278-3.778a1 1 0 0 1 .858-.759l.114-.006 3.516-.001v-2.173h-3.518a1 1 0 0 1-.89-.543l-.049-.113-.033-.11-.17-.686c-.368-1.426-.72-2.46-1.107-3.093a1 1 0 0 1 .065-1.134l.082-.094 2.487-2.486-2.522-2.522-2.488 2.488a1 1 0 0 1-.991.252l-.128-.047-.11-.059c-.728-.444-1.986-.843-3.775-1.275a1 1 0 0 1-.76-.858l-.006-.114-.001-3.519Zm4.048 9.866a7.26 7.26 0 1 1-10.268 10.268 7.26 7.26 0 0 1 10.268-10.268Zm-8.854 1.414a5.26 5.26 0 1 0 7.44 7.44 5.26 5.26 0 0 0-7.44-7.44Z",
                        fill: "#FFF",
                        fillRule: "nonzero"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$5 = /*#__PURE__*/ react.forwardRef(SvgIllustrationMainRevision);

const SvgIllustrationMainSml = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 250 250",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("path", {
                d: "M125 250c69.036 0 125-55.964 125-125S194.036 0 125 0 0 55.964 0 125s55.964 125 125 125Z",
                fill: "#D9E9FC"
            }, void 0),
            jsxRuntime.jsx("mask", Object.assign({
                id: "illustration-main-sml_svg__a",
                style: {
                    maskType: 'alpha'
                },
                maskUnits: "userSpaceOnUse",
                x: 0,
                y: 0,
                width: 250,
                height: 250
            }, {
                children: jsxRuntime.jsx("path", {
                    d: "M125 250c69.036 0 125-55.964 125-125S194.036 0 125 0 0 55.964 0 125s55.964 125 125 125Z",
                    fill: "#fff"
                }, void 0)
            }), void 0),
            jsxRuntime.jsxs("g", Object.assign({
                mask: "url(#illustration-main-sml_svg__a)"
            }, {
                children: [
                    jsxRuntime.jsx("path", {
                        d: "M266.667 47.33H58.333v208.334h208.334V47.331Z",
                        fill: "#F8FAFB"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M266.667 47.33H58.333v24h208.334v-24Z",
                        fill: "#E1E4E7"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M71.692 63.714a3.69 3.69 0 1 0-.001-7.382 3.69 3.69 0 0 0 0 7.382Z",
                        fill: "#FF5A5F"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M83.501 63.714a3.69 3.69 0 1 0 0-7.382 3.69 3.69 0 0 0 0 7.382Z",
                        fill: "#FCB95B"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M95.31 63.714a3.69 3.69 0 1 0 0-7.382 3.69 3.69 0 0 0 0 7.382Z",
                        fill: "#0C9"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M133.333 112.5a4.167 4.167 0 0 1 4.167-4.167h50a4.167 4.167 0 0 1 4.167 4.167v41.667a4.167 4.167 0 0 1-4.167 4.166h-50a4.167 4.167 0 0 1-4.167-4.166V112.5Z",
                        fill: "#FDD9CD"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M200 112.5a4.167 4.167 0 0 1 4.167-4.167h50a4.167 4.167 0 0 1 4.166 4.167v41.667a4.166 4.166 0 0 1-4.166 4.166h-50a4.166 4.166 0 0 1-4.167-4.166V112.5Z",
                        fill: "#FFBDBF"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M66.667 112.5a4.167 4.167 0 0 1 4.166-4.167h50A4.167 4.167 0 0 1 125 112.5v41.667a4.166 4.166 0 0 1-4.167 4.166h-50a4.166 4.166 0 0 1-4.166-4.166V112.5Z",
                        fill: "#0C9"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        fillRule: "evenodd",
                        clipRule: "evenodd",
                        d: "M108.474 122.805a3.123 3.123 0 0 1-.029 4.419l-16.098 15.887-9.14-9.14a3.125 3.125 0 1 1 4.42-4.419l4.749 4.749 11.679-11.525a3.124 3.124 0 0 1 4.419.029Z",
                        fill: "#fff"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        fillRule: "evenodd",
                        clipRule: "evenodd",
                        d: "M110.856 141.422c4.541 0 8.23 3.54 8.285 7.926h.074v64.198h-16.571v-63.024a7.784 7.784 0 0 1-.074-1.075c0-4.432 3.709-8.025 8.286-8.025Z",
                        fill: "#A76553"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        fillRule: "evenodd",
                        clipRule: "evenodd",
                        d: "M126.856 168.422c4.541 0 8.23 3.54 8.285 7.926h.074v64.198h-16.571v-63.024a7.784 7.784 0 0 1-.074-1.075c0-4.432 3.709-8.025 8.286-8.025Z",
                        fill: "#A76553"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        fillRule: "evenodd",
                        clipRule: "evenodd",
                        d: "M86.935 186.831c4.24-1.628 8.951.355 10.575 4.43l.07-.026 22.006 47.933-15.471 5.939-21.246-46.279a7.8 7.8 0 0 1-.794-1.536c-1.588-4.138.587-8.821 4.86-10.461ZM142.856 172.422c4.541 0 8.23 3.54 8.285 7.926h.074v64.198h-16.571v-63.024a7.784 7.784 0 0 1-.074-1.075c0-4.432 3.709-8.025 8.286-8.025Z",
                        fill: "#A76553"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        fillRule: "evenodd",
                        clipRule: "evenodd",
                        d: "M158.856 176.422c4.541 0 8.23 3.54 8.285 7.926h.074v64.198h-16.571v-63.024a7.784 7.784 0 0 1-.074-1.075c0-4.432 3.709-8.025 8.286-8.025Z",
                        fill: "#A76553"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M150.008 226.161c0 14.912-12.089 27-27 27-14.912 0-27-12.088-27-27s12.088-27 27-27c14.911 0 27 12.088 27 27Z",
                        fill: "#A76553"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M114.051 288.384v-82h53v82h-53Z",
                        fill: "#A76553"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M151.331 179.661a2 2 0 0 1 1.994 1.851l.006.149v34a2 2 0 0 1-3.995.149l-.005-.149v-34a2 2 0 0 1 2-2ZM135.331 175.661a2 2 0 0 1 1.994 1.851l.006.149v34a2 2 0 0 1-3.995.149l-.005-.149v-34a2 2 0 0 1 2-2ZM118.331 171.661a2 2 0 0 1 1.994 1.851l.006.149v34a2 2 0 0 1-3.995.149l-.005-.149v-34a2 2 0 0 1 2-2Z",
                        fill: "#6D281B"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$4 = /*#__PURE__*/ react.forwardRef(SvgIllustrationMainSml);

const SvgIllustrationMainWriting = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        xmlnsXlink: "http://www.w3.org/1999/xlink",
        viewBox: "0 0 250 250",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("defs", {
                children: jsxRuntime.jsx("circle", {
                    id: "illustration-main-writing_svg__a",
                    cx: 125,
                    cy: 125,
                    r: 125
                }, void 0)
            }, void 0),
            jsxRuntime.jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd"
            }, {
                children: [
                    jsxRuntime.jsx("circle", {
                        cx: 125,
                        cy: 125,
                        r: 125,
                        fill: "#D9E9FC",
                        fillRule: "nonzero"
                    }, void 0),
                    jsxRuntime.jsx("mask", Object.assign({
                        id: "illustration-main-writing_svg__b",
                        fill: "#fff"
                    }, {
                        children: jsxRuntime.jsx("use", {
                            xlinkHref: "#illustration-main-writing_svg__a"
                        }, void 0)
                    }), void 0),
                    jsxRuntime.jsx("g", Object.assign({
                        mask: "url(#illustration-main-writing_svg__b)",
                        fillRule: "nonzero"
                    }, {
                        children: jsxRuntime.jsxs("g", Object.assign({
                            transform: "translate(32.5 62.5)"
                        }, {
                            children: [
                                jsxRuntime.jsx("rect", {
                                    fill: "#177CF9",
                                    x: 11.25,
                                    width: 162.5,
                                    height: 227.5,
                                    rx: 2
                                }, void 0),
                                jsxRuntime.jsx("rect", {
                                    fill: "#F8FAFB",
                                    y: 17.5,
                                    width: 185,
                                    height: 232.5,
                                    rx: 2
                                }, void 0)
                            ]
                        }), void 0)
                    }), void 0),
                    jsxRuntime.jsx("path", {
                        d: "M72.5 147.5H175a5 5 0 1 1 0 10H72.5a5 5 0 1 1 0-10ZM72.5 177.5H175a5 5 0 1 1 0 10H72.5a5 5 0 1 1 0-10ZM72.5 206.5h102.861a5 5 0 1 1 0 10H72.5a5 5 0 1 1 0-10Z",
                        fill: "#BFC4CB",
                        fillRule: "nonzero"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        fill: "#E988A3",
                        fillRule: "nonzero",
                        d: "M107.722 116.365 77.5 125l8.635-30.222L150.913 30 172.5 51.587z"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        stroke: "#FED86F",
                        fill: "#FED86F",
                        strokeLinecap: "round",
                        strokeLinejoin: "round",
                        d: "M107.5 116.429 77.5 125l8.571-30z"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "m138.703 43.72 19.456 19.458",
                        stroke: "#FFF",
                        strokeWidth: 4,
                        strokeLinecap: "square"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$3 = /*#__PURE__*/ react.forwardRef(SvgIllustrationMainWriting);

const SvgIllustrationRegionUk = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 84 66",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd"
            }, {
                children: [
                    jsxRuntime.jsx("path", {
                        d: "M76.144 8.067c-1.096-.227-2.254.136-2.825.884l-9.04 11.827H50.65L44.318 9.18C43.928 8.466 43.014 8 42 8s-1.929.466-2.319 1.18L33.35 20.778H19.72l-9.04-11.827c-.572-.748-1.73-1.11-2.825-.884C6.76 8.293 6 9.05 6 9.917v42.166C6 53.142 7.125 54 8.512 54h66.976C76.876 54 78 53.142 78 52.083V9.917c0-.866-.761-1.624-1.856-1.85Z",
                        fill: "#FED86F",
                        fillRule: "nonzero"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M42 0c-3.308 0-6 2.691-6 6s2.691 6 6 6 6-2.691 6-6-2.692-6-6-6ZM75 0c-3.308 0-6 2.691-6 6s2.691 6 6 6 6-2.691 6-6-2.692-6-6-6ZM8 0C4.692 0 2 2.691 2 6s2.691 6 6 6 6-2.691 6-6-2.692-6-6-6ZM75.115 52H8.885C3.985 52 0 55.14 0 59s3.986 7 8.885 7h66.23c4.9 0 8.885-3.14 8.885-7s-3.986-7-8.885-7Z",
                        fill: "#FCB95B",
                        fillRule: "nonzero"
                    }, void 0),
                    jsxRuntime.jsxs("g", Object.assign({
                        transform: "translate(14 33)"
                    }, {
                        children: [
                            jsxRuntime.jsx("circle", {
                                fill: "#FCB95B",
                                cx: 3,
                                cy: 5,
                                r: 3
                            }, void 0),
                            jsxRuntime.jsx("circle", {
                                fill: "#FCB95B",
                                cx: 14,
                                cy: 5,
                                r: 3
                            }, void 0),
                            jsxRuntime.jsx("circle", {
                                fill: "#FCB95B",
                                cx: 42,
                                cy: 5,
                                r: 3
                            }, void 0),
                            jsxRuntime.jsx("circle", {
                                fill: "#FCB95B",
                                cx: 53,
                                cy: 5,
                                r: 3
                            }, void 0),
                            jsxRuntime.jsx("circle", {
                                fill: "#FF5A5F",
                                cx: 28,
                                cy: 5,
                                r: 5
                            }, void 0)
                        ]
                    }), void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$2 = /*#__PURE__*/ react.forwardRef(SvgIllustrationRegionUk);

const SvgIllustrationValidationCorrect = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        xmlnsXlink: "http://www.w3.org/1999/xlink",
        viewBox: "0 0 150 150",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("defs", {
                children: jsxRuntime.jsx("circle", {
                    id: "illustration-validation-correct_svg__a",
                    cx: 75,
                    cy: 75,
                    r: 75
                }, void 0)
            }, void 0),
            jsxRuntime.jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd"
            }, {
                children: [
                    jsxRuntime.jsx("use", {
                        fill: "#D8F7EF",
                        xlinkHref: "#illustration-validation-correct_svg__a"
                    }, void 0),
                    jsxRuntime.jsx("path", {
                        d: "M49.136 73.246a2.412 2.412 0 1 0-3.448 3.374l18.143 18.54c.94.96 2.481.968 3.43.018l37.033-37.061a2.412 2.412 0 1 0-3.412-3.41L65.573 90.043 49.136 73.246Z",
                        fill: "#0C9",
                        fillRule: "nonzero"
                    }, void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef$1 = /*#__PURE__*/ react.forwardRef(SvgIllustrationValidationCorrect);

const SvgIllustrationValidationIncorrect = (param, ref)=>{
    let { title , titleId , ...props } = param;
    return jsxRuntime.jsxs("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        xmlnsXlink: "http://www.w3.org/1999/xlink",
        viewBox: "0 0 150 150",
        ref: ref,
        "aria-labelledby": titleId
    }, props, {
        children: [
            title ? jsxRuntime.jsx("title", Object.assign({
                id: titleId
            }, {
                children: title
            }), void 0) : null,
            jsxRuntime.jsx("defs", {
                children: jsxRuntime.jsx("circle", {
                    id: "illustration-validation-incorrect_svg__a",
                    cx: 75,
                    cy: 75,
                    r: 75
                }, void 0)
            }, void 0),
            jsxRuntime.jsxs("g", Object.assign({
                fill: "none",
                fillRule: "evenodd"
            }, {
                children: [
                    jsxRuntime.jsx("mask", Object.assign({
                        id: "illustration-validation-incorrect_svg__b",
                        fill: "#fff"
                    }, {
                        children: jsxRuntime.jsx("use", {
                            xlinkHref: "#illustration-validation-incorrect_svg__a"
                        }, void 0)
                    }), void 0),
                    jsxRuntime.jsx("use", {
                        fill: "#FFE5E6",
                        xlinkHref: "#illustration-validation-incorrect_svg__a"
                    }, void 0),
                    jsxRuntime.jsxs("g", Object.assign({
                        mask: "url(#illustration-validation-incorrect_svg__b)",
                        fill: "#FF5A5F",
                        fillRule: "nonzero"
                    }, {
                        children: [
                            jsxRuntime.jsx("path", {
                                d: "M51.51 53.974a1.742 1.742 0 0 1 2.464-2.464L98.49 96.026a1.742 1.742 0 0 1-2.464 2.464L51.51 53.974Z"
                            }, void 0),
                            jsxRuntime.jsx("path", {
                                d: "M96.026 51.51a1.742 1.742 0 0 1 2.464 2.464L53.974 98.49a1.742 1.742 0 0 1-2.464-2.464L96.026 51.51Z"
                            }, void 0)
                        ]
                    }), void 0)
                ]
            }), void 0)
        ]
    }), void 0);
};
const ForwardRef = /*#__PURE__*/ react.forwardRef(SvgIllustrationValidationIncorrect);

var svgs = Object.freeze({
    'emptystate-add-users': ForwardRef$m,
    'emptystate-classes': ForwardRef$l,
    'emptystate-insights': ForwardRef$k,
    'emptystate-markbook': ForwardRef$j,
    'emptystate-revisions': ForwardRef$i,
    'emptystate-search': ForwardRef$h,
    'emptystate-tasks': ForwardRef$g,
    'emptystate-users': ForwardRef$f,
    'main-browser': ForwardRef$e,
    'main-characters': ForwardRef$d,
    'main-dnd': ForwardRef$c,
    'main-map': ForwardRef$b,
    'main-payment': ForwardRef$a,
    'main-quiz-tier-1': ForwardRef$9,
    'main-quiz-tier-2': ForwardRef$8,
    'main-quiz-tier-3': ForwardRef$7,
    'main-quiz-tier-5': ForwardRef$6,
    'main-revision': ForwardRef$5,
    'main-sml': ForwardRef$4,
    'main-writing': ForwardRef$3,
    'region-uk': ForwardRef$2,
    'validation-correct': ForwardRef$1,
    'validation-incorrect': ForwardRef
});

var styles$r = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","--breakpoint":"min-width: 48.063em","root":"Illustration_root__k4Dqg","small":"Illustration_small__NiY5I","complete":"Illustration_complete__Zceky","emptystate":"Illustration_emptystate__UIfnd","main":"Illustration_main__dqHzV","validation":"Illustration_validation__qd8yy","region":"Illustration_region__Vb67B","underconstruction":"Illustration_underconstruction__1GM--","brandColor":"Illustration_brandColor__I4flr","panelSlideDown":"Illustration_panelSlideDown__eUJIB"};

const defaultCategory = 'main';
keyMirror__default["default"]({
    brandColor: null
});
function Illustration(props) {
    const { name , size , variant  } = props;
    let category = name.split('-')[0];
    invariant__default["default"](!!styles$r[category], `Illustration: no category style defined for name '${name}'. Defaulting to '${defaultCategory}'.`);
    if (!styles$r[category]) {
        category = defaultCategory;
    }
    const Component = svgs[name];
    return jsxRuntime.jsx(Component, {
        "aria-hidden": true,
        className: cx__default["default"](styles$r.root, styles$r[category], {
            [String(size && styles$r[size])]: size,
            [String(variant && styles$r[variant])]: variant
        })
    }, void 0);
}
function IllustrationLoader(props) {
    return jsxRuntime.jsx(Skeleton, Object.assign({}, props, {
        borderRadius: "borderRadiusCircle",
        size: {
            base: 100,
            tablet: 250
        }
    }), void 0);
}
Illustration.Loader = IllustrationLoader;

const assistiveTextsMapping = {
    info: 'More info',
    warning: 'Warning'
};
const iconNamesMapping = {
    info: 'alert-info',
    warning: 'alert-error'
};
function InfoTip(props) {
    const { content , iconSize ='sizeIconSmall1X' , theme ='light-border' , variant ='info' , ...otherProps } = props;
    const assistiveText = assistiveTextsMapping[variant];
    const iconName = iconNamesMapping[variant];
    return jsxRuntime.jsx(Tooltip, Object.assign({}, otherProps, {
        content: content,
        theme: theme
    }, {
        children: jsxRuntime.jsxs(Box, Object.assign({
            // Svgs in buttons are cut-off in IOS Safari unless the button has an
            // explicit width. TODO: replace with actual HTML button once iconSizes
            // have been refactored and we can use them as sizing value on the Box
            // (https://hschub.atlassian.net/browse/PROD-4261)
            role: "button",
            tabIndex: 0,
            color: variant === 'warning' ? 'colorTangerineTeaseRoot' : 'colorFiftyShadesLight',
            display: "inline-block",
            height: iconSize,
            lineHeight: iconSize,
            marginLeft: "spacingSmall2X"
        }, {
            children: [
                jsxRuntime.jsx(HideVisually, {
                    children: assistiveText
                }, void 0),
                jsxRuntime.jsx(Icon, {
                    name: iconName,
                    size: iconSize,
                    display: "inline-block"
                }, void 0)
            ]
        }), void 0)
    }), void 0);
}

function Explanation(props) {
    const { children , testHook  } = props;
    return jsxRuntime.jsx(Markdown, Object.assign({
        className: markdownStyles.explanation,
        isLimited: true,
        testHook: testHook
    }, {
        children: children
    }), void 0);
}

const feedbackColor = {
    correct: 'colorStatusSuccessDarker',
    incorrect: 'colorStatusErrorDark',
    partlyCorrect: 'colorStatusWarningDarker',
    skipped: 'colorFiftyShadesDarker'
};
function QuizQuestion(props) {
    const { children , copyright , title , meta , source , illustrationName , isFeedbackAnnounced =true , labelId , linkComponent , testHook , explanation , feedback , feedbackRef , variant ,  } = props;
    const hasSourceSpacing = !!(illustrationName || children);
    const sourceFooter = source && jsxRuntime.jsxs(Flex, Object.assign({
        as: "footer",
        alignItems: "center"
    }, {
        children: [
            jsxRuntime.jsx(Text, Object.assign({
                as: "small",
                variant: "bodySmall1X",
                color: "colorFiftyShadesDark"
            }, {
                children: source
            }), void 0),
            copyright && jsxRuntime.jsx(InfoTip, {
                content: copyright,
                iconSize: "sizeIconSmall2X",
                size: "large",
                appendTo: "parent"
            }, void 0)
        ]
    }), void 0);
    return jsxRuntime.jsxs(Box, Object.assign({
        as: "article",
        testHook: testHook
    }, {
        children: [
            illustrationName && jsxRuntime.jsx(Box, Object.assign({
                marginBottom: "spacingLarge1X"
            }, {
                children: jsxRuntime.jsx(Illustration, {
                    size: "small",
                    name: illustrationName
                }, void 0)
            }), void 0),
            jsxRuntime.jsx(Box, Object.assign({
                id: labelId,
                marginBottom: "spacingSmall",
                testHook: testHook && `${testHook}-title`
            }, {
                children: typeof title === 'string' ? jsxRuntime.jsx(Markdown, Object.assign({
                    className: markdownStyles.question,
                    linkComponent: linkComponent,
                    isLimited: true
                }, {
                    children: title
                }), void 0) : title
            }), void 0),
            meta && jsxRuntime.jsx(Box, Object.assign({
                marginBottom: "spacingRoot"
            }, {
                children: jsxRuntime.jsx(Text, {
                    children: meta
                }, void 0)
            }), void 0),
            sourceFooter && hasSourceSpacing ? jsxRuntime.jsx(Box, Object.assign({
                marginBottom: {
                    base: 'spacingLarge5X',
                    tablet: 'spacingLarge7X'
                }
            }, {
                children: sourceFooter
            }), void 0) : sourceFooter,
            children,
            jsxRuntime.jsxs(Box, Object.assign({
                marginTop: "spacingLarge1X",
                ref: feedbackRef,
                "aria-live": isFeedbackAnnounced ? 'polite' : undefined,
                testHook: testHook ? `${testHook}-feedbackContainer` : undefined
            }, {
                children: [
                    feedback && jsxRuntime.jsx(Text, Object.assign({
                        variant: "bodySmall",
                        color: variant ? feedbackColor[variant] : undefined,
                        testHook: testHook ? `${testHook}-feedback` : undefined
                    }, {
                        children: feedback
                    }), void 0),
                    explanation && jsxRuntime.jsx(Box, Object.assign({
                        marginTop: "spacingLarge1X"
                    }, {
                        children: jsxRuntime.jsx(Explanation, Object.assign({
                            testHook: testHook && `${testHook}-explanation`
                        }, {
                            children: explanation
                        }), void 0)
                    }), void 0)
                ]
            }), void 0)
        ]
    }), void 0);
}

// TS: KeyboardEvent stores code as string, widening types
const directions = [
    core.KeyboardCode.Down,
    core.KeyboardCode.Right,
    core.KeyboardCode.Up,
    core.KeyboardCode.Left, 
];
// Custom coordinate getter for DragAndDropQuestion. It finds the next/previous
// droppable blank area available when using the keyboard.
// https://docs.dndkit.com/presets/sortable#sensors
const droppableCoordinateGetter = (answersBankId)=>{
    return (event, param1)=>{
        let { context ,  } = param1;
        if (directions.includes(event.code)) {
            event.preventDefault();
            const { droppableContainers , over  } = context;
            const activeDroppables = new Map([
                ...droppableContainers
            ].filter((param)=>{
                let [, value] = param;
                return !value.disabled;
            }));
            const withAllBlanksFilled = activeDroppables.size === 1;
            if (withAllBlanksFilled || !over) {
                return undefined;
            }
            const activeDroppablesIds = Array.from(activeDroppables.keys());
            const currentDroppableIndex = activeDroppablesIds.indexOf(over.id);
            var ref;
            const nextDroppableId = (ref = activeDroppablesIds[currentDroppableIndex + 1]) !== null && ref !== void 0 ? ref : answersBankId;
            var ref1;
            const previousDroppableId = (ref1 = activeDroppablesIds[currentDroppableIndex - 1]) !== null && ref1 !== void 0 ? ref1 : answersBankId;
            let closestDroppableId;
            switch(event.code){
                case core.KeyboardCode.Down:
                    closestDroppableId = nextDroppableId;
                    break;
                case core.KeyboardCode.Up:
                    closestDroppableId = previousDroppableId;
                    break;
                case core.KeyboardCode.Left:
                    closestDroppableId = previousDroppableId;
                    break;
                case core.KeyboardCode.Right:
                    closestDroppableId = nextDroppableId;
                    break;
            }
            if (closestDroppableId) {
                var ref2, ref3;
                const newNode = (ref2 = droppableContainers.get(closestDroppableId)) === null || ref2 === void 0 ? void 0 : (ref3 = ref2.node) === null || ref3 === void 0 ? void 0 : ref3.current;
                // offset the selected draggable on the bank droppable so that it doesn't
                // fully hide any other draggable
                const offset = closestDroppableId === answersBankId ? 20 : 0;
                if (newNode) {
                    const newRect = core.getClientRect(newNode);
                    const newCoordinates = utilities.subtract({
                        x: newRect.left + offset,
                        y: newRect.top + offset
                    });
                    return newCoordinates;
                }
            }
        }
        return undefined;
    };
};

var styles$q = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","answersBank":"DragAndDropQuestion_answersBank__nl4FV","answerBankItem":"DragAndDropQuestion_answerBankItem__f6qLt","answersBankDraggableAnswer":"DragAndDropQuestion_answersBankDraggableAnswer__YksvE","panelSlideDown":"DragAndDropQuestion_panelSlideDown__-VlO8"};

const breakpoint$2 = {
    minWidth: breakpoints.breakpointMediumFrom
};
function AnswerBankDraggableAnswer(props) {
    const { id , isDisabled , testHook  } = props;
    const { attributes , isDragging , listeners , setNodeRef  } = core.useDraggable({
        id,
        disabled: isDisabled
    });
    return jsxRuntime.jsxs("div", Object.assign({
        ref: setNodeRef,
        className: styles$q.answersBankDraggableAnswer,
        "data-test": testHook
    }, attributes, listeners, {
        style: isDragging ? {
            opacity: 0.5
        } : undefined
    }, {
        children: [
            ' ',
            jsxRuntime.jsx(DraggableAnswer, Object.assign({
                isDisabled: isDisabled
            }, {
                children: props.children
            }), void 0)
        ]
    }), void 0);
}
function AnswerBank(props) {
    const { assistiveText , answers , id , isDisabled , testHook  } = props;
    const bankRef = react.useRef(null);
    const [bankInitialHeight, setBankInitialHeight] = react.useState(null);
    const withFixedHeight = useMedia(breakpoint$2);
    const { setNodeRef  } = core.useDroppable({
        id
    });
    const answersInBank = answers.filter((param)=>{
        let { droppableId  } = param;
        return droppableId === id;
    });
    react.useLayoutEffect(()=>{
        if (withFixedHeight) {
            var ref;
            var ref1;
            setBankInitialHeight((ref1 = (ref = bankRef.current) === null || ref === void 0 ? void 0 : ref.offsetHeight) !== null && ref1 !== void 0 ? ref1 : null);
        }
    }, [
        answers,
        withFixedHeight
    ]);
    return jsxRuntime.jsxs("div", Object.assign({
        ref: bankRef,
        style: {
            minHeight: bankInitialHeight || undefined
        },
        "data-test": testHook
    }, {
        children: [
            jsxRuntime.jsx(HideVisually, {
                children: assistiveText
            }, void 0),
            jsxRuntime.jsx("ul", Object.assign({
                ref: setNodeRef,
                className: styles$q.answersBank
            }, {
                children: answersInBank.map((answer)=>jsxRuntime.jsx("li", Object.assign({
                        className: styles$q.answerBankItem
                    }, {
                        children: jsxRuntime.jsx(AnswerBankDraggableAnswer, Object.assign({
                            id: answer.draggableId,
                            isDisabled: isDisabled,
                            testHook: testHook && `${testHook}-answer`
                        }, {
                            children: answer.title
                        }), void 0)
                    }), answer.draggableId)
                )
            }), void 0)
        ]
    }), void 0);
}
function answersReducer(answers, action) {
    switch(action.type){
        case 'add':
            const newAnswers = [
                ...answers.filter((param)=>{
                    let { draggableId  } = param;
                    return draggableId !== action.answer.draggableId;
                }),
                action.answer, 
            ];
            return action.shuffle ? ___default["default"].shuffle(newAnswers) : newAnswers;
        case 'drop':
            return answers.map((answer)=>answer.draggableId === action.draggableId ? {
                    ...answer,
                    droppableId: action.droppableId
                } : answer
            );
        /* istanbul ignore next */ default:
            // @ts-ignore - helps us avoid typos!
            throw new Error(`Unhandled action type: ${action.type}`);
    }
}
function DragAndDropQuestion(props) {
    const { answerMaxLength , answerMaxLengthInfo , answersBankId , assistiveTexts: { bankAssistiveText , blankAssistiveText , getCorrectAnswerAssistiveText , getIncorrectAnswerAssistiveText , getOnDragCancelAssistiveText , getOnDragEndAssistiveText , getOnDragOverAssistiveText , getOnDragStartAssistiveText , draggableAssistiveText ,  } , incorrectAnswers , initialAnswers , isCheckingAnswers , isPreviewingAnswers , linkComponent , onAnswersChange , onDragEnd , onDragStart , testHook , title , isSkipped , ...questionProps } = props;
    const [answers, dispatchAnswers] = react.useReducer(answersReducer, []);
    const [draggedAnswer, setDraggedAnswer] = react.useState(null);
    const [isInitialAnswersDropped, setIsInitialAnswersDropped] = react.useState(false);
    const sensors = core.useSensors(core.useSensor(core.PointerSensor), core.useSensor(core.TouchSensor), core.useSensor(core.KeyboardSensor, {
        coordinateGetter: droppableCoordinateGetter(answersBankId)
    }));
    // reducer helpers
    const addAnswer = (answer)=>dispatchAnswers({
            type: 'add',
            answer,
            shuffle: !isPreviewingAnswers
        })
    ;
    const addAnswerToBank = (answer)=>addAnswer({
            ...answer,
            droppableId: answersBankId
        })
    ;
    const moveAnswer = (param)=>{
        let { draggableId , droppableId ,  } = param;
        return dispatchAnswers({
            type: 'drop',
            draggableId,
            droppableId
        });
    };
    const moveAnswerToBank = (draggableId)=>moveAnswer({
            draggableId,
            droppableId: answersBankId
        })
    ;
    // drag actions
    const onDragStartHandler = (event)=>{
        setDraggedAnswer(___default["default"].find(answers, {
            draggableId: event.active.id
        }));
        if (onDragStart) onDragStart();
    };
    const onDragEndHandler = (event)=>{
        const { active , over  } = event;
        if (!over || over.id === answersBankId) {
            return;
        }
        moveAnswer({
            draggableId: active.id,
            droppableId: over.id
        });
        setDraggedAnswer(null);
        if (onDragEnd) onDragEnd();
    };
    const onDragCancelHandler = ()=>{
        if (onDragEnd) onDragEnd();
    };
    const getAnswerTitle = react.useCallback((id)=>{
        var ref;
        return ChildrenUtils__default["default"].onlyText((ref = ___default["default"].find(answers, {
            draggableId: id
        })) === null || ref === void 0 ? void 0 : ref.title);
    }, [
        answers
    ]);
    const countExtractedAnswersFromMarkdown = answers.filter((param)=>{
        let { isExtractedFromMarkdown  } = param;
        return isExtractedFromMarkdown;
    }).length;
    // DndContext draggable screen readers announcements
    // https://docs.dndkit.com/guides/accessibility#screen-reader-announcements-using-live-regions
    const announcements = react.useMemo(()=>({
            onDragStart: (param)=>{
                let { active  } = param;
                return getOnDragStartAssistiveText(getAnswerTitle(active.id));
            },
            onDragOver: (param)=>{
                let { active , over  } = param;
                if (over) {
                    return getOnDragOverAssistiveText(getAnswerTitle(active.id), over.id, countExtractedAnswersFromMarkdown);
                }
            },
            onDragEnd: (param)=>{
                let { active , over  } = param;
                if (over) {
                    return getOnDragEndAssistiveText(getAnswerTitle(active.id), over.id, countExtractedAnswersFromMarkdown);
                }
            },
            onDragCancel: (param)=>{
                let { active  } = param;
                return getOnDragCancelAssistiveText(getAnswerTitle(active.id));
            }
        })
    , [
        countExtractedAnswersFromMarkdown,
        getAnswerTitle,
        getOnDragStartAssistiveText,
        getOnDragCancelAssistiveText,
        getOnDragOverAssistiveText,
        getOnDragEndAssistiveText, 
    ]);
    // add incorrect answers (the ones not coming from the markdown title) to the
    // bank
    react.useEffect(()=>{
        if (!incorrectAnswers || incorrectAnswers.length === 0) return;
        incorrectAnswers.map((incorrectAnswer, index)=>addAnswerToBank({
                // using isUnwrapped to remove the wrapping paragraph element
                title: jsxRuntime.jsx(Markdown, Object.assign({
                    isLimited: true,
                    as: "span",
                    isUnwrapped: true
                }, {
                    children: incorrectAnswer
                }), void 0),
                value: incorrectAnswer,
                draggableId: `incorrect-answer-${index}`,
                isExtractedFromMarkdown: false
            })
        );
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        incorrectAnswers
    ]);
    // let the consumer know when the answers changes (e.g an answer is dropped)
    react.useEffect(()=>{
        if (onAnswersChange) {
            onAnswersChange(answers);
        }
    }, [
        onAnswersChange,
        answers
    ]);
    const hasInitialAnswers = initialAnswers && initialAnswers.length > 0;
    // if there are initial answers, populate fields where they were dropped
    react.useEffect(()=>{
        if (!hasInitialAnswers) {
            return;
        }
        if (answers.length > 0 && !isInitialAnswersDropped) {
            initialAnswers.forEach((value, index)=>{
                const answer1 = answers.find((answer)=>answer.value === value
                );
                if (answer1) {
                    moveAnswer({
                        ...answer1,
                        droppableId: (index + 1).toString()
                    });
                }
            });
            setIsInitialAnswersDropped(true);
        }
    }, [
        answers,
        hasInitialAnswers,
        initialAnswers,
        isInitialAnswersDropped
    ]);
    return jsxRuntime.jsx(DragAndDropQuestionContext.Provider, Object.assign({
        value: {
            answerMaxLength,
            answerMaxLengthInfo,
            answers,
            isCheckingAnswers,
            isPreviewingAnswers,
            isSkipped,
            actions: {
                addAnswer,
                addAnswerToBank,
                moveAnswerToBank
            },
            assistiveTexts: {
                blankAssistiveText
            }
        }
    }, {
        children: jsxRuntime.jsxs(core.DndContext, Object.assign({
            sensors: sensors,
            onDragStart: onDragStartHandler,
            onDragEnd: onDragEndHandler,
            onDragCancel: onDragCancelHandler,
            accessibility: {
                announcements,
                screenReaderInstructions: {
                    draggable: draggableAssistiveText
                }
            }
        }, {
            children: [
                jsxRuntime.jsx("div", Object.assign({
                    role: "status",
                    "data-test": testHook && `${testHook}-validation-messages`
                }, {
                    children: isCheckingAnswers && jsxRuntime.jsx(HideVisually, {
                        children: jsxRuntime.jsx("ul", {
                            children: answers.filter((param)=>{
                                let { droppableId  } = param;
                                return droppableId !== answersBankId;
                            }).sort((a, b)=>+a.droppableId - +b.droppableId
                            ).map((answer)=>jsxRuntime.jsx("li", {
                                    children: answer.droppableId === answer.draggableId ? getCorrectAnswerAssistiveText(ChildrenUtils__default["default"].onlyText(answer.title)) : getIncorrectAnswerAssistiveText(ChildrenUtils__default["default"].onlyText(answer.title), getAnswerTitle(answer.droppableId))
                                }, answer.draggableId)
                            )
                        }, void 0)
                    }, void 0)
                }), void 0),
                jsxRuntime.jsx(VerticalSpacing, Object.assign({
                    size: "large1X"
                }, {
                    children: jsxRuntime.jsx(Illustration, {
                        name: "main-dnd",
                        size: "small"
                    }, void 0)
                }), void 0),
                jsxRuntime.jsx(VerticalSpacing, Object.assign({
                    size: "small"
                }, {
                    children: jsxRuntime.jsx(AnswerBank, {
                        assistiveText: bankAssistiveText,
                        id: answersBankId,
                        answers: answers,
                        testHook: testHook && `${testHook}-bank`,
                        isDisabled: isCheckingAnswers || isSkipped
                    }, void 0)
                }), void 0),
                jsxRuntime.jsx(QuizQuestion, Object.assign({}, questionProps, {
                    title: jsxRuntime.jsx(Markdown, Object.assign({
                        className: cx__default["default"](markdownStyles.question, markdownStyles.dragAndDrop),
                        linkComponent: linkComponent,
                        isLimited: true
                    }, {
                        children: title
                    }), void 0),
                    testHook: testHook,
                    variant: isSkipped ? 'skipped' : undefined
                }), void 0),
                jsxRuntime.jsx(core.DragOverlay, Object.assign({
                    modifiers: [
                        modifiers.restrictToWindowEdges
                    ],
                    dropAnimation: {
                        ...core.defaultDropAnimation,
                        sideEffects: core.defaultDropAnimationSideEffects({
                            styles: {
                                active: {
                                    opacity: '0.5'
                                }
                            }
                        })
                    }
                }, {
                    children: draggedAnswer ? jsxRuntime.jsx(DraggableAnswer, Object.assign({
                        isDragged: true
                    }, {
                        children: draggedAnswer.title
                    }), void 0) : null
                }), void 0)
            ]
        }), void 0)
    }), void 0);
}

var styles$p = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","root":"HelpInfo_root__vVf4x","leftAligned":"HelpInfo_leftAligned__WiTu7","icon":"HelpInfo_icon__b07EH","info":"HelpInfo_info__6Cq82","panelSlideDown":"HelpInfo_panelSlideDown__8w4Sh"};

keyMirror__default["default"]({
    leftAligned: null
});
function HelpInfo(props) {
    const { assistiveText ='Help info: ' , children , testHook , variant  } = props;
    return jsxRuntime.jsxs("small", Object.assign({
        className: cx__default["default"](styles$p.root, {
            [String(variant && styles$p[variant])]: variant
        }),
        "data-test": testHook
    }, {
        children: [
            jsxRuntime.jsx(Icon, {
                className: styles$p.icon,
                size: "sizeIconSmall",
                name: "circle-help"
            }, void 0),
            jsxRuntime.jsxs("span", Object.assign({
                className: styles$p.info
            }, {
                children: [
                    jsxRuntime.jsx(HideVisually, {
                        children: assistiveText
                    }, void 0),
                    jsxRuntime.jsx(Text, Object.assign({
                        as: "span",
                        variant: "bodySmall1X",
                        color: "colorFiftyShadesDark"
                    }, {
                        children: children
                    }), void 0)
                ]
            }), void 0)
        ]
    }), void 0);
}

var styles$o = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","root":"EmptyState_root__amk0o","coloredBackground":"EmptyState_coloredBackground__bkjMN","panelSlideDown":"EmptyState_panelSlideDown__Z6CfA"};

keyMirror__default["default"]({
    coloredBackground: null
});
function EmptyState(props) {
    const { ctaProps , customCta , header , headingProps , helpInfo , isGutterless , testHook , description , descriptionInfo , variant ,  } = props;
    const hasCta = !!(ctaProps || customCta);
    return jsxRuntime.jsxs(Box, Object.assign({
        as: "article",
        className: cx__default["default"](styles$o.root, variant && styles$o[variant]),
        testHook: testHook
    }, {
        children: [
            header && jsxRuntime.jsx(Container, Object.assign({
                paddingInline: "spacingNone",
                maxWidth: "sizeSmall1X"
            }, {
                children: jsxRuntime.jsx(VerticalSpacing, Object.assign({
                    size: "large4X"
                }, {
                    children: header
                }), void 0)
            }), void 0),
            jsxRuntime.jsxs(Container, Object.assign({
                paddingInline: isGutterless ? 'spacingNone' : undefined,
                maxWidth: "sizeRoot"
            }, {
                children: [
                    headingProps && jsxRuntime.jsx(VerticalSpacing, Object.assign({
                        size: "large"
                    }, {
                        children: jsxRuntime.jsx(Heading, Object.assign({}, headingProps, {
                            size: "large1X"
                        }), void 0)
                    }), void 0),
                    jsxRuntime.jsxs(Stack, Object.assign({
                        spacing: "spacingLarge4X"
                    }, {
                        children: [
                            jsxRuntime.jsxs(Stack, Object.assign({
                                spacing: "spacingSmall"
                            }, {
                                children: [
                                    jsxRuntime.jsx(Text, Object.assign({
                                        as: "p",
                                        variant: "lead"
                                    }, {
                                        children: description
                                    }), void 0),
                                    descriptionInfo
                                ]
                            }), void 0),
                            ctaProps ? jsxRuntime.jsx(Button, Object.assign({}, ctaProps), void 0) : customCta
                        ]
                    }), void 0),
                    helpInfo && jsxRuntime.jsx(VerticalSpacing, Object.assign({
                        size: hasCta ? 'large1X' : 'large5X',
                        isUpwards: true
                    }, {
                        children: jsxRuntime.jsx("footer", {
                            children: jsxRuntime.jsx(HelpInfo, {
                                children: helpInfo
                            }, void 0)
                        }, void 0)
                    }), void 0)
                ]
            }), void 0)
        ]
    }), void 0);
}

const defaultStyles$3 = {
    alignItems: 'center',
    borderRadius: 'borderRadiusSmall',
    boxShadow: 'boxShadowBorderInset',
    color: 'colorCoreText',
    display: 'flex',
    fontFamily: 'fontFamilySystem',
    fontSize: 'fontSizeRoot',
    gap: 'spacingRoot',
    letterSpacing: 'letterSpacingSmall',
    lineHeight: 'lineHeightRoot',
    paddingBlock: 'spacingSmall',
    paddingInline: 'spacingRoot',
    textAlign: 'left',
    transition: 'transitionRoot',
    width: 'sizeFull',
    _focus: {
        boxShadow: 'boxShadowBorderInsetFocused',
        outlineStyle: 'none'
    },
    _activeEnabled: {
        backgroundColor: 'colorAtomiBluesLighter'
    }
};
const selectedStyles$2 = {
    ...defaultStyles$3,
    boxShadow: 'boxShadowBorderInsetSelected'
};
const correctStyles = {
    ...defaultStyles$3,
    // prevent the focus styles from overwritting the variant styles
    _focus: undefined,
    boxShadow: 'boxShadowBorderInsetLargeCorrect'
};
const incorrectStyles = {
    ...defaultStyles$3,
    _focus: undefined,
    boxShadow: 'boxShadowBorderInsetLargeError'
};
const skippedStyles = {
    ...defaultStyles$3,
    backgroundColor: 'colorFiftyShadesLightest',
    color: 'colorFiftyShadesDarker'
};
const variantStylesMapping$2 = {
    correct: correctStyles,
    incorrect: incorrectStyles,
    skipped: skippedStyles
};
function getOptionStyles(isHighlighted, variant) {
    if (variant === 'skipped') {
        return variantStylesMapping$2.skipped;
    }
    if (isHighlighted) {
        return variant ? variantStylesMapping$2[variant] : selectedStyles$2;
    }
    return defaultStyles$3;
}
function Option$2(props) {
    const { children , withHover , isHighlighted , onClick , testHook , variant , ...otherProps } = props;
    const isCorrect = variant === 'correct';
    const isIncorrect = variant === 'incorrect';
    const withIcon = isHighlighted && (isCorrect || isIncorrect);
    const { hoverProps , isHovered  } = interactions.useHover({
        isDisabled: !withHover
    });
    return jsxRuntime.jsxs(Box, Object.assign({}, getOptionStyles(isHighlighted, variant), isHovered && {
        boxShadow: 'boxShadowBorderInsetFocused'
    }, hoverProps, otherProps, {
        onClick: onClick,
        testHook: testHook
    }, {
        children: [
            children,
            withIcon && jsxRuntime.jsx(Box, {
                as: Icon,
                name: isCorrect ? 'circle-solid-check' : 'circle-solid-cross',
                color: isCorrect ? 'colorGreenMonsterDark' : 'colorStrawberryFieldsRoot',
                marginLeft: "auto"
            }, void 0)
        ]
    }), void 0);
}

const diffCodes = Object.freeze({
    DELETE: -1,
    EQUAL: 0,
    INSERT: 1
});
function StringDiff(param1) {
    let { children  } = param1;
    // TODO-TS[ENHANCEMENT] Potentially add custom types to allow strings to be returned directly
    // More info here: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/20544
    if (typeof children === 'string') return jsxRuntime.jsx(jsxRuntime.Fragment, {
        children: children
    }, void 0);
    return(// a div is used instead of fragment to avoid the flexbox parent properties
    // to impact the diff output
    jsxRuntime.jsx("div", {
        children: children.map((param, i)=>// eslint-disable-next-line no-nested-ternary
        {
            let [code, part] = param;
            return code === diffCodes.INSERT ? jsxRuntime.jsx(Box, Object.assign({
                as: "ins",
                backgroundColor: "colorGreenMonsterLightest",
                textDecoration: "none"
            }, {
                children: part
            }), i) : code === diffCodes.DELETE ? jsxRuntime.jsx(Box, Object.assign({
                as: "del",
                backgroundColor: "colorStrawberryFieldsLightest",
                textDecorationColor: "colorStrawberryFieldsDark",
                textDecorationThickness: "2px"
            }, {
                children: part
            }), i) : part;
        })
    }, void 0));
}
const inputStyles = {
    borderWidth: 'borderWidthNone',
    width: 'sizeFull',
    _hoverAndFocus: {
        boxShadow: 'boxShadowBorderInsetFocused',
        outlineWidth: 'borderWidthNone'
    }
};
function ExactAnswer(props) {
    const { state , value , onChange , onCheckAnswer , testHook , ...questionProps } = props;
    const onKeyDown = react.useCallback((event)=>{
        if (event.currentTarget.value && event.key === 'Enter') {
            onCheckAnswer();
        }
    }, [
        onCheckAnswer
    ]);
    return jsxRuntime.jsx(QuizQuestion, Object.assign({}, questionProps, {
        variant: state,
        testHook: testHook
    }, {
        children: jsxRuntime.jsx(Box, Object.assign({
            marginTop: "spacingLarge3X"
        }, {
            children: state && value ? jsxRuntime.jsx(Option$2, Object.assign({
                variant: state,
                isHighlighted: true,
                testHook: testHook ? `${testHook}-answer` : undefined
            }, {
                children: jsxRuntime.jsx(StringDiff, {
                    children: value
                }, void 0)
            }), void 0) : jsxRuntime.jsx(Box, Object.assign({
                as: "input",
                type: "text",
                value: typeof value === 'string' ? value : undefined,
                onChange: (e)=>onChange(e.currentTarget.value)
                ,
                onKeyDown: onKeyDown,
                "aria-labelledby": questionProps.labelId,
                testHook: testHook ? `${testHook}-input` : undefined
            }, defaultStyles$3, inputStyles), void 0)
        }), void 0)
    }), void 0);
}

const variantIcons = {
    error: 'alert-error',
    warning: 'alert-warning'
};
const HeadingField = /*#__PURE__*/ react.forwardRef(function HeadingField(props, ref) {
    const { isRequired , label , value , testHook , validationText , errorVariant , ...otherProps } = props;
    const { classnames , fieldClassnames , fieldAttributes , fieldLabel , fieldHelpText  } = useFormField({
        isRequired,
        label,
        validationText,
        errorVariant,
        testHook
    });
    const attributes = {
        ...fieldAttributes,
        ...otherProps
    };
    const errorVariantColor = errorVariant === 'error' ? 'colorStatusErrorRoot' : 'colorStatusWarningDark';
    return jsxRuntime.jsxs(Box, Object.assign({
        testHook: testHook,
        className: classnames
    }, {
        children: [
            jsxRuntime.jsx(HideVisually, {
                children: fieldLabel
            }, void 0),
            jsxRuntime.jsxs(Box, Object.assign({
                display: "flex",
                borderBottomStyle: "solid",
                borderBottomWidth: "borderWidthRoot",
                borderBottomColor: errorVariant ? errorVariantColor : 'colorCoreWhite',
                gap: "spacingSmall1X",
                alignItems: "center"
            }, {
                children: [
                    jsxRuntime.jsx(Box, Object.assign({}, attributes, {
                        as: "input",
                        className: fieldClassnames,
                        fontFamily: "fontFamilyRoot",
                        fontSize: "fontSizeLarge5X",
                        fontWeight: "fontWeightLight",
                        padding: "spacingNone",
                        placeholder: label,
                        ref: ref,
                        type: "text",
                        defaultValue: value,
                        testHook: testHook && `${testHook}-input`
                    }), void 0),
                    errorVariant && jsxRuntime.jsx(Icon, {
                        name: variantIcons[errorVariant],
                        size: "sizeIconSmall",
                        color: errorVariant ? errorVariantColor : undefined
                    }, void 0)
                ]
            }), void 0),
            fieldHelpText
        ]
    }), void 0);
});

const hasWindow = typeof window !== 'undefined';
const getSize = ()=>({
        // Flow defines window as any
        width: hasWindow ? window.innerWidth : undefined,
        height: hasWindow ? window.innerHeight : undefined
    })
;
function useWindowSize() {
    const [windowSize, setWindowSize] = react.useState(getSize);
    react.useEffect(()=>{
        if (!hasWindow) return;
        const handleResize = ()=>setWindowSize(getSize)
        ;
        window.addEventListener('resize', handleResize);
        return ()=>window.removeEventListener('resize', handleResize)
        ;
    }, []);
    return windowSize;
}

var styles$n = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","root":"HorizontalScroll_root__lQLvv","isScrollable":"HorizontalScroll_isScrollable__JNjl8","fade":"HorizontalScroll_fade__FWjk-","smallShadow":"HorizontalScroll_smallShadow__QC-VE","isAtEnd":"HorizontalScroll_isAtEnd__953RQ","scrollWrapper":"HorizontalScroll_scrollWrapper__8dNKH","panelSlideDown":"HorizontalScroll_panelSlideDown__Njdo9"};

const variants$1 = keyMirror__default["default"]({
    fade: null,
    smallShadow: null
});
const setupScrollHandling = (container, wrapper, setIsScrollable, setIsAtEnd, setScrollPosition)=>{
    setIsScrollable(!!(wrapper.scrollWidth > container.offsetWidth));
    const handleScroll = ()=>{
        window.requestAnimationFrame(()=>{
            setIsAtEnd(wrapper.scrollLeft + wrapper.offsetWidth >= wrapper.scrollWidth);
            setScrollPosition({
                left: wrapper.scrollLeft,
                top: wrapper.scrollTop
            });
        });
    };
    wrapper.addEventListener('scroll', handleScroll, false);
    return function cleanup() {
        wrapper.removeEventListener('scroll', handleScroll, false);
    };
};
function HorizontalScroll(props) {
    const { children , forwardScrollPosition =false , variant =variants$1.fade  } = props;
    const [isScrollable, setIsScrollable] = react.useState(false);
    const [isAtEnd, setIsAtEnd] = react.useState(false);
    const [scrollPosition, setScrollPosition] = react.useState(null);
    const rootContainer = react.useRef(null);
    const scrollWrapper = react.useRef(null);
    const { width  } = useWindowSize();
    react.useLayoutEffect(()=>{
        const container = rootContainer.current;
        const wrapper = scrollWrapper.current;
        if (container && wrapper) {
            return setupScrollHandling(container, wrapper, setIsScrollable, setIsAtEnd, setScrollPosition);
        }
    }, [
        forwardScrollPosition,
        rootContainer,
        scrollWrapper,
        width
    ]);
    return jsxRuntime.jsx("div", Object.assign({
        className: cx__default["default"](styles$n.root, {
            [styles$n[variant]]: variant,
            [styles$n.isScrollable]: isScrollable,
            [styles$n.isAtEnd]: isAtEnd
        }),
        ref: rootContainer
    }, {
        children: jsxRuntime.jsx("div", Object.assign({
            className: styles$n.scrollWrapper,
            ref: scrollWrapper
        }, {
            children: forwardScrollPosition ? /*#__PURE__*/ react.cloneElement(children, {
                scrollPosition
            }) : children
        }), void 0)
    }), void 0);
}

var styles$m = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","root":"InsightGraph_root__U7nMy","isEmbedded":"InsightGraph_isEmbedded__3G4Zz","panelSlideDown":"InsightGraph_panelSlideDown__zWtF-"};

const breakpoint$1 = {
    minWidth: breakpoints.breakpointSmallFrom
};
const toPair = (group, comparisonFunction)=>// eslint-disable-next-line no-nested-ternary
    group.length === 1 ? comparisonFunction(group[0]) ? [
        group[0],
        null
    ] : [
        null,
        group[0]
    ] : [
        group[0],
        group[1]
    ]
;
function useMinMaxLabelContent(data, minMax, renderValue) {
    return react.useMemo(()=>{
        // find the indexes of the minimum and/or maximum value in the data
        // TODO-TS: typeguard preferred `!` users before .y - a typeguard would be better
        const [min, max] = data.reduce((param, point, index)=>{
            let [prevMin, prevMax] = param;
            return [
                !data[prevMin] || point && point.y < data[prevMin].y ? index : prevMin,
                !data[prevMax] || point && point.y > data[prevMax].y ? index : prevMax, 
            ];
        }, [
            0,
            0
        ]);
        return function labelContent(param) {
            let { value , index  } = param;
            if (minMax.includes('min') && index === min || minMax.includes('max') && index === max) {
                return renderValue(value);
            }
            return null;
        };
    }, [
        data,
        minMax,
        renderValue
    ]);
}
function CustomTooltip(param) {
    let { active , payload , label , renderTooltipContent  } = param;
    if (!payload || payload.length === 0) return null;
    return jsxRuntime.jsx(Tooltip, Object.assign({
        animation: "fade",
        arrow: false,
        content: renderTooltipContent({
            label,
            payload: toPair(payload, (p)=>{
                return (p === null || p === void 0 ? void 0 : p.dataKey) !== 'y';
            })
        }),
        inertia: false,
        isTextOnly: false,
        placement: "top",
        theme: "light-border",
        triggerTarget: document.querySelector('.recharts-tooltip-cursor'),
        visible: active
    }, {
        children: jsxRuntime.jsx("span", {
            tabIndex: -1
        }, void 0)
    }), void 0);
}
function InsightGraph(props) {
    const { data: [comparison, current] , isEmbedded , renderValue , renderTooltipContent , testHook , xAxisProps ,  } = props;
    const matches = useMedia(breakpoint$1);
    const data = current.data.map((point, i)=>{
        var ref, ref1;
        return {
            x: (point === null || point === void 0 ? void 0 : point.x) || ((ref = comparison.data[i]) === null || ref === void 0 ? void 0 : ref.x),
            y: point === null || point === void 0 ? void 0 : point.y,
            yComparison: (ref1 = comparison.data[i]) === null || ref1 === void 0 ? void 0 : ref1.y
        };
    });
    const currentColor = colors.colorAtomiBluesDark;
    const comparisonColor = colors.colorAtomiBluesLighter;
    const currentLabelContent = useMinMaxLabelContent(current.data, 'max', renderValue);
    const comparisonLabelContent = useMinMaxLabelContent(comparison.data, 'min', renderValue);
    const axisProps = {
        axisLine: false,
        interval: 'preserveStartEnd',
        minTickGap: 0,
        tickLine: false
    };
    const lineProps = (color)=>({
            activeDot: {
                stroke: color
            },
            animationDuration: 300,
            connectNulls: true,
            stroke: color,
            strokeWidth: 2,
            type: 'monotone'
        })
    ;
    const dotProps = {
        r: 4
    };
    return jsxRuntime.jsx("div", Object.assign({
        className: cx__default["default"](styles$m.root, isEmbedded && styles$m.isEmbedded),
        "data-test": testHook
    }, {
        children: jsxRuntime.jsx(recharts.ResponsiveContainer, {
            children: jsxRuntime.jsxs(recharts.LineChart, Object.assign({
                data: data,
                margin: {
                    top: 0,
                    right: 0,
                    bottom: 0,
                    left: 0
                }
            }, {
                children: [
                    jsxRuntime.jsx(recharts.CartesianGrid, {
                        stroke: colors.colorFiftyShadesLighter,
                        horizontal: true,
                        vertical: true
                    }, void 0),
                    matches && jsxRuntime.jsx(recharts.Legend, {
                        align: "right",
                        verticalAlign: "top",
                        formatter: (value)=>jsxRuntime.jsx(Text, Object.assign({
                                as: "span",
                                variant: "bodySmall2X",
                                color: "colorFiftyShadesDarker"
                            }, {
                                children: value
                            }), void 0)
                    }, void 0),
                    matches && jsxRuntime.jsx(recharts.Tooltip, {
                        content: jsxRuntime.jsx(CustomTooltip, {
                            renderTooltipContent: renderTooltipContent
                        }, void 0),
                        formatter: renderValue,
                        offset: 0,
                        wrapperStyle: {
                            width: 1,
                            height: 1
                        },
                        isAnimationActive: false
                    }, void 0),
                    jsxRuntime.jsx(recharts.Line, Object.assign({}, lineProps(comparisonColor), {
                        dataKey: "yComparison",
                        name: comparison.id,
                        dot: matches && dotProps
                    }, {
                        children: !matches && jsxRuntime.jsx(recharts.LabelList, {
                            content: comparisonLabelContent,
                            fill: colors.colorFiftyShadesDarker,
                            position: "bottom"
                        }, void 0)
                    }), void 0),
                    jsxRuntime.jsx(recharts.Line, Object.assign({}, lineProps(currentColor), {
                        dataKey: "y",
                        name: current.id,
                        dot: matches && dotProps
                    }, {
                        children: !matches && jsxRuntime.jsx(recharts.LabelList, {
                            content: currentLabelContent,
                            fill: currentColor,
                            position: "top"
                        }, void 0)
                    }), void 0),
                    jsxRuntime.jsx(recharts.XAxis, Object.assign({}, axisProps, {
                        interval: !matches ? 0 : axisProps.interval,
                        tick: matches || jsxRuntime.jsx(recharts.Text, {}, void 0),
                        mirror: !matches
                    }, matches && xAxisProps, {
                        dataKey: "x"
                    }), void 0),
                    jsxRuntime.jsx(recharts.YAxis, Object.assign({}, axisProps, {
                        tickCount: 5,
                        tickFormatter: (value)=>matches && value ? renderValue(value) : ''
                        ,
                        mirror: true
                    }), void 0)
                ]
            }), void 0)
        }, void 0)
    }), void 0);
}

var styles$l = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","--upToBreakpoint":"max-width: 30em","--fromBreakpoint":"min-width: 30.063em","root":"Insight_root__7xkT1","withHover":"Insight_withHover__gMmbo","isActive":"Insight_isActive__yqv5F","title":"Insight_title__JnnLE","diff":"Insight_diff__-vw5J","diffDescription":"Insight_diffDescription__Oetfd","value":"Insight_value__GJ4iL","description":"Insight_description__2kyH2","graph":"Insight_graph__V60WP","panelSlideDown":"Insight_panelSlideDown__sEzWe"};

function Insight(props) {
    const { title , description , value , diffDescription , diffTooltip , diffValue , graphProps , isActive , onClick , testHook ,  } = props;
    const withHover = !!onClick;
    const isMobile = useMedia({
        query: styles$l['--upToBreakpoint']
    });
    const displayAsButton = withHover && !isMobile;
    const InnerElement = displayAsButton ? 'button' : 'div';
    return jsxRuntime.jsx(Card$1, Object.assign({
        variant: isMobile ? 'elevated' : 'rounded',
        withHover: displayAsButton,
        testHook: testHook
    }, {
        children: jsxRuntime.jsxs(InnerElement, Object.assign({
            className: cx__default["default"](styles$l.root, {
                [styles$l.isActive]: isActive,
                [styles$l.withHover]: withHover
            }),
            onClick: displayAsButton ? onClick : undefined,
            type: displayAsButton ? 'button' : undefined
        }, {
            children: [
                jsxRuntime.jsx("div", Object.assign({
                    className: styles$l.title,
                    "data-test": testHook && `${testHook}-title`
                }, {
                    children: jsxRuntime.jsx(Text, Object.assign({
                        as: "span",
                        color: "colorCoreBlack",
                        fontSize: {
                            base: 'fontSizeSmall1X',
                            tablet: 'fontSizeSmall'
                        },
                        fontWeight: "fontWeightSemiBold",
                        lineHeight: "lineHeightSmall1X"
                    }, {
                        children: title
                    }), void 0)
                }), void 0),
                jsxRuntime.jsxs("div", Object.assign({
                    className: styles$l.diff
                }, {
                    children: [
                        jsxRuntime.jsx(DiffWithRef, {
                            variant: "filled",
                            size: "small",
                            value: diffValue,
                            tooltip: isMobile ? diffTooltip || diffDescription : undefined,
                            testHook: testHook && `${testHook}-diff`
                        }, void 0),
                        jsxRuntime.jsx("span", Object.assign({
                            className: styles$l.diffDescription
                        }, {
                            children: diffDescription
                        }), void 0)
                    ]
                }), void 0),
                jsxRuntime.jsx("div", Object.assign({
                    className: styles$l.value,
                    "data-test": testHook && `${testHook}-value`
                }, {
                    children: value
                }), void 0),
                jsxRuntime.jsx("div", Object.assign({
                    className: styles$l.description,
                    "data-test": testHook && `${testHook}-description`
                }, {
                    children: description
                }), void 0),
                graphProps && jsxRuntime.jsx("div", Object.assign({
                    className: styles$l.graph
                }, {
                    children: jsxRuntime.jsx(InsightGraph, Object.assign({}, graphProps, {
                        isEmbedded: true
                    }), void 0)
                }), void 0)
            ]
        }), void 0)
    }), void 0);
}function InsightLoader() {
    return jsxRuntime.jsx(Skeleton, {
        height: {
            base: 300,
            tablet: 195
        },
        animation: "wave"
    }, void 0);
}
Insight.Loader = InsightLoader;

var styles$k = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","root":"SelectGroup_root__fy8Su","label":"SelectGroup_label__drUr7","selects":"SelectGroup_selects__p5L8K","select":"SelectGroup_select__baLa7","isConstrained":"SelectGroup_isConstrained__U7Kr3","panelSlideDown":"SelectGroup_panelSlideDown__ytHvW"};

function SelectGroup(props) {
    const { children , isConstrained =true , label  } = props;
    const selects = flattenChildren__default["default"](children);
    const id = useId('SelectGroup');
    return jsxRuntime.jsxs("div", Object.assign({
        className: cx__default["default"](styles$k.root, {
            [styles$k.isConstrained]: isConstrained
        })
    }, {
        children: [
            label && jsxRuntime.jsx("span", Object.assign({
                id: id,
                className: styles$k.label
            }, {
                children: label
            }), void 0),
            jsxRuntime.jsx("ul", Object.assign({
                className: styles$k.selects,
                "aria-labelledby": label ? id : undefined
            }, {
                children: selects.map((select, i)=>jsxRuntime.jsx("li", Object.assign({
                        className: styles$k.select
                    }, {
                        children: select
                    }), i)
                )
            }), void 0)
        ]
    }), void 0);
}

var styles$j = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","--breakpoint":"min-width: 48.063em","root":"KebabList_root__sW47A","cta":"KebabList_cta__tALNI","actions":"KebabList_actions__k7HJ7","multipleActions":"KebabList_multipleActions__MD-Fb","item":"KebabList_item__1BhsP","title":"KebabList_title__V29-4","loader":"KebabList_loader__333rS","section":"KebabList_section__Wfv-K","titleInner":"KebabList_titleInner__0FesA","panelSlideDown":"KebabList_panelSlideDown__Bpa6r"};

function Section(props) {
    const { title , children , testHook  } = props;
    return jsxRuntime.jsxs("li", Object.assign({
        className: styles$j.section,
        "data-test": testHook
    }, {
        children: [
            title && jsxRuntime.jsx("div", Object.assign({
                className: styles$j.title
            }, {
                children: jsxRuntime.jsx("h2", Object.assign({
                    className: styles$j.titleInner,
                    "data-test": testHook && `${testHook}-title`
                }, {
                    children: title
                }), void 0)
            }), void 0),
            react.Children.map(children, (item)=>{
                // @ts-ignore TODO-TS: typeguard preferred. we cannot guarantee item is a ReactElement
                const childColor = item.props.colors.root;
                var _childColor;
                // Support both child color as key or value
                const indicatorColor = (_childColor = colors[childColor]) !== null && _childColor !== void 0 ? _childColor : childColor;
                return jsxRuntime.jsx("div", Object.assign({
                    className: styles$j.item,
                    style: {
                        '--indicator-color': indicatorColor
                    }
                }, {
                    children: item
                }), void 0);
            })
        ]
    }), void 0);
}
function Loader$1(props) {
    const { ariaLabel , count , height , testHook , withTitle  } = props;
    return jsxRuntime.jsxs("li", Object.assign({
        className: cx__default["default"](styles$j.section, styles$j.loader),
        role: "status",
        "aria-label": ariaLabel,
        "data-test": testHook
    }, {
        children: [
            withTitle && jsxRuntime.jsx("div", Object.assign({
                className: styles$j.title
            }, {
                children: jsxRuntime.jsx(TextLoader, {
                    height: 40
                }, void 0)
            }), void 0),
            Array.from({
                length: count
            }, (_, i)=>jsxRuntime.jsx("div", Object.assign({
                    className: styles$j.item
                }, {
                    children: jsxRuntime.jsx(TextLoader, {
                        height: height
                    }, void 0)
                }), i)
            )
        ]
    }), void 0);
}
function Empty(props) {
    return jsxRuntime.jsx(jsxRuntime.Fragment, {
        children: props.children
    }, void 0);
}
function KebabList(props) {
    const { alert , cta , filters , children  } = props;
    return jsxRuntime.jsx(Container, Object.assign({
        maxWidth: "sizeRoot"
    }, {
        children: jsxRuntime.jsxs("div", Object.assign({
            className: styles$j.root
        }, {
            children: [
                (filters || cta) && jsxRuntime.jsxs("div", Object.assign({
                    className: cx__default["default"](styles$j.actions, {
                        [styles$j.multipleActions]: cta && filters
                    })
                }, {
                    children: [
                        filters && jsxRuntime.jsx(SelectGroup, {
                            children: filters
                        }, void 0),
                        cta && jsxRuntime.jsx("div", Object.assign({
                            className: styles$j.cta
                        }, {
                            children: cta
                        }), void 0)
                    ]
                }), void 0),
                jsxRuntime.jsxs(Stack, {
                    children: [
                        alert,
                        children && children.type !== Empty ? jsxRuntime.jsx("ol", {
                            children: children
                        }, void 0) : children
                    ]
                }, void 0)
            ]
        }), void 0)
    }), void 0);
}
KebabList.Empty = Empty;
KebabList.Loader = Loader$1;
KebabList.Section = Section;

const renderers = {
    // spaces are intentionally added in these elements to format text correctly
    heading (param) {
        let { children  } = param;
        return jsxRuntime.jsxs("span", {
            children: [
                children,
                " "
            ]
        }, void 0);
    },
    inlineMath (param) {
        let { value  } = param;
        return jsxRuntime.jsxs("span", {
            children: [
                ' ',
                jsxRuntime.jsx(reactKatex.InlineMath, {
                    children: value
                }, void 0)
            ]
        }, void 0);
    },
    list (param) {
        let { children  } = param;
        return children;
    },
    listItem (param) {
        let { children  } = param;
        return jsxRuntime.jsxs("span", {
            children: [
                " ",
                children,
                " "
            ]
        }, void 0);
    },
    paragraph (param) {
        let { children  } = param;
        return jsxRuntime.jsxs("span", {
            children: [
                children,
                " "
            ]
        }, void 0);
    },
    neonPanel (param) {
        let { children  } = param;
        return children;
    },
    // drag and drop
    neonTerms (param) {
        let { children  } = param;
        return jsxRuntime.jsxs(jsxRuntime.Fragment, {
            children: [
                jsxRuntime.jsx(Box, Object.assign({
                    as: "span",
                    backgroundColor: "colorAtomiBluesLighter",
                    borderRadius: "borderRadiusSmall",
                    display: "inline-block",
                    paddingInline: "spacingSmall2X"
                }, {
                    children: children
                }), void 0),
                ' '
            ]
        }, void 0);
    },
    strong (param) {
        let { children  } = param;
        return jsxRuntime.jsxs("span", {
            children: [
                children,
                " "
            ]
        }, void 0);
    }
};
function MarkdownPreview(props) {
    const { children , lines =2  } = props;
    const allowedElements = [
        'emphasis',
        'root',
        'paragraph',
        'text',
        'strong',
        'html',
        'heading',
        'list',
        'listItem', 
    ];
    const regexPatterns = {
        editorContent: /(::(.*?)})/g,
        editorPanels: /:::.*/g
    };
    // strip out Editor markdown syntax
    const strippedMarkdown = children.replace(regexPatterns.editorContent, '').replace(regexPatterns.editorPanels, '');
    return jsxRuntime.jsx(Markdown, Object.assign({
        className: markdownStyles.preview,
        as: "p",
        customRenderers: renderers,
        allowedElements: allowedElements,
        vars: {
            [markdownStyles['--preview-line-clamp']]: lines.toString()
        }
    }, {
        children: strippedMarkdown
    }), void 0);
}

const sharedStyles$3 = {
    gap: 'spacingLarge'
};
const smallStyles$3 = {
    ...sharedStyles$3,
    justifyContent: 'flex-end'
};
const mediumStyles$3 = {
    ...sharedStyles$3,
    justifyContent: {
        base: 'space-between',
        tablet: 'flex-end'
    }
};
const fullscreenStyles$1 = {
    ...sharedStyles$3,
    marginLeft: 'auto'
};
const sizeStylesMapping$3 = {
    small: smallStyles$3,
    medium: mediumStyles$3,
    fullscreen: fullscreenStyles$1
};
function ModalActions(props) {
    const { children , size =defaultSize  } = props;
    return jsxRuntime.jsx(Flex, Object.assign({}, sizeStylesMapping$3[size], {
        children: children
    }), void 0);
}

const sharedStyles$2 = {
    height: 'sizeFull'
};
const smallStyles$2 = {
    ...sharedStyles$2,
    paddingBlock: 'spacingLarge3X',
    paddingInline: {
        base: 'spacingLarge1X',
        tablet: 'spacingLarge3X'
    }
};
const mediumStyles$2 = {
    ...sharedStyles$2,
    paddingBlock: 'spacingLarge3X',
    paddingInline: {
        base: 'spacingRoot',
        tablet: 'spacingLarge3X'
    }
};
const sizeStylesMapping$2 = {
    fullscreen: sharedStyles$2,
    medium: mediumStyles$2,
    small: smallStyles$2
};
function ModalBody(props) {
    const { children , size =defaultSize , scroll  } = props;
    return jsxRuntime.jsx(Box, Object.assign({
        overflowY: scroll === 'body' ? 'auto' : undefined
    }, sizeStylesMapping$2[size], {
        children: children
    }), void 0);
}

const sharedStyles$1 = {
    flexShrink: 0,
    marginTop: 'auto'
};
const mediumStyles$1 = {
    ...sharedStyles$1,
    borderTopColor: 'colorFiftyShadesLighter',
    borderTopStyle: 'solid',
    borderTopWidth: 'borderWidthRoot',
    marginTop: 'auto',
    paddingBlock: {
        base: 'spacingRoot',
        tablet: 'spacingLarge1X'
    },
    paddingInline: {
        base: 'spacingRoot',
        tablet: 'spacingLarge3X'
    }
};
const smallStyles$1 = {
    ...sharedStyles$1,
    paddingBottom: {
        base: 'spacingLarge1X',
        tablet: 'spacingLarge3X'
    },
    paddingInline: {
        base: 'spacingLarge1X',
        tablet: 'spacingLarge3X'
    }
};
const sizeStylesMapping$1 = {
    medium: mediumStyles$1,
    small: smallStyles$1
};
function ModalFooter(props) {
    const { children , size =defaultSize  } = props;
    return jsxRuntime.jsx(Box, Object.assign({}, sizeStylesMapping$1[size], {
        children: children
    }), void 0);
}

function useTouchTarget() {
    let size = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 'spacingLarge1X';
    return {
        _after: {
            content: '""',
            display: 'block',
            left: '50%',
            padding: size,
            position: 'absolute',
            top: '50%',
            transform: 'translate(-50%, -50%)'
        }
    };
}

function ModalCloseButton(props) {
    const { onClick , withText  } = props;
    const touchTargetStyles = useTouchTarget();
    const isTabletUp = useMedia({
        minWidth: breakpoints.breakpointMediumFrom
    });
    const isTextVisible = withText && isTabletUp;
    return jsxRuntime.jsxs(Box, Object.assign({
        "aria-label": !isTextVisible ? 'close' : undefined,
        as: "button",
        type: "button",
        onClick: onClick,
        color: "colorInteractiveLink",
        display: "inline-flex",
        alignItems: "center",
        gap: "spacingSmall",
        padding: isTextVisible ? 'spacingSmall' : undefined,
        position: "relative",
        transition: "transitionRoot",
        _hover: {
            color: 'colorInteractiveLinkHover'
        }
    }, !isTextVisible && touchTargetStyles, {
        children: [
            isTextVisible && jsxRuntime.jsx(Text, Object.assign({
                variant: "bodySmall1X",
                color: "inherit"
            }, {
                children: "Close"
            }), void 0),
            jsxRuntime.jsx(Icon, {
                name: "close",
                size: "sizeIconSmall2X",
                strokeWidth: "2"
            }, void 0)
        ]
    }), void 0);
}
const actionStyles = {
    borderBottomColor: 'colorFiftyShadesLighter',
    borderBottomStyle: 'solid',
    borderBottomWidth: 'borderWidthRoot',
    alignItems: 'center',
    display: 'flex',
    flexShrink: 0,
    gap: 'spacingLarge',
    justifyContent: 'space-between',
    paddingBlock: 'spacingSmall',
    paddingInline: {
        base: 'spacingRoot',
        tablet: 'spacingLarge3X'
    },
    overflow: 'hidden'
};
const viewStyles = {
    display: 'flex',
    justifyContent: 'flex-end',
    paddingBlock: {
        base: 'spacingRoot',
        tablet: 'spacingSmall2X'
    },
    paddingInline: {
        base: 'spacingRoot',
        tablet: 'spacingLarge'
    }
};
const variantStylesMapping$1 = {
    view: viewStyles
};
function ModalHeader(props) {
    const { children , onClose , size , variant  } = props;
    return jsxRuntime.jsx(Box, Object.assign({}, variant ? variantStylesMapping$1[variant] : actionStyles, {
        children: size === 'fullscreen' ? jsxRuntime.jsxs(jsxRuntime.Fragment, {
            children: [
                jsxRuntime.jsx(ModalCloseButton, {
                    onClick: onClose,
                    withText: variant === 'view'
                }, void 0),
                children
            ]
        }, void 0) : jsxRuntime.jsxs(jsxRuntime.Fragment, {
            children: [
                children,
                jsxRuntime.jsx(ModalCloseButton, {
                    onClick: onClose
                }, void 0)
            ]
        }, void 0)
    }), void 0);
}

function ModalOverlay(props) {
    const { scroll , size , ...otherProps } = props;
    const scrollBody = scroll === 'body';
    return jsxRuntime.jsx(Box, Object.assign({}, otherProps, {
        alignItems: scrollBody ? 'center' : 'start',
        display: "flex",
        justifyContent: "center",
        paddingBlock: size !== 'fullscreen' ? {
            base: undefined,
            tablet: 'spacingLarge3X'
        } : undefined,
        zIndex: "zIndex2",
        as: dialog.DialogOverlay,
        overflow: scrollBody ? 'hidden' : undefined
    }), void 0);
}

function useModalHeading(props) {
    const { heading , size  } = props;
    const isMobile = useMedia({
        maxWidth: breakpoints.breakpointMedium
    });
    const headingId = useId('ModalHeading');
    return [
        headingId,
        jsxRuntime.jsx(Heading, Object.assign({
            id: headingId,
            size: size === 'fullscreen' || isMobile ? 'medium' : 'large'
        }, {
            children: heading
        }), void 0), 
    ];
}

const sizes = {
    small: 'small',
    medium: 'medium',
    fullscreen: 'fullscreen'
};
const defaultSize = sizes.medium;
const sharedStyles = {
    padding: 'spacingNone',
    position: 'relative',
    width: 'sizeFull'
};
const smallStyles = {
    ...sharedStyles,
    borderRadius: 'borderRadiusRoot',
    marginInline: {
        base: 'spacingLarge',
        tablet: 'auto'
    },
    maxWidth: 'sizeModalSmall'
};
const mediumStyles = {
    ...sharedStyles,
    borderRadius: {
        base: undefined,
        tablet: 'borderRadiusRoot'
    },
    display: 'flex',
    flexDirection: 'column',
    height: {
        base: 'sizeFull',
        tablet: 'auto'
    },
    marginBlock: {
        base: 'spacingNone',
        tablet: 'spacingLarge'
    },
    maxHeight: {
        base: undefined,
        tablet: `sizeFull`
    },
    maxWidth: {
        base: 'sizeFull',
        tablet: 'sizeModalRoot'
    },
    minHeight: {
        base: undefined,
        tablet: 'sizeSmall3X'
    }
};
const scrollPageStyles = {
    height: undefined,
    maxHeight: undefined,
    minHeight: {
        base: 'sizeFull',
        tablet: 'sizeSmall3X'
    },
    marginTop: {
        base: 'spacingNone',
        tablet: 'spacingLarge9X'
    }
};
const fullscreenStyles = {
    ...sharedStyles,
    display: 'flex',
    flexDirection: 'column',
    height: 'sizeFull',
    margin: 'spacingNone',
    maxWidth: 'sizeFull'
};
const sizeStylesMapping = {
    small: smallStyles,
    medium: mediumStyles,
    fullscreen: fullscreenStyles
};
function ModalContent(props) {
    const { size =defaultSize , scroll: scroll1 , ...otherProps } = props;
    const scrollPage = scroll1 === 'page';
    return jsxRuntime.jsx(Box, Object.assign({}, otherProps, sizeStylesMapping[size], scrollPage && scrollPageStyles, {
        as: dialog.DialogContent
    }), void 0);
}
function Modal(props) {
    const { actions , ariaLabelledBy , children , heading , initialFocusRef , isOpen , onClose , scroll: scroll2 = 'body' , size =defaultSize , variant ,  } = props;
    const [headingId, modalHeading] = useModalHeading({
        heading,
        size
    });
    const isFullscreen = size === 'fullscreen';
    const isSmall = size === 'small';
    const withHeader = !isSmall && (heading || actions || variant === 'view');
    const withFooter = !isFullscreen && actions;
    return jsxRuntime.jsx(ModalOverlay, Object.assign({
        size: size,
        isOpen: isOpen,
        onDismiss: onClose,
        initialFocusRef: initialFocusRef,
        scroll: scroll2
    }, {
        children: jsxRuntime.jsxs(ModalContent, Object.assign({
            "aria-labelledby": ariaLabelledBy || (!isSmall ? headingId : undefined),
            "aria-label": isSmall ? heading : undefined,
            size: size,
            scroll: scroll2
        }, {
            children: [
                withHeader && jsxRuntime.jsxs(ModalHeader, Object.assign({
                    size: size,
                    variant: variant,
                    onClose: onClose
                }, {
                    children: [
                        heading && modalHeading,
                        isFullscreen && actions && jsxRuntime.jsx(ModalActions, Object.assign({
                            size: size
                        }, {
                            children: actions
                        }), void 0)
                    ]
                }), void 0),
                jsxRuntime.jsx(ModalBody, Object.assign({
                    size: size,
                    scroll: scroll2
                }, {
                    children: children
                }), void 0),
                withFooter && jsxRuntime.jsx(ModalFooter, Object.assign({
                    size: size
                }, {
                    children: jsxRuntime.jsx(ModalActions, Object.assign({
                        size: size
                    }, {
                        children: actions
                    }), void 0)
                }), void 0)
            ]
        }), void 0)
    }), void 0);
}

var styles$i = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","menu":"MultiSelect_menu__djMWB","panelSlideDown":"MultiSelect_panelSlideDown__12OgP","menuFooter":"MultiSelect_menuFooter__jUE2Z","done":"MultiSelect_done__XDM9k","spacer":"MultiSelect_spacer__G30Du","uncheckAll":"MultiSelect_uncheckAll__69dRs","items":"MultiSelect_items__Z9B7N","item":"MultiSelect_item__r2BVh","search":"MultiSelect_search__epAjf","emptyState":"MultiSelect_emptyState__6hsjX","drawerHeader":"MultiSelect_drawerHeader__GIYMk","drawerFooter":"MultiSelect_drawerFooter__lohrW"};

const focus = (ref)=>{
    var ref1;
    return (ref1 = ref.current) === null || ref1 === void 0 ? void 0 : ref1.focus();
};
function reducer(state, action) {
    switch(action.type){
        case 'openPopover':
            return {
                ...state,
                popoverIsOpen: true
            };
        case 'openDrawer':
            return {
                ...state,
                drawerIsOpen: true
            };
        case 'close':
            return {
                ...state,
                popoverIsOpen: false,
                drawerIsOpen: false
            };
        case 'change':
            {
                const { option , value  } = action;
                // make a copy to avoid in-place mutations
                const newOptions = state.options.slice();
                // `splice` returns the items that were replaced, not the new array.
                // It also mutates the array.
                newOptions.splice(newOptions.indexOf(option), 1, {
                    ...option,
                    checked: value
                });
                return {
                    ...state,
                    options: newOptions
                };
            }
        case 'changeAll':
            {
                const { value  } = action;
                return {
                    ...state,
                    options: state.options.map((option)=>({
                            ...option,
                            checked: value
                        })
                    )
                };
            }
        case 'search':
            {
                const { value  } = action;
                return {
                    ...state,
                    searchQuery: value
                };
            }
        /* istanbul ignore next */ default:
            return state;
    }
}
function MultiSelect(props) {
    const { ariaLabel , id , isDisabled , trigger , doneLabel , checkAllLabel , searchEmptyState , searchPlaceholder , uncheckAllLabel , options =[] , onChange , onClose , drawerProps , popoverPosition , testHook ,  } = props;
    const triggerRef = react.useRef(null);
    const popoverRef = react.useRef(null);
    const checkAllRef = react.useRef(null);
    // TS: We technically shouldn't need to define the useReducer<T, I>, but the
    // way its overloaded it defaults to a DispatchWithoutAction
    const [{ popoverIsOpen , drawerIsOpen , searchQuery , options: stateOptions  }, dispatch] = react.useReducer(reducer, undefined, ()=>({
            popoverIsOpen: false,
            drawerIsOpen: false,
            searchQuery: '',
            options
        })
    );
    const matches = useMedia({
        minWidth: breakpoints.breakpointMediumFrom
    });
    const selectedOptions = react.useMemo(()=>stateOptions.filter((option)=>option.checked
        )
    , [
        stateOptions
    ]);
    const searchResults = stateOptions.filter((option)=>option.value.toLowerCase().includes(searchQuery.toLowerCase())
    );
    const hasSearchResults = searchResults.length > 0;
    const checkAllChecked = hasSearchResults && searchResults.every((option)=>option.checked
    );
    const checkboxRefs = searchResults.map(()=>/*#__PURE__*/ react.createRef()
    );
    const triggerOnChange = react.useCallback(()=>{
        onChange(selectedOptions);
    }, [
        onChange,
        selectedOptions
    ]);
    const close = react.useCallback(()=>{
        dispatch({
            type: 'close'
        });
        onClose === null || onClose === void 0 ? void 0 : onClose(selectedOptions); // eslint-disable-line no-unused-expressions
        focus(triggerRef);
    }, [
        onClose,
        selectedOptions
    ]);
    const closeAndCommit = react.useCallback(()=>{
        triggerOnChange();
        close();
    }, [
        close,
        triggerOnChange
    ]);
    const searchFor = (value)=>dispatch({
            type: 'search',
            value
        })
    ;
    const clearSearchOnClick = ()=>{
        searchFor('');
    };
    const checkAllOnChange = (value)=>dispatch({
            type: 'changeAll',
            value
        })
    ;
    const popoverOnKeyDown = (event)=>{
        if (event.key === 'Escape') {
            // prevent event from bubbling up e.g. when used in a modal
            event.stopPropagation();
            close();
        }
    };
    useLatch({
        // trigger when either the popover or the drawer is open
        value: drawerIsOpen !== popoverIsOpen,
        onChange (value) {
            if (value) {
                // We use `setImmediate` to steal focus from @reach/popover which
                // focuses on the first focusable descendant which is the close button.
                setTimeout(()=>{
                    // Focus the "check all" checkbox if checked
                    // - else the first option if checked
                    // - else the "check all" checkbox, if none are checked
                    // https://www.w3.org/TR/wai-aria-practices-1.2/#listbox_kbd_interaction
                    // Looking at the DOM input state would certainly be easier, but is
                    // not The React Way. There should be only one source of truth whcih
                    // is why we need to do this complicated dance to get the information
                    // from state. And it makes automated testing harder.
                    if (checkAllChecked) return focus(checkAllRef);
                    const firstCheckedIndex = ___default["default"].findIndex(searchResults, (option)=>!!option.checked
                    );
                    if (firstCheckedIndex >= 0) return focus(checkboxRefs[firstCheckedIndex]);
                    focus(checkAllRef);
                }, 0);
            }
        }
    });
    react.useEffect(()=>{
        if (popoverIsOpen) {
            triggerOnChange();
        }
    }, [
        popoverIsOpen,
        triggerOnChange,
        stateOptions
    ]);
    react.useEffect(()=>{
        const listener = (event)=>{
            var ref;
            const { relatedTarget , target  } = event;
            if (popoverIsOpen && !((ref = popoverRef.current) === null || ref === void 0 ? void 0 : ref.contains(relatedTarget || target))) {
                close();
            }
        };
        window.addEventListener('mousedown', listener);
        return ()=>{
            window.removeEventListener('mousedown', listener);
        };
    }, [
        close,
        popoverIsOpen
    ]);
    const checkAll = jsxRuntime.jsxs("label", Object.assign({
        className: styles$i.item
    }, {
        children: [
            jsxRuntime.jsx(Checkbox, {
                ref: checkAllRef,
                size: "small",
                checked: checkAllChecked,
                onChange: checkAllOnChange,
                isDisabled: !hasSearchResults,
                testHook: testHook && `${testHook}-check-all`
            }, void 0),
            checkAllLabel
        ]
    }), void 0);
    const done = jsxRuntime.jsxs("div", Object.assign({
        className: styles$i.done
    }, {
        children: [
            jsxRuntime.jsx(Drawer.CloseButton, {
                onClick: close,
                testHook: testHook && `${testHook}-close`
            }, void 0),
            jsxRuntime.jsx("div", {
                className: styles$i.spacer
            }, void 0),
            jsxRuntime.jsx(Button, Object.assign({
                variant: "link",
                onClick: closeAndCommit,
                testHook: testHook && `${testHook}-done`,
                isDisabled: !hasSearchResults
            }, {
                children: doneLabel
            }), void 0)
        ]
    }), void 0);
    const search = jsxRuntime.jsx(Box, Object.assign({
        className: styles$i.search
    }, {
        children: jsxRuntime.jsx(SearchInput, {
            onChange: (e)=>{
                return searchFor(e === null || e === void 0 ? void 0 : e.target.value);
            },
            onReset: clearSearchOnClick,
            placeholder: searchPlaceholder,
            value: searchQuery,
            testHook: testHook
        }, void 0)
    }), void 0);
    const uncheckAll = jsxRuntime.jsx("div", Object.assign({
        className: styles$i.uncheckAll
    }, {
        children: jsxRuntime.jsx(Button, Object.assign({
            variant: "link",
            onClick: ()=>dispatch({
                    type: 'changeAll',
                    value: false
                })
            ,
            isDisabled: !hasSearchResults,
            testHook: testHook && `${testHook}-uncheck-all`
        }, {
            children: uncheckAllLabel
        }), void 0)
    }), void 0);
    const checkboxItems = searchResults.map((option, i)=>jsxRuntime.jsxs("label", Object.assign({
            className: styles$i.item
        }, {
            children: [
                jsxRuntime.jsx(Checkbox, Object.assign({}, option, {
                    ref: checkboxRefs[i],
                    label: undefined,
                    size: "small",
                    onChange: (value)=>dispatch({
                            type: 'change',
                            option,
                            value
                        })
                    ,
                    testHook: testHook && `${testHook}-item-${i}`
                }), void 0),
                option.label
            ]
        }), void 0)
    );
    const emptyState = jsxRuntime.jsx("div", Object.assign({
        className: cx__default["default"](styles$i.item, styles$i.emptyState)
    }, {
        children: searchEmptyState
    }), void 0);
    function Items(itemsProps) {
        const { children  } = itemsProps;
        return jsxRuntime.jsx("div", Object.assign({
            className: styles$i.items
        }, {
            children: jsxRuntime.jsx(AutoSizer__default["default"], {
                children: (param1)=>{
                    let { height , width  } = param1;
                    return jsxRuntime.jsx(reactWindow.FixedSizeList, Object.assign({
                        innerElementType: "ul",
                        height: height,
                        itemCount: checkboxItems.length,
                        itemSize: 48,
                        width: width
                    }, {
                        children: (param)=>{
                            let { index , style  } = param;
                            return children({
                                index,
                                style: style
                            });
                        }
                    }), void 0);
                }
            }, void 0)
        }), void 0);
    }
    return jsxRuntime.jsxs(jsxRuntime.Fragment, {
        children: [
            jsxRuntime.jsx("button", Object.assign({
                ref: triggerRef,
                id: id,
                disabled: isDisabled,
                "aria-label": ariaLabel,
                type: "button",
                onClick: ()=>dispatch({
                        type: matches ? 'openPopover' : 'openDrawer'
                    })
                ,
                "data-test": testHook && `${testHook}-trigger`
            }, {
                children: /*#__PURE__*/ react.cloneElement(trigger, {
                    isDisabled
                })
            }), void 0),
            popoverIsOpen && jsxRuntime.jsxs(Popover__default["default"], Object.assign({
                ref: popoverRef,
                className: styles$i.menu,
                targetRef: triggerRef,
                // @ts-ignore TODO-TS[ENHANCEMENT] correct types
                onKeyDown: popoverOnKeyDown,
                position: popoverPosition,
                "data-test": testHook && `${testHook}-popover`
            }, {
                children: [
                    checkAll,
                    search,
                    hasSearchResults ? jsxRuntime.jsx(Items, {
                        children: (param)=>{
                            let { index , style  } = param;
                            return jsxRuntime.jsx("li", Object.assign({
                                style: style
                            }, {
                                children: jsxRuntime.jsx(MenuItem, {
                                    children: checkboxItems[index]
                                }, void 0)
                            }), void 0);
                        }
                    }, void 0) : emptyState,
                    jsxRuntime.jsx("div", Object.assign({
                        className: styles$i.menuFooter
                    }, {
                        children: uncheckAll
                    }), void 0)
                ]
            }), void 0),
            drawerIsOpen && jsxRuntime.jsxs(Drawer, Object.assign({}, drawerProps, {
                ariaLabel: ariaLabel,
                isOpen: true,
                onClose: close,
                testHook: testHook && `${testHook}-drawer`,
                variant: "noMaxHeight"
            }, {
                children: [
                    jsxRuntime.jsx(Drawer.Header, {
                        children: jsxRuntime.jsx("div", Object.assign({
                            className: styles$i.drawerHeader
                        }, {
                            children: done
                        }), void 0)
                    }, void 0),
                    jsxRuntime.jsxs(Drawer.Content, Object.assign({
                        withPadding: false
                    }, {
                        children: [
                            jsxRuntime.jsx(Drawer.Item, {
                                children: checkAll
                            }, void 0),
                            jsxRuntime.jsx(Drawer.Item, Object.assign({
                                fadedOut: true
                            }, {
                                children: search
                            }), void 0),
                            hasSearchResults ? jsxRuntime.jsx(Items, {
                                children: (param)=>{
                                    let { index , style  } = param;
                                    return jsxRuntime.jsx(Drawer.Item, Object.assign({
                                        style: style
                                    }, {
                                        children: checkboxItems[index]
                                    }), searchResults[index].value);
                                }
                            }, void 0) : emptyState
                        ]
                    }), void 0),
                    jsxRuntime.jsx(Drawer.Footer, {
                        children: jsxRuntime.jsx(Drawer.Item, {
                            children: jsxRuntime.jsx("div", Object.assign({
                                className: styles$i.drawerFooter
                            }, {
                                children: uncheckAll
                            }), void 0)
                        }, void 0)
                    }, void 0)
                ]
            }), void 0)
        ]
    }, void 0);
}
MultiSelect.Trigger = SelectTrigger;

function useFocusRing() {
    const { isFocusVisible , ...rest } = focus$1.useFocusRing();
    return {
        isFocusVisible,
        focusStyles: isFocusVisible ? {
            outlineWidth: 'borderWidthLarge1X',
            outlineColor: 'colorInteractiveFocusRing',
            outlineStyle: 'solid',
            outlineOffset: 'spacingSmall3X'
        } : undefined,
        ...rest
    };
}

const OptionGroupContext = /*#__PURE__*/ react.createContext(null);
function useOptionGroupContext() {
    const context = react.useContext(OptionGroupContext);
    invariant__default["default"](context, 'useOptionGroupContext must be used within a OptionGroupContext.Provider.');
    return context;
}

const defaultStyles$2 = {
    alignItems: 'center',
    borderRadius: 'borderRadiusRoot',
    boxShadow: 'boxShadowBorderInset',
    color: 'colorCoreText',
    display: 'flex',
    fontFamily: 'fontFamilySystem',
    fontSize: 'fontSizeSmall',
    width: 'sizeFull',
    justifyContent: 'center',
    letterSpacing: 'letterSpacingRoot',
    lineHeight: 'lineHeightSmall1X',
    padding: 'spacingRoot',
    textAlign: 'center',
    transition: 'transitionRoot',
    _activeEnabled: {
        backgroundColor: 'colorAtomiBluesLighter',
        color: 'colorCoreText'
    }
};
const hoverStyles = {
    boxShadow: 'boxShadowBorderInsetFocused',
    color: 'colorInteractiveLink'
};
const selectedStyles$1 = {
    boxShadow: 'boxShadowBorderInsetSelected',
    color: 'colorInteractiveLink'
};
const disabledStyles$1 = {
    backgroundColor: 'colorFiftyShadesLightest',
    boxShadow: 'boxShadowBorderInsetDisabled',
    color: 'colorFiftyShadesRoot',
    cursor: 'not-allowed'
};
const squareStyles$1 = {
    ...defaultStyles$2,
    aspectRatio: '1 / 1',
    // padding-block for browsers which don't support the aspect-ratio property
    paddingBlock: `spacingLarge4X`,
    paddingInline: 'spacingSmall2X',
    // @ts-ignore using custom size for that specific component
    maxHeight: '200px'
};
const errorStyles = {
    boxShadow: 'boxShadowBorderInsetError'
};
const errorHoverStyles = {
    boxShadow: 'boxShadowBorderInsetErrorFocused',
    color: 'colorCoreText'
};
const warningStyles = {
    boxShadow: 'boxShadowBorderInsetWarning'
};
const warningHoverStyles = {
    boxShadow: 'boxShadowBorderInsetWarningFocused',
    color: 'colorCoreText'
};
const variantStylesMapping = {
    square: squareStyles$1
};
const errorVariantStylesMapping = {
    error: errorStyles,
    warning: warningStyles
};
const errorVariantHoverStylesMapping = {
    error: errorHoverStyles,
    warning: warningHoverStyles
};
function Option$1(props) {
    const { children , iconName , info , isDisabled , tooltip , inputProps , isSelected , inputRef  } = props;
    const { errorVariant , variant  } = useOptionGroupContext();
    const infoId = useId('OptionInfo');
    const { focusProps , focusStyles , isFocusVisible  } = useFocusRing();
    const { hoverProps , isHovered  } = interactions.useHover({
        isDisabled
    });
    const hasCustomIconColor = !isFocusVisible && !isHovered && !isDisabled && !isSelected;
    const option = jsxRuntime.jsxs(Box, Object.assign({
        as: "label"
    }, {
        children: [
            jsxRuntime.jsx(HideVisually, {
                children: jsxRuntime.jsx("input", Object.assign({}, inputProps, focusProps, {
                    ref: inputRef,
                    "aria-describedby": info ? infoId : undefined
                }), void 0)
            }, void 0),
            jsxRuntime.jsxs(Stack, Object.assign({
                spacing: "spacingSmall2X"
            }, {
                children: [
                    jsxRuntime.jsx(Box, Object.assign({}, hoverProps, variant ? variantStylesMapping[variant] : defaultStyles$2, errorVariant && errorVariantStylesMapping[errorVariant], focusStyles, isHovered && (errorVariant ? errorVariantHoverStylesMapping[errorVariant] : hoverStyles), isSelected && selectedStyles$1, isDisabled && disabledStyles$1, {
                        children: jsxRuntime.jsxs(Stack, Object.assign({
                            spacing: "spacingSmall1X"
                        }, {
                            children: [
                                iconName && jsxRuntime.jsx(Icon, {
                                    name: iconName,
                                    size: "sizeIconLarge1X",
                                    color: hasCustomIconColor ? 'colorFiftyShadesDark' : undefined,
                                    display: "inline-block",
                                    strokeWidth: isSelected ? '2' : undefined
                                }, void 0),
                                children
                            ]
                        }), void 0)
                    }), void 0),
                    info && jsxRuntime.jsx(Text, Object.assign({
                        id: infoId,
                        variant: "bodySmall2X",
                        color: isDisabled ? 'colorFiftyShadesLight' : 'colorFiftyShadesDark',
                        textAlign: "center"
                    }, {
                        children: info
                    }), void 0)
                ]
            }), void 0)
        ]
    }), void 0);
    return tooltip ? jsxRuntime.jsx(Tooltip, Object.assign({
        content: tooltip,
        appendTo: "parent"
    }, {
        children: jsxRuntime.jsx("button", Object.assign({
            type: "button"
        }, {
            children: option
        }), void 0)
    }), void 0) : option;
}

const defaultStyles$1 = {
    display: 'grid',
    gap: 'spacingRoot',
    gridTemplateColumns: {
        base: undefined,
        mobile: 'repeat(3, 1fr)'
    }
};
const squareStyles = {
    ...defaultStyles$1,
    gridTemplateColumns: {
        base: 'repeat(2, 1fr)',
        mobile: 'repeat(3, 1fr)'
    }
};
function OptionGroupGrid(props) {
    const { children , variant  } = props;
    return jsxRuntime.jsx(Box, Object.assign({}, variant === 'square' ? squareStyles : defaultStyles$1, {
        children: children
    }), void 0);
}

function mapAriaLabelProps(props) {
    const { ariaLabel , ariaLabelledBy , ...otherProps } = props;
    return {
        ...otherProps,
        'aria-label': ariaLabel,
        'aria-labelledby': ariaLabelledBy
    };
}
const CheckboxGroup = /*#__PURE__*/ react.forwardRef(function CheckboxGroup(props, ref) {
    const { children , errorVariant , label , variant  } = props;
    const state = checkbox$1.useCheckboxGroupState(props);
    const { groupProps , labelProps  } = checkbox$2.useCheckboxGroup(mapAriaLabelProps(props), state);
    return jsxRuntime.jsxs(Box, Object.assign({}, groupProps, {
        ref: ref,
        tabIndex: -1
    }, {
        children: [
            label && jsxRuntime.jsx(Label, Object.assign({
                as: "span"
            }, labelProps, {
                children: label
            }), void 0),
            jsxRuntime.jsx(OptionGroupContext.Provider, Object.assign({
                value: {
                    state,
                    selectionMode: 'multiple',
                    errorVariant,
                    variant
                }
            }, {
                children: jsxRuntime.jsx(OptionGroupGrid, Object.assign({
                    variant: variant
                }, {
                    children: children
                }), void 0)
            }), void 0)
        ]
    }), void 0);
});
function CheckboxGroupItem(props) {
    const state = useOptionGroupContext().state;
    const ref = react.useRef(null);
    const { inputProps  } = checkbox$2.useCheckboxGroupItem(props, state, ref);
    const isSelected = state.isSelected(props.value);
    return jsxRuntime.jsx(Option$1, Object.assign({}, props, {
        inputProps: inputProps,
        inputRef: ref,
        isSelected: isSelected
    }), void 0);
}
const RadioGroup$1 = /*#__PURE__*/ react.forwardRef(function RadioGroup(props, ref) {
    const { children , errorVariant , label , variant  } = props;
    const state = radio.useRadioGroupState(props);
    const { radioGroupProps , labelProps  } = radio$1.useRadioGroup(mapAriaLabelProps(props), state);
    return jsxRuntime.jsxs(Box, Object.assign({}, radioGroupProps, {
        ref: ref,
        tabIndex: -1
    }, {
        children: [
            label && jsxRuntime.jsx(Label, Object.assign({
                as: "span"
            }, labelProps, {
                children: label
            }), void 0),
            jsxRuntime.jsx(OptionGroupContext.Provider, Object.assign({
                value: {
                    state,
                    selectionMode: 'single',
                    errorVariant,
                    variant
                }
            }, {
                children: jsxRuntime.jsx(OptionGroupGrid, Object.assign({
                    variant: variant
                }, {
                    children: children
                }), void 0)
            }), void 0)
        ]
    }), void 0);
});
function RadioGroupItem(props) {
    const state = useOptionGroupContext().state;
    const ref = react.useRef(null);
    const { inputProps  } = radio$1.useRadio(props, state, ref);
    const isSelected = state.selectedValue === props.value;
    return jsxRuntime.jsx(Option$1, Object.assign({}, props, {
        inputProps: inputProps,
        inputRef: ref,
        isSelected: isSelected
    }), void 0);
}
const OptionGroup = /*#__PURE__*/ react.forwardRef(function OptionGroup(props, ref) {
    const { errorVariant , selectionMode ='single' , validationText  } = props;
    const validationTextId = useId('OptionGroupValidationText');
    const groupProps = {
        ...props,
        'aria-describedby': validationText ? validationTextId : undefined,
        ref
    };
    return jsxRuntime.jsxs(Box, Object.assign({
        // Workaround for OptionGroup focus issue in dialogs:
        // https://github.com/adobe/react-spectrum/issues/2380
        onMouseDown: (e)=>e.preventDefault()
    }, {
        children: [
            selectionMode === 'single' ? jsxRuntime.jsx(RadioGroup$1, Object.assign({}, groupProps), void 0) : jsxRuntime.jsx(CheckboxGroup, Object.assign({}, groupProps), void 0),
            validationText && jsxRuntime.jsx(HelpText, Object.assign({
                id: validationTextId,
                variant: errorVariant
            }, {
                children: validationText
            }), void 0)
        ]
    }), void 0);
});
function OptionGroupItem(props) {
    const { selectionMode  } = useOptionGroupContext();
    if (selectionMode === 'single') {
        return jsxRuntime.jsx(RadioGroupItem, Object.assign({}, props), void 0);
    }
    return jsxRuntime.jsx(CheckboxGroupItem, Object.assign({}, props), void 0);
}
function OptionGroupLoader(props) {
    const { count , variant  } = props;
    const isSquare = variant === 'square';
    const squareStyles = {
        height: 'unset',
        maxHeight: {
            base: 'inherit',
            tablet: 200
        },
        position: 'relative',
        _before: {
            content: '""',
            display: 'block',
            paddingBottom: '100%'
        }
    };
    return jsxRuntime.jsx(OptionGroupGrid, Object.assign({
        variant: variant
    }, {
        children: ___default["default"].times(count, (i)=>jsxRuntime.jsx(Skeleton, Object.assign({
                height: 50
            }, isSquare && squareStyles), i)
        )
    }), void 0);
}

var styles$h = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","root":"PhoneField_root__-kfqK","panelSlideDown":"PhoneField_panelSlideDown__tCKUR","isDisabled":"PhoneField_isDisabled__LRBUJ"};

const PhoneField = /*#__PURE__*/ react.forwardRef(function PhoneField(props, ref2) {
    const { initialCountry , isDisabled , localizedCountries , onlyCountries =[] , onChange , preferredCountries =[] , value , ...textFieldProps } = props;
    const textFieldContainerRef = react.useRef(null);
    const textFieldRef = react.useRef(null);
    const textFieldMergedRef = useMergedRef__default["default"](ref2, textFieldRef);
    const itiRef = react.useRef(null);
    const onChangeHandler = react.useCallback((e)=>{
        const { current: iti  } = itiRef;
        if (iti) {
            onChange({
                isValid: iti.isValidNumber(),
                number: iti.getNumber(),
                value: e.currentTarget.value
            });
        }
    }, [
        onChange
    ]);
    // initialise the intl-tel-input lib on mount only
    react.useEffect(()=>{
        var // intl-tel-input exposes a promise for when the utilsScript has completed.
        // Once it has loaded we will trigger one initial onChange so the comsumer
        // can get the current { isValid, number, value } value.
        //
        // This won't overwrite the users input if the util script is slow to load
        // because it is only referencing the value in the actual input and not
        // internal state
        ref3;
        // TODO-TS technically want to avoid ! outside of tests imo. it would require a behaviour change without though, thoughts?
        const iti = intlTelInput__default["default"](textFieldRef.current, {
            // The utility script is not part of the intl-tel-input lib so that it can
            // be loaded once the consumer page finished loading
            // https://github.com/jackocnr/intl-tel-input#utilities-script
            utilsScript: 'https://cdn.jsdelivr.net/npm/intl-tel-input@17.0.3/build/js/utils.js',
            initialCountry,
            localizedCountries,
            onlyCountries,
            preferredCountries,
            customContainer: cx__default["default"](styles$h.root, {
                [styles$h.isDisabled]: isDisabled
            }),
            separateDialCode: true
        });
        itiRef.current = iti;
        if (value) {
            var ref1;
            (ref1 = itiRef.current) === null || ref1 === void 0 ? void 0 : ref1.setNumber(value);
        }
        (ref3 = itiRef.current) === null || ref3 === void 0 ? void 0 : ref3.promise.then(()=>{
            var ref;
            if ((ref = itiRef.current) === null || ref === void 0 ? void 0 : ref.telInput) {
                onChangeHandler({
                    currentTarget: {
                        value: itiRef.current.telInput.value
                    }
                });
            }
        });
        return ()=>{
            var ref;
            (ref = itiRef.current) === null || ref === void 0 ? void 0 : ref.destroy();
        }; // the configuration props such as initialCountry won't change after the
    // initial mount so we can run that effect on mount only to prevent
    // initialising the plugin multiple times.
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    // handle country dropdown listeners:
    // https://github.com/jackocnr/intl-tel-input#events
    react.useEffect(()=>{
        // The ref value will like have changed by the time the cleanup function
        // runs so it is recommended to save it in scoped variable.
        const input = textFieldRef.current;
        const onCountryChange = (e)=>{
            onChangeHandler(e);
        };
        // sets the width on the dropdown to match the TextField width: this can't
        // be done in CSS because the dropdown isn't a child of the TextField
        const onCountryOpen = ()=>{
            var ref;
            const textFieldWidth = (ref = textFieldContainerRef.current) === null || ref === void 0 ? void 0 : ref.clientWidth;
            const countryList = document.querySelector(`.${styles$h.root} [role="listbox"]`);
            if (textFieldWidth != null && countryList) {
                countryList.style.minWidth = `${textFieldWidth}px`;
            }
        };
        input === null || input === void 0 ? void 0 : input.addEventListener('countrychange', onCountryChange);
        input === null || input === void 0 ? void 0 : input.addEventListener('open:countrydropdown', onCountryOpen);
        return ()=>{
            input === null || input === void 0 ? void 0 : input.removeEventListener('countrychange', onCountryChange);
            input === null || input === void 0 ? void 0 : input.removeEventListener('open:countrydropdown', onCountryOpen);
        };
    }, [
        onChangeHandler
    ]);
    return jsxRuntime.jsx(TextField, Object.assign({}, textFieldProps, {
        ref: textFieldMergedRef,
        containerRef: textFieldContainerRef,
        isDisabled: isDisabled,
        type: "tel",
        onChange: onChangeHandler,
        defaultValue: value
    }), void 0);
});

var styles$g = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","--breakpoint":"min-width: 48.063em","root":"PostSummary_root__wBCdf","wrapper":"PostSummary_wrapper__N4wWG","details":"PostSummary_details__fZhoI","name":"PostSummary_name__p8Inc","meta":"PostSummary_meta__PwmWx","nameAndMeta":"PostSummary_nameAndMeta__ecGS1","isCompleted":"PostSummary_isCompleted__hUDk4","metaAndDueDate":"PostSummary_metaAndDueDate__bjlUP","separator":"PostSummary_separator__S2z-x","progress":"PostSummary_progress__FtdyS","panelSlideDown":"PostSummary_panelSlideDown__6k3u-"};

const PostSummary = /*#__PURE__*/ react.forwardRef(function PostSummary(props, ref) {
    const { dueDate , meta , iconProps , isCompleted , name , progress , testHook , wrapper =jsxRuntime.jsx(jsxRuntime.Fragment, {}, void 0) ,  } = props;
    return jsxRuntime.jsxs("div", Object.assign({
        className: styles$g.root,
        "data-test": testHook
    }, {
        children: [
            /*#__PURE__*/ react.cloneElement(wrapper, {}, jsxRuntime.jsx(WithIcon, Object.assign({
                ref: ref,
                className: styles$g.wrapper,
                iconProps: iconProps
            }, {
                children: jsxRuntime.jsxs("div", Object.assign({
                    className: styles$g.details
                }, {
                    children: [
                        jsxRuntime.jsxs("div", Object.assign({
                            className: cx__default["default"](styles$g.nameAndMeta, isCompleted && styles$g.isCompleted)
                        }, {
                            children: [
                                jsxRuntime.jsx("span", Object.assign({
                                    className: styles$g.name
                                }, {
                                    children: name
                                }), void 0),
                                meta && jsxRuntime.jsx("span", Object.assign({
                                    className: styles$g.meta
                                }, {
                                    children: meta
                                }), void 0)
                            ]
                        }), void 0),
                        (meta || dueDate) && jsxRuntime.jsxs("div", Object.assign({
                            className: styles$g.metaAndDueDate
                        }, {
                            children: [
                                meta && jsxRuntime.jsx("span", Object.assign({
                                    className: styles$g.meta
                                }, {
                                    children: meta
                                }), void 0),
                                meta && dueDate && jsxRuntime.jsx("span", Object.assign({
                                    className: styles$g.separator
                                }, {
                                    children: "\u00B7"
                                }), void 0),
                                dueDate
                            ]
                        }), void 0)
                    ]
                }), void 0)
            }), void 0)),
            progress && jsxRuntime.jsx("div", Object.assign({
                className: styles$g.progress
            }, {
                children: progress
            }), void 0)
        ]
    }), void 0);
});

var styles$f = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","--color":"--neon-ProgressBar-color","root":"ProgressBar_root__yFCr5","progress":"ProgressBar_progress__gCgN1","large":"ProgressBar_large__EAFWz","chunky":"ProgressBar_chunky__ttNwH","bar":"ProgressBar_bar__5RdLv","noProgress":"ProgressBar_noProgress__ZF0as","flatStart":"ProgressBar_flatStart__zRiIF","flatEnd":"ProgressBar_flatEnd__tZpLw","label":"ProgressBar_label__Szi07","panelSlideDown":"ProgressBar_panelSlideDown__rrkuZ"};

const variants = keyMirror__default["default"]({
    chunky: null,
    large: null
});
function ProgressBar(props) {
    const { role ='progressbar' , max =100 , values =[
        {
            ariaLabel: props.ariaLabel,
            color: props.color,
            value: props.value,
            tooltip: undefined,
            onClick: undefined
        }, 
    ] , withLabel =false , renderLabel =___default["default"].identity , variant , testHook ,  } = props;
    const normalize = (value)=>max && (value || 0) / max
    ;
    const normalizedValues = values.map((bar, i)=>({
            ...bar,
            color: bar.color || (i === 0 ? 'colorCoreBrand' : undefined),
            value: normalize(bar.value)
        })
    ) // filter out 0 values but don't skip the first bar as it's used for overall completion
    .filter((param, i)=>{
        let { value  } = param;
        return i > 0 ? value : true;
    });
    const firstValue = normalizedValues[0].value;
    return jsxRuntime.jsxs(Box, Object.assign({
        className: cx__default["default"](styles$f.root, {
            [String(variant && styles$f[variant])]: variant,
            [styles$f.chunky]: variant === variants.chunky || values.length > 1
        }),
        testHook: testHook
    }, {
        children: [
            jsxRuntime.jsx("div", Object.assign({
                className: styles$f.progress
            }, {
                children: normalizedValues.map((param, i, list)=>{
                    let { ariaLabel , color , tooltip , value , onClick  } = param;
                    var ref, ref1, ref2, ref3;
                    const hasPrevious = !!(((ref = list[i - 1]) === null || ref === void 0 ? void 0 : ref.color) && ((ref1 = list[i - 1]) === null || ref1 === void 0 ? void 0 : ref1.value));
                    const hasNext = !!(((ref2 = list[i + 1]) === null || ref2 === void 0 ? void 0 : ref2.color) && ((ref3 = list[i + 1]) === null || ref3 === void 0 ? void 0 : ref3.value));
                    const width = toPercent(value);
                    const sharedProps = {
                        className: cx__default["default"](styles$f.bar, {
                            [styles$f.noProgress]: value === 0,
                            [styles$f.flatStart]: hasPrevious,
                            [styles$f.flatEnd]: value && hasNext
                        }),
                        backgroundColor: color,
                        order: list.length - i,
                        width,
                        testHook: testHook && `${testHook}-bar-${i}`
                    };
                    let bar = jsxRuntime.jsx(Box, {
                        role: role,
                        "aria-valuemin": 0,
                        "aria-valuemax": max,
                        "aria-valuenow": value * max,
                        "aria-label": ariaLabel
                    }, void 0);
                    bar = onClick ? jsxRuntime.jsx(Box, Object.assign({
                        as: "button",
                        type: "button",
                        onClick: onClick
                    }, sharedProps, {
                        children: bar
                    }), void 0) : /*#__PURE__*/ react.cloneElement(bar, sharedProps);
                    return tooltip ? jsxRuntime.jsx(Tooltip, Object.assign({
                        content: tooltip
                    }, {
                        children: bar
                    }), i) : jsxRuntime.jsx(react.Fragment, {
                        children: bar
                    }, i);
                })
            }), void 0),
            withLabel && jsxRuntime.jsx("span", Object.assign({
                className: cx__default["default"](styles$f.label, {
                    [styles$f.noProgress]: firstValue === 0
                })
            }, {
                children: renderLabel(toPercent(firstValue))
            }), void 0)
        ]
    }), void 0);
}

var styles$e = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","--breakpoint":"min-width: 48.063em","root":"ProgressCircle_root__3O77Z","stack":"ProgressCircle_stack__hwWIi","icon":"ProgressCircle_icon__3DbEh","track":"ProgressCircle_track__mpENA","content":"ProgressCircle_content__1dhbm","bar":"ProgressCircle_bar__w00dz","large":"ProgressCircle_large__0TF5D","large1X":"ProgressCircle_large1X__QZiKM","small":"ProgressCircle_small__doWoe","small1X":"ProgressCircle_small1X__R0CtN","check":"ProgressCircle_check__yj0tJ","withStatus":"ProgressCircle_withStatus__aURnd","isOverlaid":"ProgressCircle_isOverlaid__RYae3","isCompleted":"ProgressCircle_isCompleted__DNS-b","backgroundColorChange":"ProgressCircle_backgroundColorChange__3-OCU","isDisabled":"ProgressCircle_isDisabled__w0D-Z","isSuccess":"ProgressCircle_isSuccess__7TgBq","isDanger":"ProgressCircle_isDanger__eTeYu","panelSlideDown":"ProgressCircle_panelSlideDown__VmRak"};

const getRadius = (size, ref)=>{
    const circle = ref.firstChild;
    // TODO-TS[ENHANCEMENT] ooof what is this expression - hard to read. If broken
    // down into multiple lines can type better
    const scale = // @ts-ignore
    +progressCircleSizes[// @ts-ignore
    `progressCircleSize${___default["default"].upperFirst(progressCircleSizes$1[size])}-px`] / // @ts-ignore
    (2 * +circle.getAttribute('cx'));
    // @ts-ignore
    return +circle.getAttribute('r') * scale;
};
function ProgressCircle(props) {
    const { backingElement: Element = progressElements.progress , size =progressCircleSizes$1.root , value , threshold =0 , ariaLabel , label , iconName , isOverlaid , isDisabled , withCompletedState , withStatus , children , testHook ,  } = props;
    const [radius, setRadius] = react.useState(0);
    const getRadiusMemoized = react.useMemo(()=>___default["default"].memoize(___default["default"].partial(getRadius, size))
    , [
        size
    ]);
    const setRef = (element)=>{
        if (element) setRadius(getRadiusMemoized(element));
    };
    const circumference = 2 * Math.PI * radius;
    const offset = (1 - Math.round(value * 100) / 100) * circumference;
    // avoids having a full circle that looks completed but isn't
    const isCompleted = withCompletedState && value > 0.96;
    const isSuccess = withStatus && isAbove(value, threshold);
    const isDanger = withStatus && !isAbove(value, threshold);
    return jsxRuntime.jsxs("span", Object.assign({
        className: cx__default["default"](styles$e.root, {
            [styles$e[size]]: size,
            [styles$e.isCompleted]: isCompleted,
            [styles$e.isOverlaid]: isOverlaid,
            [styles$e.isDisabled]: isDisabled,
            [styles$e.withStatus]: withStatus,
            [styles$e.isDanger]: isDanger,
            [styles$e.isSuccess]: isSuccess
        }),
        "data-test": testHook
    }, {
        children: [
            jsxRuntime.jsxs("span", Object.assign({
                className: styles$e.stack
            }, {
                children: [
                    !isDisabled && jsxRuntime.jsx(HideVisually, {
                        children: jsxRuntime.jsx(Element, Object.assign({
                            "aria-label": ariaLabel,
                            value: value
                        }, {
                            children: toPercent(value)
                        }), void 0)
                    }, void 0),
                    jsxRuntime.jsx(ForwardRef$1o, {
                        ref: setRef,
                        className: styles$e.track
                    }, void 0),
                    !isDisabled && jsxRuntime.jsx(ForwardRef$1o, {
                        className: styles$e.bar,
                        style: {
                            // rounding hack so that 0 progress looks good for larger sizes
                            strokeDasharray: `${Math.ceil(circumference)}`,
                            strokeDashoffset: `${Math.ceil(offset)}px`
                        }
                    }, void 0),
                    isCompleted ? jsxRuntime.jsx(Icon, {
                        className: styles$e.check,
                        name: "check",
                        size: "sizeIconSmall1X"
                    }, void 0) : jsxRuntime.jsxs("span", Object.assign({
                        className: styles$e.content,
                        "data-test": testHook && `${testHook}-content`
                    }, {
                        children: [
                            iconName && jsxRuntime.jsx(Icon, {
                                className: styles$e.icon,
                                name: iconName,
                                size: "sizeIconSmall1X"
                            }, void 0),
                            children
                        ]
                    }), void 0)
                ]
            }), void 0),
            label && jsxRuntime.jsx(Text, Object.assign({
                as: "span",
                color: "colorFiftyShadesDark",
                variant: "bodySmall1X",
                fontWeight: "fontWeightSemiBold",
                "aria-hidden": true
            }, {
                children: label
            }), void 0)
        ]
    }), void 0);
}

var styles$d = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","root":"ProgressSummary_root__r87Wo","withFixedColumnGap":"ProgressSummary_withFixedColumnGap__laFlr","panelSlideDown":"ProgressSummary_panelSlideDown__Xwtvm"};

const breakpoint = Media.query({
    minWidth: breakpoints.breakpointMediumFrom
});
const getColsCount = (itemCount, withTooltips)=>{
    let [minCols, maxCols] = [
        3,
        3
    ];
    if (itemCount < maxCols) {
        [minCols, maxCols] = [
            itemCount,
            itemCount
        ];
    } else if (itemCount >= 4) {
        [minCols, maxCols] = [
            withTooltips ? 2 : 3,
            3
        ];
    }
    return [
        minCols,
        maxCols
    ];
};
function ProgressSummary(props) {
    const { data , testHook , withFixedColumnGap  } = props;
    const [minCols, maxCols] = getColsCount(data.length, data.some((param)=>{
        let { tooltip  } = param;
        return tooltip;
    }));
    return jsxRuntime.jsx(Media, {
        element: jsxRuntime.jsx("div", Object.assign({
            className: cx__default["default"](styles$d.root, {
                [styles$d.withFixedColumnGap]: withFixedColumnGap
            }),
            "data-test": testHook,
            style: {
                '--columns': minCols
            }
        }, {
            children: data.map((param, i)=>{
                let { text , label , tooltip , value , isDisabled , threshold , withStatus  } = param;
                return jsxRuntime.jsx(ProgressCircle, Object.assign({
                    backingElement: "meter",
                    size: "root",
                    ariaLabel: label,
                    label: jsxRuntime.jsxs(Flex, Object.assign({
                        alignItems: "center"
                    }, {
                        children: [
                            jsxRuntime.jsx("span", {
                                children: label
                            }, void 0),
                            tooltip && jsxRuntime.jsx(InfoTip, {
                                content: tooltip,
                                iconSize: "sizeIconSmall2X",
                                appendTo: "parent"
                            }, void 0)
                        ]
                    }), void 0),
                    value: value,
                    threshold: threshold,
                    withStatus: withStatus,
                    isDisabled: isDisabled,
                    testHook: testHook && `${testHook}-progress-${i}`
                }, {
                    children: text != null ? text : withStatus && jsxRuntime.jsx(Diff, {
                        value: value,
                        threshold: threshold
                    }, void 0)
                }), label);
            })
        }), void 0),
        queries: {
            [breakpoint]: {
                style: {
                    '--columns': maxCols
                }
            }
        }
    }, void 0);
}

var styles$c = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","--breakpoint":"min-width: 48.063em","overlay":"QuizDialog_overlay__-5a69","validationPrompt":"QuizDialog_validationPrompt__dOZHk","validationPromptFadeIn":"QuizDialog_validationPromptFadeIn__3tkDj","root":"QuizDialog_root__aOgeT","header":"QuizDialog_header__6nRsA","progressBar":"QuizDialog_progressBar__YTNG3","contentWrapper":"QuizDialog_contentWrapper__rozUw","content":"QuizDialog_content__q6A-r","footer":"QuizDialog_footer__SeMf1","footerContent":"QuizDialog_footerContent__suK5v","withFooterInfo":"QuizDialog_withFooterInfo__Y18tr","footerInfo":"QuizDialog_footerInfo__kQMKV","footerActions":"QuizDialog_footerActions__QyG1z","withFooter":"QuizDialog_withFooter__0wQJw","isScrollable":"QuizDialog_isScrollable__SugYf","panelSlideDown":"QuizDialog_panelSlideDown__PeaBh"};

const queryFromMedium = json2mq__default["default"]({
    minWidth: breakpoints.breakpointMediumFrom
});
function Content(props) {
    const { containerProps ={} , children  } = props;
    return jsxRuntime.jsx("div", Object.assign({
        className: styles$c.contentWrapper
    }, {
        children: jsxRuntime.jsx(Container, Object.assign({}, containerProps, {
            children: jsxRuntime.jsx("div", Object.assign({
                className: styles$c.content
            }, {
                children: children
            }), void 0)
        }), void 0)
    }), void 0);
}
function QuizDialog(props) {
    const { appElement , ariaLabel , children , containerProps , isOpen , isScrollable =true , onClose , closeAssistiveText , progressProps , shouldCloseOnEsc =true , skipProps , footer: [footerInfo, footerActions] = [] ,  } = props;
    const withFooter = !!(footerInfo || footerActions);
    return jsxRuntime.jsxs(DialogBase, Object.assign({
        appElement: appElement,
        ariaLabel: ariaLabel,
        className: cx__default["default"](styles$c.root, {
            [styles$c.withFooter]: withFooter,
            [styles$c.isScrollable]: isScrollable
        }),
        isOpen: isOpen,
        onClose: onClose,
        overlayClassName: styles$c.overlay,
        shouldCloseOnOverlayClick: false,
        shouldReturnFocusAfterClose: true,
        shouldCloseOnEsc: shouldCloseOnEsc
    }, {
        children: [
            jsxRuntime.jsx("header", {
                children: jsxRuntime.jsx(Container, {
                    children: jsxRuntime.jsxs("nav", Object.assign({
                        className: styles$c.header
                    }, {
                        children: [
                            jsxRuntime.jsx(Box, Object.assign({
                                as: "button",
                                type: "button",
                                onClick: onClose,
                                color: "colorFiftyShadesDark",
                                _hoverAndFocus: {
                                    color: 'colorCoreText'
                                },
                                transition: "transitionRoot",
                                testHook: "quiz-dialog-close-button"
                            }, {
                                children: jsxRuntime.jsx(Icon, {
                                    name: "close",
                                    isDecorative: false,
                                    title: closeAssistiveText,
                                    strokeWidth: "2px",
                                    size: {
                                        base: 'sizeIconSmall2X',
                                        tablet: 'sizeIconRoot'
                                    }
                                }, void 0)
                            }), void 0),
                            jsxRuntime.jsx("div", Object.assign({
                                className: styles$c.progressBar
                            }, {
                                children: jsxRuntime.jsx(Media, {
                                    element: jsxRuntime.jsx(ProgressBar, Object.assign({}, progressProps), void 0),
                                    queries: {
                                        [queryFromMedium]: {
                                            variant: 'large'
                                        }
                                    }
                                }, void 0)
                            }), void 0),
                            jsxRuntime.jsx(Media, {
                                element: jsxRuntime.jsx(Button, Object.assign({
                                    variant: "link"
                                }, skipProps), void 0),
                                queries: {
                                    [queryFromMedium]: {
                                        size: 'small',
                                        variant: 'info'
                                    }
                                }
                            }, void 0)
                        ]
                    }), void 0)
                }, void 0)
            }, void 0),
            jsxRuntime.jsx(Content, Object.assign({
                containerProps: containerProps,
                testHook: "content"
            }, {
                children: children
            }), void 0),
            withFooter && jsxRuntime.jsx("footer", Object.assign({
                className: styles$c.footer
            }, {
                children: jsxRuntime.jsx(Container, {
                    children: jsxRuntime.jsxs("div", Object.assign({
                        className: cx__default["default"](styles$c.footerContent, {
                            [styles$c.withFooterInfo]: !!footerInfo
                        })
                    }, {
                        children: [
                            footerInfo && jsxRuntime.jsx("div", Object.assign({
                                className: styles$c.footerInfo
                            }, {
                                children: footerInfo
                            }), void 0),
                            jsxRuntime.jsx("div", Object.assign({
                                className: styles$c.footerActions
                            }, {
                                children: footerActions
                            }), void 0)
                        ]
                    }), void 0)
                }, void 0)
            }), void 0)
        ]
    }), void 0);
}
function Validation(props) {
    const { children , explanationId , headingId , isOpen  } = props;
    return(// @ts-ignore we don't need to set the appElement prop on DialogBase because it's been set by QuizDialog
    jsxRuntime.jsx(DialogBase, Object.assign({
        aria: {
            describedby: explanationId,
            labelledby: headingId
        },
        className: styles$c.root,
        isOpen: isOpen,
        overlayClassName: styles$c.overlay,
        portalClassName: styles$c.validationPrompt,
        role: "alertdialog",
        shouldCloseOnEsc: false,
        shouldCloseOnOverlayClick: false,
        shouldReturnFocusAfterClose: false
    }, {
        children: jsxRuntime.jsx(Content, Object.assign({
            containerProps: {
                maxWidth: 'sizeSmall'
            },
            testHook: "content"
        }, {
            children: children
        }), void 0)
    }), void 0));
}
QuizDialog.Validation = Validation;

var styles$b = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","root":"QuizHome_root__ILzgM","metadata":"QuizHome_metadata__Ea5vS","centered":"QuizHome_centered__DPAzR","loader":"QuizHome_loader__j7Yyg QuizHome_centered__DPAzR","panelSlideDown":"QuizHome_panelSlideDown__zVpwb"};

function useSkeleton(param) {
    let { actions , labels , button , illustration , heading , metadata , subheading ,  } = param;
    return jsxRuntime.jsxs("div", Object.assign({
        className: styles$b.root
    }, {
        children: [
            jsxRuntime.jsx(VerticalSpacing, Object.assign({
                size: "large3X"
            }, {
                children: illustration
            }), void 0),
            jsxRuntime.jsxs(VerticalSpacing, Object.assign({
                size: "large1X"
            }, {
                children: [
                    heading,
                    labels && jsxRuntime.jsx(VerticalSpacing, Object.assign({
                        size: "small2X",
                        isUpwards: true
                    }, {
                        children: labels
                    }), void 0),
                    subheading && jsxRuntime.jsx(VerticalSpacing, Object.assign({
                        size: "small1X",
                        isUpwards: true
                    }, {
                        children: subheading
                    }), void 0)
                ]
            }), void 0),
            jsxRuntime.jsx(VerticalSpacing, Object.assign({
                size: "large3X"
            }, {
                children: metadata
            }), void 0),
            actions && jsxRuntime.jsx(VerticalSpacing, Object.assign({
                size: "large4X"
            }, {
                children: actions
            }), void 0),
            jsxRuntime.jsx(VerticalSpacing, {
                children: button
            }, void 0)
        ]
    }), void 0);
}
function Loader() {
    return jsxRuntime.jsx("div", Object.assign({
        className: styles$b.loader
    }, {
        children: useSkeleton({
            illustration: jsxRuntime.jsx(Illustration.Loader, {
                marginInline: "auto"
            }, void 0),
            heading: jsxRuntime.jsx(TextLoader, {
                width: "80%",
                marginInline: "auto"
            }, void 0),
            labels: null,
            subheading: jsxRuntime.jsx(TextLoader, {
                width: "60%",
                marginInline: "auto"
            }, void 0),
            metadata: jsxRuntime.jsx(TextLoader, {
                width: "40%",
                marginInline: "auto"
            }, void 0),
            actions: jsxRuntime.jsx(ButtonGroup.Loader, {}, void 0),
            button: jsxRuntime.jsx(ButtonLoader, {
                size: "large",
                marginInline: "auto"
            }, void 0)
        })
    }), void 0);
}
function QuizHome(props) {
    const { actions , labels , buttonProps , heading , illustrationName , metadata , subheading  } = props;
    return useSkeleton({
        illustration: jsxRuntime.jsx(Illustration, {
            name: illustrationName
        }, void 0),
        heading: jsxRuntime.jsx(Heading, Object.assign({
            rank: "1",
            size: "large"
        }, {
            children: heading
        }), void 0),
        labels,
        subheading: subheading && jsxRuntime.jsx(Text, Object.assign({
            as: "p",
            variant: "lead"
        }, {
            children: subheading
        }), void 0),
        metadata: jsxRuntime.jsx("div", Object.assign({
            className: styles$b.metadata
        }, {
            children: jsxRuntime.jsx(Text, Object.assign({
                variant: "bodySmall1X",
                color: "colorFiftyShadesDark"
            }, {
                children: metadata
            }), void 0)
        }), void 0),
        actions,
        button: jsxRuntime.jsx(Button, Object.assign({}, buttonProps, {
            size: "large"
        }), void 0)
    });
}QuizHome.Loader = Loader;

function QuizExplanation(props) {
    const { children , id , testHook  } = props;
    return jsxRuntime.jsx(Box, Object.assign({
        id: id,
        testHook: testHook
    }, {
        children: jsxRuntime.jsx(Markdown, Object.assign({
            className: markdownStyles.quizExplanation,
            isLimited: true
        }, {
            children: children
        }), void 0)
    }), void 0);
}

function MultipleChoiceQuestionOption(props) {
    const { isDisabled , isSelected , label , onClick , testHook , title , variant  } = props;
    return jsxRuntime.jsxs(Flex, Object.assign({
        gap: "spacingRoot",
        alignItems: "center",
        marginLeft: label ? {
            base: undefined,
            tablet: 'spacingNegativeLarge6X'
        } : undefined
    }, {
        children: [
            label && jsxRuntime.jsx(Box, Object.assign({
                backgroundColor: "colorFiftyShadesLightest",
                borderRadius: "borderRadiusCircle",
                color: "colorFiftyShadesDarker",
                flexShrink: 0,
                fontFamily: "fontFamilySystem",
                fontSize: "fontSizeSmall",
                lineHeight: "sizeAvatarSmall",
                textAlign: "center",
                size: "sizeAvatarSmall"
            }, {
                children: label
            }), void 0),
            jsxRuntime.jsx(Option$2, Object.assign({
                as: "button",
                type: "button",
                disabled: isDisabled,
                onClick: onClick,
                testHook: testHook,
                isHighlighted: isSelected,
                variant: variant,
                withHover: !isDisabled
            }, {
                children: jsxRuntime.jsx(Box, Object.assign({
                    flexGrow: 1
                }, {
                    children: jsxRuntime.jsx(Markdown, Object.assign({
                        isLimited: true
                    }, {
                        children: title
                    }), void 0)
                }), void 0)
            }), void 0)
        ]
    }), void 0);
}
function MultipleChoiceQuestion(props) {
    const { answers , isDisabled , onClick , testHook , variant , ...questionProps } = props;
    return jsxRuntime.jsx(QuizQuestion, Object.assign({}, questionProps, {
        variant: variant,
        testHook: testHook
    }, {
        children: jsxRuntime.jsx(Box, Object.assign({
            as: "ul",
            display: "flex",
            flexDirection: "column",
            gap: "spacingSmall1X",
            role: "group",
            "aria-labelledby": questionProps.labelId
        }, {
            children: answers.map((answer)=>jsxRuntime.jsx(MultipleChoiceQuestionOption, Object.assign({}, answer, {
                    variant: variant,
                    isDisabled: isDisabled,
                    onClick: ()=>onClick(answer.id)
                    ,
                    testHook: testHook && `${testHook}-answer-${answer.id}`
                }), answer.id)
            )
        }), void 0)
    }), void 0);
}

var styles$a = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","root":"ResultSummary_root__yBhKs","success":"ResultSummary_success__-QvEe","error":"ResultSummary_error__Ib2nV","panelSlideDown":"ResultSummary_panelSlideDown__drPwr"};

const statuses = keyMirror__default["default"]({
    success: null,
    error: null
});
keyMirror__default["default"]({
    aggregate: null,
    'multiple-choice': null,
    'self-marked': null,
    'exact-answer': null,
    'drag-and-drop': null
});
function ResultSummary(props) {
    const { result , type , status  } = props;
    const isSuccessful = status === statuses.success;
    let assistiveText = isSuccessful ? 'Correct answer' : 'Incorrect answer';
    let contents;
    const statusIcon = jsxRuntime.jsx(Icon, {
        name: isSuccessful ? 'check' : 'cross',
        color: isSuccessful ? 'colorStatusSuccessDarker' : 'colorStatusErrorDarker',
        size: "sizeIconSmall2X"
    }, void 0);
    switch(type){
        case 'aggregate':
            assistiveText = `students were ${isSuccessful ? 'successful' : 'unsuccessful'}`;
            contents = jsxRuntime.jsxs(jsxRuntime.Fragment, {
                children: [
                    statusIcon,
                    " ",
                    result,
                    " ",
                    jsxRuntime.jsx(HideVisually, {
                        children: assistiveText
                    }, void 0)
                ]
            }, void 0);
            break;
        case 'multiple-choice':
            contents = jsxRuntime.jsxs(jsxRuntime.Fragment, {
                children: [
                    jsxRuntime.jsx(HideVisually, {
                        children: assistiveText
                    }, void 0),
                    " ",
                    statusIcon,
                    " ",
                    result
                ]
            }, void 0);
            break;
        case 'self-marked':
            if (result) {
                const [userMarks, questionMarks] = result.split('/');
                assistiveText = `${isSuccessful ? 'Successful' : 'Unsuccessful'} score: ${userMarks} out of ${questionMarks}`;
                contents = jsxRuntime.jsxs(jsxRuntime.Fragment, {
                    children: [
                        jsxRuntime.jsx(HideVisually, {
                            children: assistiveText
                        }, void 0),
                        jsxRuntime.jsx("span", Object.assign({
                            "aria-hidden": "true"
                        }, {
                            children: result
                        }), void 0)
                    ]
                }, void 0);
            }
            break;
        default:
            contents = jsxRuntime.jsxs(jsxRuntime.Fragment, {
                children: [
                    jsxRuntime.jsx(HideVisually, {
                        children: assistiveText
                    }, void 0),
                    " ",
                    statusIcon
                ]
            }, void 0);
    }
    return jsxRuntime.jsx("span", Object.assign({
        className: cx__default["default"](styles$a.root, styles$a[status])
    }, {
        children: contents
    }), void 0);
}

const RadioGroupContext = /*#__PURE__*/ react.createContext(null);
function useRadioGroupContext() {
    const context = react.useContext(RadioGroupContext);
    invariant__default["default"](context, 'useRadioGroupContext must be used within a RadioGroupContext.Provider.');
    return context;
}

const innerCircleStyles = {
    backgroundColor: 'colorCoreBrand',
    borderRadius: 'borderRadiusCircle',
    content: '""',
    display: 'inline-block',
    padding: 'spacingSmall2X'
};
const defaultStyles = {
    display: 'inline-flex',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: 'colorCoreWhite',
    borderRadius: 'borderRadiusCircle',
    borderWidth: 'borderWidthRoot',
    borderStyle: 'solid',
    borderColor: 'colorFiftyShadesLighter',
    marginTop: 'spacingSmall2X',
    size: 'sizeIconSmall',
    transition: 'transitionRoot'
};
const hoveredStyles = {
    borderColor: 'colorFiftyShadesDarkest'
};
const focusedStyles = {
    outlineWidth: 'borderWidthLarge',
    outlineColor: 'colorInteractiveFocusRing',
    outlineStyle: 'solid'
};
const selectedStyles = {
    borderColor: 'colorCoreBrand',
    _before: innerCircleStyles
};
const disabledStyles = {
    backgroundColor: 'colorFiftyShadesLighter',
    borderColor: 'colorFiftyShadesLighter'
};
const disabledSelectedStyles = {
    backgroundColor: 'colorCoreWhite',
    _before: {
        ...innerCircleStyles,
        backgroundColor: 'colorFiftyShadesLighter'
    }
};
const invalidStyles = {
    borderColor: 'colorStatusErrorDark'
};
function Radio(props) {
    const { children  } = props;
    const { state  } = useRadioGroupContext();
    const isDisabled = state.isDisabled || props.isDisabled;
    const isDisabledOrReadOnly = state.isReadOnly || isDisabled;
    const isInvalid = state.validationState === 'invalid';
    const ref = react.useRef(null);
    const { focusProps , isFocusVisible  } = focus$1.useFocusRing();
    const { hoverProps , isHovered  } = interactions.useHover({
        isDisabled
    });
    const { inputProps , isSelected  } = radio$1.useRadio(props, state, ref);
    // use mergeProps() to chain event handlers:
    // https://react-spectrum.adobe.com/react-aria/mergeProps.html.
    const mergedInputProps = utils.mergeProps(inputProps, focusProps);
    return jsxRuntime.jsxs(Box, Object.assign({
        as: "label",
        cursor: isDisabledOrReadOnly ? 'not-allowed' : undefined,
        maxWidth: "fit-content"
    }, hoverProps, {
        children: [
            jsxRuntime.jsx(HideVisually, {
                children: jsxRuntime.jsx("input", Object.assign({}, mergedInputProps, {
                    ref: ref
                }), void 0)
            }, void 0),
            jsxRuntime.jsxs(Flex, Object.assign({
                gap: "spacingSmall"
            }, {
                children: [
                    jsxRuntime.jsx(Box, Object.assign({}, defaultStyles, isInvalid && invalidStyles, isHovered && hoveredStyles, isFocusVisible && focusedStyles, isSelected && selectedStyles, isDisabledOrReadOnly && disabledStyles, isSelected && isDisabledOrReadOnly && disabledSelectedStyles), void 0),
                    jsxRuntime.jsx(Text, Object.assign({
                        variant: "bodyRoot",
                        color: isDisabled ? 'colorFiftyShadesDark' : 'colorCoreText'
                    }, {
                        children: children
                    }), void 0)
                ]
            }), void 0)
        ]
    }), void 0);
}

/**
 * Map this component props to the ones expected by the react-aria hooks.
 */ function mapToReactAriaProps$1(props) {
    const { ariaLabel , ariaLabelledBy , errorVariant , helpText , validationText , ...otherProps } = props;
    return {
        ...otherProps,
        errorMessage: validationText,
        description: helpText,
        'aria-label': ariaLabel,
        'aria-labelledby': ariaLabelledBy,
        validationState: errorVariant ? 'invalid' : 'valid'
    };
}
const RadioGroup = /*#__PURE__*/ react.forwardRef(function RadioGroup(props, ref) {
    const { children , errorVariant , helpText , label , orientation ='vertical' , secondaryLabel , validationText ,  } = props;
    const reactAriaProps = mapToReactAriaProps$1(props);
    const state = radio.useRadioGroupState(reactAriaProps);
    const { radioGroupProps , labelProps , errorMessageProps , descriptionProps  } = radio$1.useRadioGroup(reactAriaProps, state);
    return jsxRuntime.jsxs(Box, Object.assign({}, radioGroupProps, {
        ref: ref
    }, {
        children: [
            jsxRuntime.jsxs(Label, Object.assign({
                as: "div"
            }, labelProps, {
                children: [
                    label,
                    secondaryLabel && jsxRuntime.jsx(Text, Object.assign({
                        variant: "bodySmall3X",
                        color: "colorFiftyShadesDarker",
                        marginLeft: "auto"
                    }, {
                        children: secondaryLabel
                    }), void 0)
                ]
            }), void 0),
            jsxRuntime.jsx(RadioGroupContext.Provider, Object.assign({
                value: {
                    state
                }
            }, {
                children: jsxRuntime.jsx(Flex, Object.assign({
                    direction: orientation === 'vertical' ? 'column' : 'row',
                    rowGap: "spacingSmall",
                    columnGap: "spacingLarge5X",
                    wrap: true
                }, {
                    children: children
                }), void 0)
            }), void 0),
            helpText && jsxRuntime.jsx(HelpText, Object.assign({
                id: descriptionProps.id
            }, {
                children: helpText
            }), void 0),
            validationText && errorVariant && jsxRuntime.jsx(HelpText, Object.assign({
                id: errorMessageProps.id,
                variant: errorVariant
            }, {
                children: validationText
            }), void 0)
        ]
    }), void 0);
});

var styles$9 = {"root":"Select_root__dsfd5","select":"Select_select__RPFhN","nonNativeSelect":"Select_nonNativeSelect__Xcf3u","label":"Select_label__uMgDV"};

// TODO: this is only used for the insights table grouping filter (Lise will
// look at designs with default SelectTrigger)
function DeprecatedTrigger(props) {
    const { children  } = props;
    return jsxRuntime.jsx(Box, Object.assign({
        as: "span",
        className: cx__default["default"](styles$9.select, styles$9.nonNativeSelect)
    }, {
        children: children
    }), void 0);
}
function Select(props) {
    const { isNative , label , onChange , options , testHook , value , trigger , ...otherProps } = props;
    const id = useId('Select');
    const select = isNative ? jsxRuntime.jsx("select", Object.assign({}, otherProps, {
        id: id,
        value: value,
        onChange: (e)=>onChange(e.currentTarget.value)
        ,
        className: styles$9.select,
        "data-test": testHook && `${testHook}-select`
    }, {
        children: options.map((opt, i)=>jsxRuntime.jsx("option", Object.assign({
                value: opt.value
            }, {
                children: opt.label
            }), i)
        )
    }), void 0) : jsxRuntime.jsx(StatefulMenu, Object.assign({}, otherProps, {
        itemVariant: "large",
        trigger: trigger || jsxRuntime.jsx(SelectTrigger, {}, void 0),
        options: options,
        // we don't use a placeholder so we always get a non-null value in onChange
        onChange: onChange,
        value: value,
        testHook: testHook && `${testHook}-menu`
    }), void 0);
    if (!label) {
        return select;
    }
    return jsxRuntime.jsxs(Box, Object.assign({
        className: styles$9.root,
        testHook: testHook
    }, {
        children: [
            jsxRuntime.jsx(Label, Object.assign({
                className: styles$9.label,
                size: "large",
                htmlFor: id,
                marginBottom: "spacingNone",
                testHook: testHook && `${testHook}-label`
            }, {
                children: label
            }), void 0),
            select
        ]
    }), void 0);
}
Select.DeprecatedTrigger = DeprecatedTrigger;

var styles$8 = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","--breakpoint":"min-width: 48.063em","root":"SelfMarkedQuestion_root__K-3st","stack":"SelfMarkedQuestion_stack__-SwqB","flipped":"SelfMarkedQuestion_flipped__SIDK4","cardWrapper":"SelfMarkedQuestion_cardWrapper__n7rC4","show":"SelfMarkedQuestion_show__WHnz3","hide":"SelfMarkedQuestion_hide__iJ1uR","card":"SelfMarkedQuestion_card__TBTrm","content":"SelfMarkedQuestion_content__m0Tbh","spacer":"SelfMarkedQuestion_spacer__FJ1DF","action":"SelfMarkedQuestion_action__7GiP8","form":"SelfMarkedQuestion_form__-WhfC","select":"SelfMarkedQuestion_select__m8MV6","check":"SelfMarkedQuestion_check__73d9x","icon":"SelfMarkedQuestion_icon__YW2Gf","reverse":"SelfMarkedQuestion_reverse__3iT2i","panelSlideDown":"SelfMarkedQuestion_panelSlideDown__2OhJG"};

function CheckButton(props) {
    const { backLabel , checkLabel , isReversed , isChecking , onClick , testHook , ...otherProps } = props;
    return jsxRuntime.jsxs("button", Object.assign({}, otherProps, {
        type: "button",
        className: cx__default["default"](styles$8.check, isReversed && styles$8.reverse),
        onClick: onClick,
        "data-test": testHook
    }, {
        children: [
            isChecking ? backLabel : checkLabel,
            jsxRuntime.jsx("span", Object.assign({
                className: styles$8.icon
            }, {
                children: jsxRuntime.jsx(Icon, {
                    name: "action-flip",
                    size: "sizeIconSmall"
                }, void 0)
            }), void 0)
        ]
    }), void 0);
}
function CardWrapper(props) {
    const { isAriaHidden , isGuidelines , checkButton , children  } = props;
    const matches = useMedia({
        query: styles$8['--breakpoint']
    });
    // hide and prevent focus on interactive elements
    const ariaProps = {
        'aria-hidden': isAriaHidden,
        tabIndex: isAriaHidden ? -1 : undefined
    };
    // the spacer exists so the content can be scrolled to the bottom
    const spacer = jsxRuntime.jsx("div", {
        className: styles$8.spacer,
        "aria-hidden": true
    }, void 0);
    return jsxRuntime.jsx("div", Object.assign({
        className: cx__default["default"](styles$8.cardWrapper, isGuidelines && styles$8.flipped)
    }, ariaProps, {
        children: !matches ? jsxRuntime.jsxs("div", Object.assign({
            className: styles$8.card
        }, {
            children: [
                jsxRuntime.jsxs("div", Object.assign({
                    className: styles$8.content
                }, ariaProps, {
                    children: [
                        children,
                        spacer
                    ]
                }), void 0),
                jsxRuntime.jsx("div", Object.assign({
                    className: styles$8.action
                }, {
                    children: /*#__PURE__*/ react.cloneElement(checkButton, ariaProps)
                }), void 0)
            ]
        }), void 0) : jsxRuntime.jsx("div", Object.assign({
            className: styles$8.content
        }, {
            children: jsxRuntime.jsxs(Container, Object.assign({
                maxWidth: "sizeRoot"
            }, {
                children: [
                    children,
                    isGuidelines && spacer
                ]
            }), void 0)
        }), void 0)
    }), void 0);
}
function SelfMarkedQuestion(props) {
    const { checkButtonProps , isChecking , guidelines , testHook , marks , renderMarks , ...questionProps } = props;
    // These components are expensive to re-render because they render Markdown
    // and they trigger a re-render of the entire tree. Because of that, on mobile
    // the scroll position is lost when flipping between the front and back card.
    const questionMemo = react.useMemo(()=>jsxRuntime.jsx(QuizQuestion, Object.assign({}, questionProps, {
            meta: renderMarks(jsxRuntime.jsx("strong", {
                children: marks
            }, void 0)),
            illustrationName: "main-writing",
            testHook: testHook && `${testHook}-question`
        }), void 0)
    , // the title is enough to detect a new question -- if we put `questionProps`
    // it will always recreate the component because `questionProps` is always
    // new (using ...rest syntax)
    [
        questionProps.title,
        testHook
    ] // eslint-disable-line react-hooks/exhaustive-deps
    );
    const guidelinesMemo = react.useMemo(()=>jsxRuntime.jsx(Markdown, Object.assign({
            linkComponent: questionProps.linkComponent,
            testHook: testHook && `${testHook}-guidelines`
        }, {
            children: guidelines
        }), void 0)
    , // same reasoning as for `questionMemo`
    [
        guidelines,
        testHook
    ] // eslint-disable-line react-hooks/exhaustive-deps
    );
    return jsxRuntime.jsx("div", Object.assign({
        className: styles$8.root
    }, {
        children: jsxRuntime.jsxs("div", Object.assign({
            className: cx__default["default"](styles$8.stack, isChecking && styles$8.flipped)
        }, {
            children: [
                jsxRuntime.jsx(CardWrapper, Object.assign({
                    checkButton: jsxRuntime.jsx(CheckButton, Object.assign({}, checkButtonProps, {
                        testHook: testHook && `${testHook}-check-question`
                    }), void 0),
                    isAriaHidden: isChecking
                }, {
                    children: questionMemo
                }), void 0),
                jsxRuntime.jsx(CardWrapper, Object.assign({
                    checkButton: jsxRuntime.jsx(CheckButton, Object.assign({}, checkButtonProps, {
                        isChecking: true,
                        testHook: testHook && `${testHook}-check-guidelines`
                    }), void 0),
                    isGuidelines: true,
                    isAriaHidden: !isChecking
                }, {
                    children: guidelinesMemo
                }), void 0)
            ]
        }), void 0)
    }), void 0);
}
function useSelfMarkedQuestion(props) {
    const { checkLabel , backLabel , guidelines , selectLabel , selectOptions , submitText , onSubmit , testHook , ...questionProps } = props;
    const [isChecking, setIsChecking] = react.useState(false);
    const [value, setValue] = react.useState(selectOptions[0].value);
    if (!guidelines) {
        return {
            footer: undefined,
            question: null
        };
    }
    const formOnSubmit = (event)=>{
        event.preventDefault();
        onSubmit(value);
    };
    const checkButtonProps = {
        checkLabel,
        backLabel,
        onClick () {
            setIsChecking((checking)=>!checking
            );
        }
    };
    return {
        question: jsxRuntime.jsx(SelfMarkedQuestion, Object.assign({}, questionProps, {
            checkButtonProps: checkButtonProps,
            isChecking: isChecking,
            guidelines: guidelines,
            testHook: testHook
        }), void 0),
        footer: [
            jsxRuntime.jsx(CheckButton, Object.assign({}, checkButtonProps, {
                isChecking: isChecking,
                isReversed: true,
                testHook: testHook && `${testHook}-check`
            }), void 0),
            jsxRuntime.jsxs("form", Object.assign({
                className: styles$8.form,
                onSubmit: formOnSubmit
            }, {
                children: [
                    jsxRuntime.jsx("div", Object.assign({
                        className: styles$8.select
                    }, {
                        children: jsxRuntime.jsx(Select, {
                            trigger: jsxRuntime.jsx(Select.DeprecatedTrigger, {}, void 0),
                            label: selectLabel,
                            options: selectOptions,
                            value: value,
                            onChange: setValue,
                            testHook: testHook && `${testHook}-select`
                        }, void 0)
                    }), void 0),
                    jsxRuntime.jsx(Button, Object.assign({
                        size: "small",
                        type: "submit",
                        testHook: testHook && `${testHook}-submit`
                    }, {
                        children: submitText
                    }), void 0)
                ]
            }), void 0), 
        ]
    };
}

function useScroll() {
    const targetRef = react.useRef(null);
    const [scrollTop, setScrollTop] = react.useState(0);
    const [isScrollable, setIsScrollable] = react.useState(!!(targetRef.current && targetRef.current.scrollHeight > targetRef.current.clientHeight));
    const [isEnd, setIsEnd] = react.useState(false);
    // eslint-disable-next-line react-hooks/exhaustive-deps
    react.useEffect(()=>{
        // the element might not be in the DOM yet
        if (!targetRef.current) return;
        const target = targetRef.current;
        setIsScrollable(target.scrollHeight > target.clientHeight);
        setIsEnd(scrollTop + target.clientHeight === target.scrollHeight);
    });
    const onScroll = (event)=>setScrollTop(event.currentTarget.scrollTop)
    ;
    return [
        {
            isScrollable,
            isEnd
        },
        {
            ref: targetRef,
            onScroll
        }, 
    ];
}

function useSyncScrolling(rootRef, targetSelector) {
    // There are a few things going on here:
    // - the `counter` variable is incremented whenever the keydown event is triggered on the root
    // - the first `useEffect` updates the currently highlighted result (the target) and sets the
    //   target to be observed by `useInView`
    //    - this is run as an effect because we don't know when the hightlighted result changes but we
    //      can approximate it will happen on keydown
    //    - `useInView` is triggered once because we don't want to track the target's visibility as
    //      the user interacts with the root -- the user might use keyboard navigation as well as
    //      scroll with the mouse
    // - the second `useEffect` checks if the target is in view and scrolls the root the appropriate
    //   amount so the target gets into view
    //   - this only needs to be done once per highlighted item; if the user starts scrolling with the
    //     mouse we don't want to override the scroll position when the highlighted item becomes
    //     obstructed again
    const [counter, setCounter] = react.useState(0);
    const [target, setTarget] = react.useState(null);
    const [observe, inView, entry] = reactIntersectionObserver.useInView({
        root: rootRef.current,
        threshold: 0.95,
        triggerOnce: true
    });
    react.useEffect(()=>{
        // the element might not be in the DOM
        if (!rootRef.current) return;
        const highlighted = rootRef.current.querySelector(targetSelector);
        observe(highlighted);
        setTarget(highlighted);
    }, [
        counter,
        observe,
        rootRef,
        targetSelector
    ]);
    react.useEffect(()=>{
        if (rootRef.current && entry && target && !inView && entry.rootBounds) {
            const { rootBounds , boundingClientRect  } = entry;
            const delta = boundingClientRect.bottom > rootBounds.bottom ? boundingClientRect.bottom - rootBounds.bottom : boundingClientRect.top - rootBounds.top;
            rootRef.current.scrollBy(0, delta);
        }
    }, [
        entry,
        inView,
        rootRef,
        target
    ]);
    const onKeyDown = ()=>setCounter((count)=>count + 1
        )
    ;
    return {
        onKeyDown
    };
}

var styles$7 = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","--breakpoint":"min-width: 48.063em","overlay":"Search_overlay__eLP52","content":"Search_content__v09Ns","root":"Search_root__wwjE6","header":"Search_header__zGd8u","input":"Search_input__LNlEh","reset":"Search_reset__OdQqZ","results":"Search_results__NhH8s","withScrollFade":"Search_withScrollFade__92rBK","popover":"Search_popover__llXd5","result":"Search_result__t6RdO","titleContainer":"Search_titleContainer__6dAlT","title":"Search_title__zDtgp","tag":"Search_tag__FsCXk","breadcrumbs":"Search_breadcrumbs__PYGwU","footer":"Search_footer__UTZ9Y","trigger":"Search_trigger__-FkSQ","triggerWrapper":"Search_triggerWrapper__qEIUy","triggerReset":"Search_triggerReset__mhXEy","panelSlideDown":"Search_panelSlideDown__pR6Gz"};

const matchLevels = {
    full: 2,
    partial: 1,
    none: 0
};
function Trigger$1(param) {
    let { placeholder , value , onClick , onReset , resetAssistiveText , testHook ,  } = param;
    return jsxRuntime.jsxs("div", Object.assign({
        className: styles$7.triggerWrapper
    }, {
        children: [
            jsxRuntime.jsxs("button", Object.assign({
                type: "button",
                className: styles$7.trigger,
                onClick: onClick,
                "data-test": testHook
            }, {
                children: [
                    jsxRuntime.jsx(Icon, {
                        name: "search",
                        size: "sizeIconSmall2X",
                        color: "colorFiftyShadesDark"
                    }, void 0),
                    jsxRuntime.jsx(Truncate, Object.assign({
                        color: !value ? 'colorFiftyShadesDarker' : undefined,
                        marginLeft: "spacingSmall",
                        textAlign: "left"
                    }, {
                        children: value || placeholder
                    }), void 0)
                ]
            }), void 0),
            value && // TODO: refactor to use shared discard button.
            jsxRuntime.jsx("button", Object.assign({
                type: "button",
                className: styles$7.triggerReset,
                "aria-label": resetAssistiveText,
                onClick: onReset,
                "data-test": testHook && `${testHook}-reset`
            }, {
                children: jsxRuntime.jsx(Icon, {
                    name: "close",
                    size: "sizeIconSmall2X",
                    color: "colorFiftyShadesDark"
                }, void 0)
            }), void 0)
        ]
    }), void 0);
}
function Dialog(param) {
    let { isOpen , onClose , children , testHook ,  } = param;
    return jsxRuntime.jsx(dialog.DialogOverlay, Object.assign({
        className: styles$7.overlay,
        isOpen: isOpen,
        onDismiss: ()=>onClose()
        ,
        "data-test": testHook && `${testHook}-overlay`
    }, {
        children: jsxRuntime.jsx(dialog.DialogContent, Object.assign({
            className: styles$7.content,
            "aria-label": "Search"
        }, {
            children: jsxRuntime.jsx(Container, Object.assign({
                maxWidth: {
                    base: 'sizeFull',
                    tablet: 'sizeRoot'
                },
                paddingInline: {
                    base: 'spacingNone',
                    tablet: 'spacingLarge3X'
                }
            }, {
                children: jsxRuntime.jsx("div", Object.assign({
                    "data-test": testHook && `${testHook}-root`,
                    className: styles$7.root
                }, {
                    children: children
                }), void 0)
            }), void 0)
        }), void 0)
    }), void 0);
}
function Autocomplete(param) {
    let { hits , refine , query , setQuery , minQueryLength =3 , placeholder , closeAssistiveText , resetAssistiveText , emptyStateDescription , renderNoResultsHeading , noResultsDescription , renderOption , footer , isLocked , renderType , onClose , onSelect , testHook ,  } = param;
    const inputRef = react.useRef(null);
    const footerId = useId('AutoComplete');
    const [{ isScrollable , isEnd  }, scrollProps] = useScroll();
    // TODO-TS there needs to be a small behaviour change between useScroll and
    // useSyncScrolling - null/undefined. misused of ! against scroll.ref
    const inputProps = useSyncScrolling(scrollProps.ref, '[data-highlighted]');
    const hasQuery = query.trim().length >= minQueryLength;
    const hasResults = hasQuery && hits.length > 0;
    react.useEffect(()=>{
        if (hasQuery) refine(query);
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    // eslint-disable-line react-hooks/exhaustive-deps
    const onChange = (event)=>{
        const { value  } = event.currentTarget;
        // ignore empty query (only spaces)
        const valueToSet = value.trim() === '' ? value.trim() : value;
        setQuery(valueToSet);
        refine(valueToSet);
    };
    const onBlur = (event)=>event.preventDefault()
    ;
    const onReset = ()=>{
        var // eslint-disable-next-line no-unused-expressions
        ref;
        setQuery('');
        (ref = inputRef.current) === null || ref === void 0 ? void 0 : ref.focus();
    };
    const handleClose = ()=>onClose(query)
    ;
    const handleSelect = (objectID)=>{
        onSelect(___default["default"].find(hits, {
            objectID
        }));
        handleClose();
    };
    return jsxRuntime.jsxs(combobox.Combobox, Object.assign({
        onSelect: handleSelect,
        openOnFocus: hasQuery
    }, {
        children: [
            jsxRuntime.jsxs("div", Object.assign({
                className: styles$7.header
            }, {
                children: [
                    jsxRuntime.jsx(Icon, {
                        name: "search",
                        size: "sizeIconSmall1X",
                        color: "colorFiftyShadesDark"
                    }, void 0),
                    jsxRuntime.jsx(combobox.ComboboxInput, Object.assign({
                        ref: inputRef,
                        className: styles$7.input,
                        "aria-label": placeholder,
                        placeholder: placeholder,
                        autocomplete: false,
                        autoComplete: "off" // eslint-disable-line react/jsx-no-duplicate-props
                        ,
                        spellCheck: false,
                        autoCorrect: "off",
                        value: query,
                        onChange: onChange,
                        onBlur: onBlur
                    }, inputProps), void 0),
                    hasQuery && jsxRuntime.jsx("button", Object.assign({
                        type: "button",
                        className: styles$7.reset,
                        onClick: onReset,
                        "data-test": testHook && `${testHook}-reset`
                    }, {
                        children: resetAssistiveText
                    }), void 0),
                    jsxRuntime.jsx(Box, Object.assign({
                        as: "button",
                        type: "button",
                        onClick: handleClose,
                        color: "colorFiftyShadesDark",
                        _hoverAndFocus: {
                            color: 'colorCoreText'
                        },
                        transition: "transitionRoot",
                        testHook: testHook && `${testHook}-close`
                    }, {
                        children: jsxRuntime.jsx(Icon, {
                            name: "close",
                            size: "sizeIconSmall2X",
                            isDecorative: false,
                            title: closeAssistiveText
                        }, void 0)
                    }), void 0)
                ]
            }), void 0),
            jsxRuntime.jsxs("div", Object.assign({
                className: cx__default["default"](styles$7.results, {
                    [styles$7.withScrollFade]: hasResults && isScrollable && !isEnd
                })
            }, {
                children: [
                    !hasQuery && jsxRuntime.jsx(Container, Object.assign({
                        maxWidth: {
                            tablet: 'sizeSmall1X'
                        }
                    }, {
                        children: jsxRuntime.jsx(EmptyState, {
                            header: jsxRuntime.jsx(Illustration, {
                                name: "emptystate-search",
                                size: "small"
                            }, void 0),
                            description: emptyStateDescription
                        }, void 0)
                    }), void 0),
                    hasQuery && !hasResults && jsxRuntime.jsx(EmptyState, {
                        headingProps: {
                            children: renderNoResultsHeading(query)
                        },
                        description: noResultsDescription
                    }, void 0),
                    hasResults && // @ts-ignore TODO-TS[ENHANCEMENT] improved types
                    jsxRuntime.jsx(combobox.ComboboxPopover, Object.assign({
                        className: styles$7.popover,
                        portal: false
                    }, scrollProps, {
                        children: jsxRuntime.jsx(combobox.ComboboxList, Object.assign({
                            "aria-labelledby": footerId
                        }, {
                            children: hits.map((hit, i)=>{
                                const snippetProps = {
                                    tagName: 'mark',
                                    hit
                                };
                                let mainAttribute = hit.captions ? 'captions' : 'description';
                                if (hit._snippetResult.description && hit._snippetResult.captions) {
                                    mainAttribute = matchLevels[hit._snippetResult.captions.matchLevel] >= matchLevels[hit._snippetResult.description.matchLevel] ? 'captions' : 'description';
                                }
                                return jsxRuntime.jsx(combobox.ComboboxOption, Object.assign({
                                    className: styles$7.result,
                                    value: hit.objectID,
                                    "data-test": testHook && `${testHook}-item-${i}`
                                }, {
                                    children: renderOption(hit, jsxRuntime.jsxs(jsxRuntime.Fragment, {
                                        children: [
                                            jsxRuntime.jsxs("div", Object.assign({
                                                className: styles$7.titleContainer
                                            }, {
                                                children: [
                                                    isLocked(hit.access_level) && jsxRuntime.jsx(Icon, {
                                                        name: "lock",
                                                        size: "sizeIconSmall",
                                                        color: "colorFiftyShadesLight",
                                                        testHook: testHook && `${testHook}-lock`
                                                    }, void 0),
                                                    jsxRuntime.jsxs("span", Object.assign({
                                                        className: styles$7.title
                                                    }, {
                                                        children: [
                                                            jsxRuntime.jsx(reactInstantsearchDom.Snippet, Object.assign({}, snippetProps, {
                                                                attribute: "name"
                                                            }), void 0),
                                                            jsxRuntime.jsx("span", Object.assign({
                                                                className: styles$7.tag
                                                            }, {
                                                                children: jsxRuntime.jsx(Tag, Object.assign({
                                                                    variant: "filled",
                                                                    fillColor: "colorFiftyShadesLighter"
                                                                }, {
                                                                    children: renderType(hit.type, hit.tier)
                                                                }), void 0)
                                                            }), void 0)
                                                        ]
                                                    }), void 0)
                                                ]
                                            }), void 0),
                                            jsxRuntime.jsx("div", Object.assign({
                                                className: styles$7.breadcrumbs
                                            }, {
                                                children: jsxRuntime.jsx(reactInstantsearchDom.Snippet, Object.assign({}, snippetProps, {
                                                    attribute: `categories.${Object.keys(hit.categories).pop()}`
                                                }), void 0)
                                            }), void 0),
                                            jsxRuntime.jsx(Text, Object.assign({
                                                as: "p",
                                                variant: "bodySmall1X",
                                                color: "colorFiftyShadesDark"
                                            }, {
                                                children: jsxRuntime.jsx(reactInstantsearchDom.Snippet, Object.assign({}, snippetProps, {
                                                    attribute: mainAttribute
                                                }), void 0)
                                            }), void 0)
                                        ]
                                    }, void 0))
                                }), hit.objectID);
                            })
                        }), void 0)
                    }), void 0),
                    jsxRuntime.jsx("div", Object.assign({
                        id: footerId,
                        className: styles$7.footer
                    }, {
                        children: jsxRuntime.jsx("span", {
                            children: footer
                        }, void 0)
                    }), void 0)
                ]
            }), void 0)
        ]
    }), void 0);
}
// @ts-ignore TODO-TS[ENHANCEMENT] improved types
const ConnectedAutocomplete = reactInstantsearchDom.connectAutoComplete(Autocomplete);
function Search(props) {
    const { indexName , searchClient , isOpen: defaultIsOpen , searchParameters , onOpen , onClose , resetOnClose , testHook , trigger , ...autocompleteProps } = props;
    // we don't want to exclude these from `autocompleteProps`
    const { placeholder , resetAssistiveText  } = autocompleteProps;
    const [isOpen, setIsOpen] = react.useState(false);
    const [query, setQuery] = react.useState('');
    react.useEffect(()=>{
        setIsOpen(!!defaultIsOpen);
    }, [
        defaultIsOpen
    ]);
    const triggerOnClick = ()=>{
        setIsOpen(true);
        onOpen();
    };
    const triggerOnReset = ()=>{
        setQuery('');
    };
    const handleClose = (value)=>{
        if (value) setQuery(value);
        if (resetOnClose) triggerOnReset();
        setIsOpen(false);
        // when the dialog is dismissed we don't receive any value, so we have to use the state
        onClose(value || query);
    };
    return jsxRuntime.jsxs(jsxRuntime.Fragment, {
        children: [
            trigger ? /*#__PURE__*/ react.cloneElement(trigger, {
                onClick: triggerOnClick
            }) : jsxRuntime.jsx(Trigger$1, {
                placeholder: placeholder,
                value: query,
                onClick: triggerOnClick,
                onReset: triggerOnReset,
                resetAssistiveText: resetAssistiveText,
                testHook: testHook && `${testHook}-trigger`
            }, void 0),
            jsxRuntime.jsx(Dialog, Object.assign({
                isOpen: isOpen,
                onClose: handleClose,
                testHook: testHook && `${testHook}-dialog`
            }, {
                children: jsxRuntime.jsxs(reactInstantsearchDom.InstantSearch, Object.assign({
                    indexName: indexName,
                    searchClient: searchClient
                }, {
                    children: [
                        jsxRuntime.jsx(reactInstantsearchDom.Configure, Object.assign({
                            analytics: false,
                            attributesToRetrieve: [
                                'type',
                                'access_level',
                                'name',
                                'categories',
                                'description',
                                'captions',
                                '*', 
                            ],
                            attributesToSnippet: "*:30",
                            responseFields: [
                                'hits'
                            ]
                        }, searchParameters), void 0),
                        jsxRuntime.jsx(ConnectedAutocomplete, Object.assign({}, autocompleteProps, {
                            // we want the query in Autocomplete to be in sync with the value
                            // stored here so when we close the dialog the trigger can show the
                            // correct value
                            // @ts-ignore TODO-TS going to revisit
                            query: query,
                            setQuery: setQuery,
                            onClose: handleClose,
                            testHook: testHook && `${testHook}-autocomplete`
                        }), void 0)
                    ]
                }), void 0)
            }), void 0)
        ]
    }, void 0);
}

const buttonStyles = {
    borderBottomRightRadius: 'borderRadiusNone',
    borderColor: 'colorCoreWhite',
    borderRightWidth: 'borderWidthRoot',
    borderStyle: 'solid',
    borderTopRightRadius: 'borderRadiusNone'
};
const iconButtonStyles = {
    borderTopLeftRadius: 'borderRadiusNone',
    borderBottomLeftRadius: 'borderRadiusNone'
};
function SplitButton(props) {
    const { ariaLabel , children , isDisabled , isLoading , items , onClick , testHook , ...otherProps } = props;
    const containerRef = react.useRef(null);
    const IconButton = jsxRuntime.jsx(Button, Object.assign({
        as: "span",
        isDisabled: isDisabled,
        isLoading: isLoading
    }, iconButtonStyles, otherProps, {
        children: jsxRuntime.jsx(Icon, {
            name: "chevron",
            display: "inline-block",
            size: "sizeIconSmall3X",
            strokeWidth: "2",
            verticalAlign: "middle"
        }, void 0)
    }), void 0);
    return jsxRuntime.jsxs(Box, Object.assign({
        display: "flex",
        alignItems: "baseline",
        ref: containerRef
    }, {
        children: [
            jsxRuntime.jsx(Button, Object.assign({}, buttonStyles, {
                isLoading: isLoading,
                isDisabled: isDisabled,
                onClick: onClick,
                testHook: testHook
            }, otherProps, {
                children: children
            }), void 0),
            jsxRuntime.jsx(Menu, {
                ariaLabel: ariaLabel,
                items: items,
                itemVariant: "large",
                trigger: IconButton,
                popoverPosition: popoverPosition({
                    targetContainer: containerRef
                }),
                isDisabled: isDisabled || isLoading,
                testHook: testHook ? `${testHook}-menu` : undefined
            }, void 0)
        ]
    }), void 0);
}

function strengthLabel(value, limits, labels) {
    return value >= 1 ? labels[labels.length - 1] : labels.reduce((acc, label, i)=>value > limits[i] ? label : acc
    );
}

var styles$6 = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","bars":"Strength_bars__MESKY","bar":"Strength_bar__yEYkj","barFilled":"Strength_barFilled__hd6ot","large":"Strength_large__fbxxQ","isDanger":"Strength_isDanger__IXh4F","isInline":"Strength_isInline__kZKoB","withLabel":"Strength_withLabel__Q36-u","isAnimated":"Strength_isAnimated__J0Fdn","barGrow":"Strength_barGrow__cYPwS","panelSlideDown":"Strength_panelSlideDown__l8vC9"};

const defaultLimits = [
    0,
    0.25,
    0.5,
    0.75
];
class BaseStrength extends react.Component {
    render() {
        const { assistiveText , color , innerRef , isAnimated , isDanger , isInline , labels , limits =defaultLimits , size , testHook , tooltipProps , value ,  } = this.props;
        const strength = jsxRuntime.jsxs("div", Object.assign({
            ref: innerRef,
            className: cx__default["default"]({
                [styles$6.isDanger]: isDanger,
                [styles$6.isInline]: isInline,
                [styles$6.isAnimated]: isAnimated,
                [styles$6.withLabel]: labels
            }),
            "data-test": testHook
        }, {
            children: [
                jsxRuntime.jsxs(HideVisually, {
                    children: [
                        assistiveText && jsxRuntime.jsx("label", Object.assign({
                            htmlFor: this.labelId
                        }, {
                            children: assistiveText
                        }), void 0),
                        jsxRuntime.jsx("meter", Object.assign({
                            id: assistiveText && this.labelId,
                            value: value
                        }, {
                            children: toPercent(value)
                        }), void 0)
                    ]
                }, void 0),
                jsxRuntime.jsx("div", Object.assign({
                    "aria-hidden": true,
                    className: cx__default["default"](styles$6.bars, size && styles$6[size])
                }, {
                    children: limits.map((limit, i)=>{
                        const isFilled = value > limit;
                        return jsxRuntime.jsx("span", {
                            className: cx__default["default"](styles$6.bar, {
                                [styles$6.barFilled]: isFilled
                            }),
                            style: {
                                '--index': i,
                                backgroundColor: isFilled && color ? color : undefined
                            }
                        }, `bar-${limit}`);
                    })
                }), void 0),
                labels && jsxRuntime.jsx(VerticalSpacing, Object.assign({
                    isUpwards: true
                }, {
                    children: jsxRuntime.jsx(Text, {
                        children: strengthLabel(value, limits, labels)
                    }, void 0)
                }), void 0)
            ]
        }), void 0);
        return tooltipProps ? jsxRuntime.jsx(Tooltip, Object.assign({}, tooltipProps, {
            theme: "light-border"
        }, {
            children: /*#__PURE__*/ react.cloneElement(strength, {
                tabIndex: 1
            })
        }), void 0) : strength;
    }
    // if we don't annotate the constructor ourselves the consumer will have a Flow error
    constructor(props){
        super(props);
        this.labelId = BaseStrength.counter.next();
    }
}
BaseStrength.counter = labelCounter('Strength');
BaseStrength.displayName = 'Strength';
const Strength = /*#__PURE__*/ react.forwardRef(function Strength(props, ref) {
    return jsxRuntime.jsx(BaseStrength, Object.assign({
        innerRef: ref
    }, props), void 0);
});

var styles$5 = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","strengthWrapper":"StrengthInfo_strengthWrapper__6ujuA","strength":"StrengthInfo_strength__5ccoq","panelSlideDown":"StrengthInfo_panelSlideDown__rdi9r"};

function StrengthInfo(props) {
    const { diffs , renderStrengthLabel , renderSuccessRate , strengthLabels , strengthProps , successRate , testHook ,  } = props;
    return jsxRuntime.jsx(Text, Object.assign({
        variant: "bodySmall1X",
        lineHeight: "lineHeightRoot",
        textAlign: "left"
    }, {
        children: jsxRuntime.jsxs(Stack, Object.assign({
            spacing: "spacingSmall"
        }, {
            children: [
                jsxRuntime.jsxs(Stack, Object.assign({
                    spacing: "spacingSmall1X"
                }, {
                    children: [
                        successRate != null && jsxRuntime.jsx(Box, Object.assign({
                            testHook: testHook && `${testHook}-success-rate`
                        }, {
                            children: renderSuccessRate(jsxRuntime.jsx("strong", {
                                children: toPercent(successRate)
                            }, void 0))
                        }), void 0),
                        diffs && diffs.map((diff, i)=>jsxRuntime.jsx(Box, Object.assign({
                                testHook: testHook && `${testHook}-comparison-rate-${i}`
                            }, {
                                children: diff.render(jsxRuntime.jsx("strong", {
                                    children: jsxRuntime.jsx(Diff, {
                                        value: diff.value,
                                        size: "small"
                                    }, void 0)
                                }, void 0))
                            }), i)
                        )
                    ]
                }), void 0),
                strengthProps.limits && renderStrengthLabel && jsxRuntime.jsxs("div", Object.assign({
                    className: styles$5.strengthWrapper
                }, {
                    children: [
                        jsxRuntime.jsx("div", Object.assign({
                            className: styles$5.strength
                        }, {
                            children: jsxRuntime.jsx(Strength, Object.assign({}, strengthProps, {
                                isInline: true
                            }), void 0)
                        }), void 0),
                        jsxRuntime.jsx(Box, Object.assign({
                            as: "span",
                            testHook: testHook && `${testHook}-strength-label`
                        }, {
                            children: renderStrengthLabel(jsxRuntime.jsx("strong", {
                                children: strengthLabel(strengthProps.value, strengthProps.limits, strengthLabels)
                            }, void 0))
                        }), void 0)
                    ]
                }), void 0)
            ]
        }), void 0)
    }), void 0);
}

function mapToReactAriaProps(props) {
    const { ariaDescribedBy , ariaLabel , ariaLabelledBy , label , ...otherProps } = props;
    return {
        ...otherProps,
        children: label,
        'aria-describedby': ariaDescribedBy,
        'aria-label': ariaLabel,
        'aria-labelledby': ariaLabelledBy
    };
}
function getHandleStyles(isSelected, isHovered) {
    let backgroundColor = isHovered ? 'colorFiftyShadesRoot' : 'colorFiftyShadesLight';
    if (isSelected) {
        backgroundColor = isHovered ? 'colorAtomiBluesDarker' : 'colorAtomiBluesDark';
    }
    return {
        backgroundColor,
        borderRadius: 'borderRadiusCircle',
        content: '""',
        left: 0,
        padding: 'spacingSmall',
        position: 'absolute',
        top: 0,
        transform: isSelected ? `translateX(${spacing.spacingRoot})` : undefined,
        transition: 'transitionRoot'
    };
}
function Switch(props) {
    const { isDisabled , label  } = props;
    const inputRef = react.useRef(null);
    const state = toggle.useToggleState(props);
    const { inputProps  } = _switch.useSwitch(mapToReactAriaProps(props), state, inputRef);
    const { focusProps , focusStyles  } = useFocusRing();
    const { hoverProps , isHovered  } = interactions.useHover({
        isDisabled
    });
    const touchTargetStyles = useTouchTarget();
    const { isSelected  } = state;
    return jsxRuntime.jsxs(Box, Object.assign({
        as: "label",
        alignItems: "center",
        display: "inline-flex",
        gap: "spacingSmall",
        cursor: isDisabled ? 'default' : undefined
    }, hoverProps, {
        children: [
            label && jsxRuntime.jsx(Label, Object.assign({
                as: "span",
                marginBottom: "spacingNone"
            }, {
                children: label
            }), void 0),
            jsxRuntime.jsx(HideVisually, {
                children: jsxRuntime.jsx("input", Object.assign({}, inputProps, focusProps, {
                    ref: inputRef
                }), void 0)
            }, void 0),
            jsxRuntime.jsx(Box, Object.assign({
                as: "span",
                backgroundColor: isSelected ? 'colorAtomiBluesLighter' : 'colorFiftyShadesLighter',
                borderColor: isSelected ? 'colorAtomiBluesLighter' : 'colorFiftyShadesLighter',
                borderRadius: "borderRadiusLarge1X",
                borderStyle: "solid",
                borderWidth: "borderWidthLarge",
                opacity: isDisabled ? 0.5 : undefined,
                paddingBlock: "spacingSmall",
                paddingInline: "spacingLarge",
                position: "relative",
                _before: getHandleStyles(isSelected, isHovered)
            }, focusStyles, touchTargetStyles), void 0)
        ]
    }), void 0);
}

var styles$4 = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","root":"Pagination_root__m9yDh","pageSizeTrigger":"Pagination_pageSizeTrigger__CbWgC","pageSizeOption":"Pagination_pageSizeOption__gtkKt","nav":"Pagination_nav__rmo-0","pages":"Pagination_pages__07SFn","page":"Pagination_page__YZBOQ","pageSkip":"Pagination_pageSkip__qESdj","isActive":"Pagination_isActive__NqMJl","isShortcut":"Pagination_isShortcut__tTEeg","panelSlideDown":"Pagination_panelSlideDown__oE1iL"};

const pageSizes = [
    10,
    20,
    50,
    100
];
function Trigger(param) {
    let { children  } = param;
    return jsxRuntime.jsx("div", Object.assign({
        className: styles$4.pageSizeTrigger
    }, {
        children: children
    }), void 0);
}
function Option(param) {
    let { children  } = param;
    return jsxRuntime.jsx("div", Object.assign({
        className: styles$4.pageSizeOption
    }, {
        children: children
    }), void 0);
}
function Page(props) {
    const { title , isActive =false , isShortcut =false , isDisabled =false , isSkip =false , children , testHook , ...buttonProps } = props;
    return isSkip ? jsxRuntime.jsx("span", Object.assign({
        "aria-hidden": true,
        className: styles$4.pageSkip
    }, {
        children: children
    }), void 0) : jsxRuntime.jsx("button", Object.assign({
        type: "button",
        className: cx__default["default"](styles$4.page, {
            [styles$4.isActive]: isActive,
            [styles$4.isShortcut]: isShortcut
        }),
        "aria-label": title,
        title: title,
        disabled: isDisabled,
        "data-test": testHook
    }, buttonProps, {
        children: jsxRuntime.jsx("span", Object.assign({
            "aria-hidden": true
        }, {
            children: children
        }), void 0)
    }), void 0);
}
function Pagination(props) {
    const { ariaLabel , pages , currentPage , pageSize =pageSizes[0] , renderPageSize , pageSizeOnChange , labels: [firstLabel, previousLabel, nextLabel, lastLabel] , renderPageLabel , gotoPage , testHook ,  } = props;
    const firstPage = pages[0];
    const lastPage = pages[pages.length - 1];
    const SKIP = '…';
    return jsxRuntime.jsxs("div", Object.assign({
        className: styles$4.root,
        "data-test": testHook
    }, {
        children: [
            jsxRuntime.jsx(StatefulMenu, {
                itemVariant: "large",
                ariaLabel: "Results per page",
                trigger: jsxRuntime.jsx(Trigger, {}, void 0),
                options: pageSizes.map((size)=>({
                        label: jsxRuntime.jsx(Option, {
                            children: renderPageSize(size)
                        }, void 0),
                        value: size
                    })
                ),
                value: pageSize,
                onChange: (val)=>pageSizeOnChange(val)
                ,
                testHook: testHook && `${testHook}-pageSize-menu`
            }, void 0),
            jsxRuntime.jsx("nav", Object.assign({
                "aria-label": ariaLabel,
                className: styles$4.nav
            }, {
                children: jsxRuntime.jsxs("ul", Object.assign({
                    className: styles$4.pages
                }, {
                    children: [
                        jsxRuntime.jsx("li", Object.assign({
                            "data-rank": "0"
                        }, {
                            children: jsxRuntime.jsx(Page, Object.assign({
                                title: firstLabel,
                                onClick: ()=>gotoPage(firstPage)
                                ,
                                isDisabled: currentPage === firstPage,
                                isShortcut: true,
                                testHook: testHook && `${testHook}-first`
                            }, {
                                children: "\u00AB"
                            }), void 0)
                        }), void 0),
                        jsxRuntime.jsx("li", Object.assign({
                            "data-rank": "0"
                        }, {
                            children: jsxRuntime.jsx(Page, Object.assign({
                                title: previousLabel,
                                onClick: ()=>gotoPage(currentPage - 1)
                                ,
                                isDisabled: currentPage === firstPage,
                                isShortcut: true,
                                testHook: testHook && `${testHook}-previous`
                            }, {
                                children: "\u2039"
                            }), void 0)
                        }), void 0),
                        pages // determine the pages to display around first, last and current
                        .map((index)=>index <= firstPage + 1 || index >= lastPage - 1 || index >= currentPage - 1 && index <= currentPage + 1 ? index : SKIP
                        ).reduce(// the accummulator contains a list of [page, rank] tuples and a
                        // page can have several ranks
                        //
                        // @ts-ignore TODO-TS[ENHANCEMENT] - this code is confusing, i'm
                        // not even going to attempt to correctly type it at this stage
                        (acc, current)=>{
                            const [previous] = acc.length > 1 ? acc[acc.length - 1] : [];
                            // collapse consecutive skips into one
                            if (current === SKIP && previous === SKIP) return acc;
                            // add skips around the current page
                            if (current === currentPage) return [
                                ...acc,
                                [
                                    SKIP,
                                    1
                                ],
                                [
                                    currentPage,
                                    0
                                ],
                                [
                                    SKIP,
                                    1
                                ]
                            ];
                            return [
                                ...acc,
                                // this is achieved by combining the rank 1 (between
                                // small and medium) and rank 2 (above medium)
                                [
                                    current,
                                    current === firstPage || current === lastPage ? [
                                        1,
                                        2
                                    ] : 2
                                ], 
                            ];
                        }, []) // render page numbers and skips
                        // @ts-ignore TODO-TS[ENHANCEMENT] as above. this is also broken,
                        // because TS thinks the above returns a number
                        .map((param, i)=>{
                            let [text, rank] = param;
                            return jsxRuntime.jsx("li", Object.assign({
                                "aria-current": text === currentPage ? 'page' : undefined,
                                "data-rank": rank.toString()
                            }, {
                                children: jsxRuntime.jsx(Page, Object.assign({
                                    title: typeof text === 'number' ? renderPageLabel(text) : undefined,
                                    onClick: typeof text === 'number' ? ()=>gotoPage(text)
                                     : undefined,
                                    isActive: text === currentPage,
                                    isSkip: text === SKIP,
                                    testHook: testHook && `${testHook}-page-${text}`
                                }, {
                                    children: text
                                }), void 0)
                            }), i);
                        }),
                        jsxRuntime.jsx("li", Object.assign({
                            "data-rank": "0"
                        }, {
                            children: jsxRuntime.jsx(Page, Object.assign({
                                title: nextLabel,
                                onClick: ()=>gotoPage(currentPage + 1)
                                ,
                                isDisabled: currentPage === lastPage,
                                isShortcut: true,
                                testHook: testHook && `${testHook}-next`
                            }, {
                                children: "\u203A"
                            }), void 0)
                        }), void 0),
                        jsxRuntime.jsx("li", Object.assign({
                            "data-rank": "0"
                        }, {
                            children: jsxRuntime.jsx(Page, Object.assign({
                                title: lastLabel,
                                onClick: ()=>gotoPage(lastPage)
                                ,
                                isDisabled: currentPage === lastPage,
                                isShortcut: true,
                                testHook: testHook && `${testHook}-last`
                            }, {
                                children: "\u00BB"
                            }), void 0)
                        }), void 0)
                    ]
                }), void 0)
            }), void 0)
        ]
    }), void 0);
}

var styles$3 = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","--breakpoint":"min-width: 48.063em","--visiblePageTop":"--neon-VisiblePage-top","table":"Table_table__Wr1lz","isInactive":"Table_isInactive__fqufo","isSelected":"Table_isSelected__rcL4l","heading":"Table_heading__PwV68","row":"Table_row__Bx3bb","isStickyHeadings":"Table_isStickyHeadings__oYrpJ","body":"Table_body__178PG","chevron":"Table_chevron__omghX","isVisuallyHidden":"Table_isVisuallyHidden__wo1YZ","sortButton":"Table_sortButton__wuUO4","isSortedDesc":"Table_isSortedDesc__jvGIz","cell":"Table_cell__U9xLW","isIndex":"Table_isIndex__lBwyH","isCenterAligned":"Table_isCenterAligned__nGY2B","isEndAligned":"Table_isEndAligned__MTQjN","isSticky":"Table_isSticky__YdQqg","isScrollingHorizontally":"Table_isScrollingHorizontally__PQZ6z","isScrollingVertically":"Table_isScrollingVertically__u0Jd3","isFixedLayout":"Table_isFixedLayout__Llc4z","panelSlideDown":"Table_panelSlideDown__gVtFT"};

const INDEX_COLUMN_ID = 'index';
// Create a Table component that is a wrapper around the react-table component
function Table(props) {
    const { children , columns , fetchData , indexAssistiveText , initialState: { pageIndex: initialPageIndex = 0 , pageSize: initialPageSize = pageSizes[0] , sortBy: initialSortBy = [] ,  } = {} , isFixedLayout , isLoading , isSortable =false , isStickyHeadings , pageCount: controlledPageCount = 1 , paginationLabels , renderIndex , renderPageLabel , renderPageSize , scrollPosition , sortingAssistiveText , testHook , toggleSortBy , ...tableOptions } = props;
    const [sorting, setSorting] = react.useState(initialSortBy);
    const [{ pageIndex: pageIndex1 , pageSize: pageSize1  }, setPagination] = react.useState({
        pageIndex: initialPageIndex,
        pageSize: initialPageSize
    });
    const pagination = react.useMemo(()=>({
            pageIndex: pageIndex1,
            pageSize: pageSize1
        })
    , [
        pageIndex1,
        pageSize1
    ]);
    const indexColumnRenderer = (info)=>{
        const { pageIndex , pageSize  } = info.table.getState().pagination;
        return renderIndex && renderIndex(info.row.index + 1 + pageIndex * pageSize);
    };
    const columnsWithIndex = [
        {
            id: INDEX_COLUMN_ID,
            header: ()=>jsxRuntime.jsx(HideVisually, {
                    children: indexAssistiveText
                }, void 0)
            ,
            cell: indexColumnRenderer,
            meta: {
                loader: indexColumnRenderer,
                style: {
                    width: 1
                }
            },
            enableSorting: false
        },
        ...columns, 
    ];
    const table = reactTable.useReactTable({
        ...tableOptions,
        columns: renderIndex && indexAssistiveText ? columnsWithIndex : columns,
        enableSorting: isSortable,
        getCoreRowModel: reactTable.getCoreRowModel(),
        getSortedRowModel: reactTable.getSortedRowModel(),
        manualSorting: isSortable,
        state: {
            sorting,
            pagination
        },
        onSortingChange: setSorting,
        manualPagination: true,
        onPaginationChange: setPagination,
        pageCount: controlledPageCount
    });
    const hasPagination = !!fetchData && !!renderPageSize;
    const pageSizeOnChange = (newPageSize)=>{
        // normally react-table would do this for us by default but the behaviour is
        // different for manual pagination
        table.setPageIndex(0);
        if (newPageSize) {
            table.setPageSize(newPageSize);
        }
    };
    // manual sorting/pagination are achieved via effects, as per this example
    // https://github.com/tannerlinsley/react-table/blob/master/examples/pagination-controlled/src/App.js#L83-L87
    react.useEffect(()=>{
        if (toggleSortBy) {
            table.setPageIndex(0);
            toggleSortBy(sorting);
        }
    }, [
        sorting,
        toggleSortBy,
        table
    ]);
    react.useEffect(()=>{
        if (fetchData) fetchData({
            pageIndex: pageIndex1,
            pageSize: pageSize1
        });
    }, [
        fetchData,
        pageIndex1,
        pageSize1
    ]);
    return jsxRuntime.jsxs(jsxRuntime.Fragment, {
        children: [
            jsxRuntime.jsxs("table", Object.assign({
                className: cx__default["default"](styles$3.table, {
                    [styles$3.isFixedLayout]: isFixedLayout,
                    [styles$3.isStickyHeadings]: isStickyHeadings,
                    [styles$3.isScrollingVertically]: scrollPosition && scrollPosition.top > 0,
                    [styles$3.isScrollingHorizontally]: scrollPosition && scrollPosition.left > 0
                }),
                "data-test": testHook
            }, {
                children: [
                    children,
                    jsxRuntime.jsx("thead", Object.assign({
                        className: styles$3.heading
                    }, {
                        children: table.getHeaderGroups().map((headerGroup)=>{
                            return jsxRuntime.jsx("tr", Object.assign({
                                className: styles$3.row
                            }, {
                                children: headerGroup.headers.map((header)=>{
                                    var ref, ref1, ref2, ref3;
                                    return jsxRuntime.jsx("th", Object.assign({
                                        className: cx__default["default"](styles$3.cell, {
                                            [styles$3.isSticky]: isStickyHeadings && ((ref = header.column.columnDef.meta) === null || ref === void 0 ? void 0 : ref.isHeading),
                                            [styles$3.isCenterAligned]: (ref1 = header.column.columnDef.meta) === null || ref1 === void 0 ? void 0 : ref1.isCenterAligned,
                                            [styles$3.isEndAligned]: (ref2 = header.column.columnDef.meta) === null || ref2 === void 0 ? void 0 : ref2.isEndAligned
                                        }),
                                        colSpan: header.colSpan,
                                        style: (ref3 = header.column.columnDef.meta) === null || ref3 === void 0 ? void 0 : ref3.style,
                                        scope: "col",
                                        "data-test": testHook && `${testHook}-column-${header.id}`
                                    }, {
                                        children: header.column.getCanSort() ? jsxRuntime.jsxs("button", Object.assign({
                                            type: "button",
                                            className: cx__default["default"](styles$3.sortButton, {
                                                [styles$3.isSortedDesc]: header.column.getIsSorted() === 'desc'
                                            }),
                                            onClick: header.column.getToggleSortingHandler()
                                        }, {
                                            children: [
                                                sortingAssistiveText && jsxRuntime.jsx(HideVisually, {
                                                    children: sortingAssistiveText
                                                }, void 0),
                                                ' ',
                                                reactTable.flexRender(header.column.columnDef.header, header.getContext()),
                                                jsxRuntime.jsx(Icon, {
                                                    className: cx__default["default"](styles$3.chevron, !header.column.getIsSorted() && styles$3.isVisuallyHidden),
                                                    name: "chevron",
                                                    display: "inline-block",
                                                    size: "sizeIconSmall3X"
                                                }, void 0)
                                            ]
                                        }), void 0) : jsxRuntime.jsx(jsxRuntime.Fragment, {
                                            children: reactTable.flexRender(header.column.columnDef.header, header.getContext())
                                        }, void 0)
                                    }), header.id);
                                })
                            }), headerGroup.id);
                        })
                    }), void 0),
                    jsxRuntime.jsx("tbody", Object.assign({
                        className: styles$3.body
                    }, {
                        children: table.getRowModel().rows.map((row)=>{
                            return jsxRuntime.jsx("tr", Object.assign({
                                className: cx__default["default"](styles$3.row, {
                                    [styles$3.isInactive]: row.original.isInactive,
                                    [styles$3.isSelected]: row.original.isSelected
                                }),
                                "data-test": testHook ? `${testHook}-row${row.original.isInactive ? '-pending' : ''}` : undefined
                            }, {
                                children: row.getVisibleCells().map((cell)=>{
                                    var ref, ref4, ref5, ref6, ref7, ref8, ref9, ref10;
                                    const CellElement = ((ref = cell.column.columnDef.meta) === null || ref === void 0 ? void 0 : ref.isHeading) ? 'th' : 'td';
                                    return jsxRuntime.jsx(CellElement, Object.assign({
                                        scope: ((ref4 = cell.column.columnDef.meta) === null || ref4 === void 0 ? void 0 : ref4.isHeading) ? 'row' : undefined,
                                        className: cx__default["default"](styles$3.cell, {
                                            [styles$3.isIndex]: cell.column.id === INDEX_COLUMN_ID,
                                            [styles$3.isSticky]: isStickyHeadings && ((ref5 = cell.column.columnDef.meta) === null || ref5 === void 0 ? void 0 : ref5.isHeading),
                                            [styles$3.isCenterAligned]: (ref6 = cell.column.columnDef.meta) === null || ref6 === void 0 ? void 0 : ref6.isCenterAligned,
                                            [styles$3.isEndAligned]: (ref7 = cell.column.columnDef.meta) === null || ref7 === void 0 ? void 0 : ref7.isEndAligned
                                        }),
                                        style: (ref8 = cell.column.columnDef.meta) === null || ref8 === void 0 ? void 0 : ref8.style
                                    }, {
                                        children: reactTable.flexRender(isLoading && ((ref9 = cell.column.columnDef.meta) === null || ref9 === void 0 ? void 0 : ref9.loader) ? (ref10 = cell.column.columnDef.meta) === null || ref10 === void 0 ? void 0 : ref10.loader : cell.column.columnDef.cell, cell.getContext())
                                    }), cell.id);
                                })
                            }), row.id);
                        })
                    }), void 0)
                ]
            }), void 0),
            hasPagination && paginationLabels && renderPageSize && renderPageLabel && jsxRuntime.jsx(VerticalSpacing, Object.assign({
                size: "large1X",
                isUpwards: true
            }, {
                children: jsxRuntime.jsx(Container, Object.assign({
                    paddingInline: {
                        base: 'spacingRoot',
                        tablet: 'spacingNone'
                    }
                }, {
                    children: jsxRuntime.jsx(Pagination, {
                        ariaLabel: "Table pagination",
                        pages: table.getPageOptions().map((index)=>index + 1
                        ),
                        currentPage: pageIndex1 + 1,
                        gotoPage: (index)=>table.setPageIndex(index - 1)
                        ,
                        pageSize: pageSize1,
                        renderPageSize: renderPageSize,
                        pageSizeOnChange: pageSizeOnChange,
                        labels: paginationLabels,
                        renderPageLabel: renderPageLabel,
                        testHook: testHook && `${testHook}-pagination`
                    }, void 0)
                }), void 0)
            }), void 0)
        ]
    }, void 0);
}
Table.createColumnHelper = reactTable.createColumnHelper;

var styles$2 = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","root":"Tabs_root__dq5t4","tabListContainer":"Tabs_tabListContainer__zHQ9S","tabList":"Tabs_tabList__TNOOP","tab":"Tabs_tab__x1Qk1","isDisabled":"Tabs_isDisabled__tbo9I","isSelected":"Tabs_isSelected__EbZwb","tabPanels":"Tabs_tabPanels__gGZye","centered":"Tabs_centered__7rPkE","panelSlideDown":"Tabs_panelSlideDown__hUWum"};

function Tab(props) {
    const { isDisabled , isSelected , ...otherProps } = props;
    return jsxRuntime.jsx(tabs.Tab, Object.assign({}, otherProps, {
        disabled: isDisabled,
        className: cx__default["default"](styles$2.tab, {
            [styles$2.isDisabled]: isDisabled,
            [styles$2.isSelected]: isSelected
        })
    }), void 0);
}

function TabLink(props) {
    const { index , ...otherProps } = props;
    const { selectedIndex  } = tabs.useTabsContext();
    /**
     * To prevent running into a11y issues, we need to
     * remove the 'aria-controls 'attribute because there is no `TabPanel`
     * associated to each `Tab` item. This is a similar behaviour to the MUI Tabs
     * component when used with links: https://mui.com/components/tabs/#nav-tabs.
     */ return jsxRuntime.jsx(Tab, Object.assign({}, otherProps, {
        isSelected: index === selectedIndex,
        "aria-controls": undefined
    }), void 0);
}

function TabList(props) {
    const { ariaLabel , children , ...otherProps } = props;
    return jsxRuntime.jsx(Box, Object.assign({
        className: styles$2.root
    }, {
        children: jsxRuntime.jsx(HorizontalScroll, {
            children: jsxRuntime.jsx(Box, Object.assign({
                className: styles$2.tabListContainer
            }, {
                children: jsxRuntime.jsx(tabs.TabList, Object.assign({}, otherProps, {
                    "aria-label": ariaLabel,
                    className: styles$2.tabList
                }, {
                    children: react.Children.map(flattenChildren__default["default"](children), (child, i)=>/*#__PURE__*/ react.cloneElement(child, {
                            index: i
                        })
                    )
                }), void 0)
            }), void 0)
        }, void 0)
    }), void 0);
}

function TabPanel$1(props) {
    return jsxRuntime.jsx(tabs.TabPanel, Object.assign({}, props), void 0);
}

function TabPanel(props) {
    return jsxRuntime.jsx(tabs.TabPanels, Object.assign({}, props, {
        className: styles$2.tabPanels
    }), void 0);
}

function Tabs(props) {
    const { children , defaultIndex , keyboardActivation , variant  } = props;
    return jsxRuntime.jsx(tabs.Tabs, Object.assign({
        // @ts-ignore reach-ui forces the use of the TabsKeyboardActivation enum which is impratical
        keyboardActivation: keyboardActivation,
        defaultIndex: defaultIndex,
        className: variant && styles$2[variant]
    }, {
        children: children
    }), void 0);
}

var styles$1 = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","--breakpoint":"min-width: 48.063em","header":"TaskCard_header__J2K5Y","withLabel":"TaskCard_withLabel__sGCuL","label":"TaskCard_label__K6b3y","actions":"TaskCard_actions__zXES9","avatar":"TaskCard_avatar__5e2Fi","task":"TaskCard_task__zoUST","panelSlideDown":"TaskCard_panelSlideDown__6GaQ2"};

function IconWithText(props) {
    const { iconName , children  } = props;
    return jsxRuntime.jsxs(Flex, Object.assign({
        alignItems: "center",
        gap: "spacingSmall1X"
    }, {
        children: [
            jsxRuntime.jsx(Icon, {
                name: iconName,
                size: "sizeIconSmall2X",
                color: "colorFiftyShadesLight"
            }, void 0),
            jsxRuntime.jsx(Text, Object.assign({
                variant: "bodySmall1X",
                fontWeight: "fontWeightMedium"
            }, {
                children: children
            }), void 0)
        ]
    }), void 0);
}
function TasksList(props) {
    const { children  } = props;
    return jsxRuntime.jsx(Box, Object.assign({
        as: "ul",
        borderTopWidth: "borderWidthRoot",
        borderTopStyle: "solid",
        borderTopColor: "colorFiftyShadesLighter"
    }, {
        children: children
    }), void 0);
}
function Task(props) {
    const { children  } = props;
    return jsxRuntime.jsx(Box, Object.assign({
        as: "li",
        className: styles$1.task
    }, {
        children: children
    }), void 0);
}
function Completion(props) {
    const { isCompleted =false , isDisabled , onClick , colors , text , tooltipProps , testHook  } = props;
    const { hoverProps , isHovered  } = interactions.useHover({
        isDisabled
    });
    const { isFocused , focusProps  } = focus$1.useFocusRing();
    const isCircleFilled = isHovered || !isDisabled && isFocused;
    const iconSize = {
        base: 'sizeIconSmall',
        tablet: 'sizeIconRoot'
    };
    let iconColor = 'colorFiftyShadesLight';
    if (isDisabled && !isCompleted) {
        iconColor = 'colorFiftyShadesLighter';
    } else if (isCompleted || isHovered || isFocused) {
        iconColor = colors.root;
    }
    const button = jsxRuntime.jsxs(Box, Object.assign({
        as: "button",
        type: "button",
        display: "flex",
        alignItems: "center",
        gap: {
            base: 'spacingSmall',
            tablet: 'spacingRoot'
        },
        cursor: isDisabled ? 'not-allowed' : undefined,
        onClick: isDisabled ? undefined : onClick,
        "aria-disabled": isDisabled,
        testHook: testHook,
        "aria-pressed": isCompleted
    }, hoverProps, focusProps, {
        children: [
            jsxRuntime.jsx(Box, Object.assign({
                as: "span",
                backgroundColor: isCircleFilled ? colors.lightest : undefined,
                borderRadius: "borderRadiusCircle",
                display: "flex",
                alignItems: "center",
                size: iconSize,
                transition: "transitionRoot"
            }, {
                children: jsxRuntime.jsx(Icon, {
                    name: isCompleted ? 'circle-solid-check' : 'circle-check',
                    color: iconColor,
                    size: iconSize
                }, void 0)
            }), void 0),
            jsxRuntime.jsx(Text, Object.assign({
                fontFamily: "fontFamilyRoot",
                fontSize: "fontSizeSmall",
                color: isCompleted ? 'colorFiftyShadesDarker' : 'colorCoreText'
            }, {
                children: text
            }), void 0)
        ]
    }), void 0);
    return isDisabled ? jsxRuntime.jsx(Tooltip, Object.assign({}, tooltipProps, {
        children: button
    }), void 0) : button;
}
function TaskCard(props) {
    const { avatar , assignedTo , dueDate , label , linkProps , colors , message , meta , actions , attachments , completion , progress , children , withStatus , testHook , title , scheduledDate ,  } = props;
    const { hoverProps , isHovered  } = interactions.useHover({});
    const hasTasks = react.Children.toArray(children).length > 0;
    const hasFooter = completion || progress;
    const hasBodyOrFooter = title || message || attachments || hasTasks || hasFooter;
    const isTasksV3 = !!linkProps;
    const cardTitle = title && jsxRuntime.jsxs(Text, Object.assign({
        as: "h2",
        variant: "bodySmall1X",
        fontWeight: "fontWeightBold",
        color: isHovered ? 'colorFiftyShadesDarkest' : 'colorFiftyShadesDarker'
    }, {
        children: [
            title,
            jsxRuntime.jsx(HideVisually, {
                children: "."
            }, void 0)
        ]
    }), void 0);
    const cardMessage = message && jsxRuntime.jsx(Text, Object.assign({
        variant: "bodySmall1X",
        color: isHovered ? 'colorFiftyShadesDarker' : 'colorFiftyShadesDark',
        whiteSpace: "pre-line",
        testHook: testHook && `${testHook}-message`
    }, {
        children: linkProps ? jsxRuntime.jsx(MarkdownPreview, {
            children: message
        }, void 0) : message
    }), void 0);
    return jsxRuntime.jsx(Card$1, Object.assign({
        as: "article",
        padding: "spacingRoot",
        variant: "elevated",
        withHover: false,
        testHook: testHook
    }, {
        children: jsxRuntime.jsxs(Stack, {
            children: [
                jsxRuntime.jsxs(Stack, Object.assign({
                    spacing: "spacingLarge"
                }, {
                    children: [
                        meta,
                        jsxRuntime.jsxs("div", Object.assign({
                            className: cx__default["default"](styles$1.header, label && styles$1.withLabel)
                        }, {
                            children: [
                                jsxRuntime.jsxs(Flex, Object.assign({
                                    alignItems: "center",
                                    gap: "spacingRoot"
                                }, {
                                    children: [
                                        jsxRuntime.jsx(IconWithText, Object.assign({
                                            iconName: "calendar"
                                        }, {
                                            children: jsxRuntime.jsx(DateTime, {
                                                prefix: "Due ",
                                                value: dueDate,
                                                variant: "noWrap",
                                                withStatus: withStatus,
                                                testHook: testHook && `${testHook}-due-date`
                                            }, void 0)
                                        }), void 0),
                                        assignedTo && jsxRuntime.jsx(IconWithText, Object.assign({
                                            iconName: "user"
                                        }, {
                                            children: assignedTo
                                        }), void 0)
                                    ]
                                }), void 0),
                                label && jsxRuntime.jsx("div", Object.assign({
                                    className: styles$1.label
                                }, {
                                    children: jsxRuntime.jsx(Tag, Object.assign({
                                        fillColor: colors.lighter,
                                        variant: "filled",
                                        tooltip: scheduledDate && jsxRuntime.jsx(DateTime, {
                                            value: scheduledDate,
                                            variant: "noWrap"
                                        }, void 0)
                                    }, {
                                        children: label
                                    }), void 0)
                                }), void 0),
                                avatar && jsxRuntime.jsx("div", Object.assign({
                                    className: styles$1.avatar
                                }, {
                                    children: avatar
                                }), void 0),
                                actions && jsxRuntime.jsx("div", Object.assign({
                                    className: styles$1.actions
                                }, {
                                    children: actions
                                }), void 0)
                            ]
                        }), void 0)
                    ]
                }), void 0),
                hasBodyOrFooter && jsxRuntime.jsxs(Stack, {
                    children: [
                        isTasksV3 ? jsxRuntime.jsx(Link$1, Object.assign({}, linkProps, hoverProps, {
                            children: jsxRuntime.jsxs(Stack, Object.assign({
                                spacing: "spacingSmall"
                            }, {
                                children: [
                                    cardTitle,
                                    cardMessage,
                                    jsxRuntime.jsx(Text, Object.assign({
                                        as: "span",
                                        color: "inherit",
                                        fontSize: "fontSizeSmall"
                                    }, {
                                        children: linkProps.children
                                    }), void 0)
                                ]
                            }), void 0)
                        }), void 0) : jsxRuntime.jsxs(jsxRuntime.Fragment, {
                            children: [
                                cardTitle,
                                cardMessage
                            ]
                        }, void 0),
                        attachments,
                        (hasTasks || hasFooter) && /* Group tasks and footer to avoid the Stack spacing between the two. */ jsxRuntime.jsxs(Box, {
                            children: [
                                hasTasks && jsxRuntime.jsx(TasksList, {
                                    children: children
                                }, void 0),
                                hasFooter && jsxRuntime.jsxs(Stack, Object.assign({
                                    spacing: "spacingSmall"
                                }, {
                                    children: [
                                        jsxRuntime.jsx(Divider, {}, void 0),
                                        jsxRuntime.jsxs(Box, {
                                            children: [
                                                completion && jsxRuntime.jsx(Completion, Object.assign({}, completion, {
                                                    colors: colors,
                                                    testHook: testHook && `${testHook}-completion`
                                                }), void 0),
                                                progress && jsxRuntime.jsx(ProgressBar, Object.assign({}, progress, {
                                                    variant: "chunky",
                                                    color: colors.root,
                                                    role: "meter"
                                                }), void 0)
                                            ]
                                        }, void 0)
                                    ]
                                }), void 0)
                            ]
                        }, void 0)
                    ]
                }, void 0)
            ]
        }, void 0)
    }), void 0);
}
TaskCard.Task = Task;
TaskCard.Completion = Completion;

const theme = {
    borderWidths,
    breakpoints: themeBreakpoints,
    colors,
    fonts: fontFamilies,
    fontSizes,
    fontWeights,
    letterSpacings,
    lineHeights: {
        ...lineHeights,
        ...sizingsAvatar,
        ...sizingsIcon
    },
    radii: borderRadii,
    shadows: boxShadows,
    sizes: sizings,
    space: spacing,
    transitions,
    zIndices: zIndexes
};
function ThemeProvider(props) {
    const { children  } = props;
    return jsxRuntime.jsx(styled.ThemeProvider, Object.assign({
        theme: theme
    }, {
        children: children
    }), void 0);
}

function TextPost(props) {
    const { children , ariaLabelledBy , linkComponent , themeColor =tokens.colorCoreBrand , testHook ,  } = props;
    if (!children) return null;
    return jsxRuntime.jsx(Container, Object.assign({
        maxWidth: "sizeRoot",
        testHook: testHook
    }, {
        children: jsxRuntime.jsx(VerticalSpacing, Object.assign({
            size: "large8X"
        }, {
            children: jsxRuntime.jsx(MarkdownTheme, Object.assign({
                color: themeColor
            }, {
                children: jsxRuntime.jsx(Markdown, Object.assign({
                    as: "article",
                    className: markdownStyles.textPost,
                    aria: ariaLabelledBy ? {
                        'aria-labelledby': ariaLabelledBy
                    } : undefined,
                    linkComponent: linkComponent,
                    testHook: testHook && `${testHook}-article`
                }, {
                    children: children
                }), void 0)
            }), void 0)
        }), void 0)
    }), void 0);
}

function TextSnippet(props) {
    const { title , linkComponent , themeColor =colors.colorCoreBrand , testHook , ...questionProps } = props;
    return jsxRuntime.jsx(QuizQuestion, Object.assign({}, questionProps, {
        title: jsxRuntime.jsx(MarkdownTheme, Object.assign({
            color: themeColor
        }, {
            children: jsxRuntime.jsx(Markdown, Object.assign({
                className: markdownStyles.textPost,
                linkComponent: linkComponent
            }, {
                children: title
            }), void 0)
        }), void 0),
        testHook: testHook
    }), void 0);
}

var styles = {"--upToSmall1X":"max-width: 22.5em","--fromSmall1X":"min-width: 22.563em","--upToSmall":"max-width: 30em","--fromSmall":"min-width: 30.063em","--upToMedium":"max-width: 48em","--fromMedium":"min-width: 48.063em","--upToLarge":"max-width: 62em","--fromLarge":"min-width: 62.063em","--upToLarge1X":"max-width: 75em","--fromLarge1X":"min-width: 75.063em","root":"VideoPlayer_root__d3M-p","wrapper":"VideoPlayer_wrapper__Ho5oa","wrapperInner":"VideoPlayer_wrapperInner__u-7MQ","player":"VideoPlayer_player__a7KHr","swatch":"VideoPlayer_swatch__Y5IAC","isSwatchLoaded":"VideoPlayer_isSwatchLoaded__o5ZFx","swatchImage":"VideoPlayer_swatchImage__yC0FP","panelSlideDown":"VideoPlayer_panelSlideDown__md6c1"};

const playerColor = colors.colorCoreBrand;
const mapPropToWistiaEventName = (callbackName)=>callbackName.replace('on', '').toLowerCase()
;
function VideoPlayer(props) {
    const { testHook , videoId , ...eventProps } = props;
    const [isSwatchLoaded, setIsSwatchLoaded] = react.useState(false);
    const player = react.useRef(null);
    const bindEvents = react.useCallback(()=>{
        ___default["default"].forEach(eventProps, (eventProp, name)=>{
            var ref;
            const playerEvent = mapPropToWistiaEventName(name);
            (ref = player.current) === null || ref === void 0 ? void 0 : ref.bind(playerEvent, function() {
                for(var _len = arguments.length, data = new Array(_len), _key = 0; _key < _len; _key++){
                    data[_key] = arguments[_key];
                }
                // @ts-ignore TODO-TS[ENHANCEMENT] need to revisit this. `...data as Rest<eventProp>`
                // or event `...data as any` should work. may require a slight tweak in
                // behaviour, but should wait until runnable again
                // eslint-disable-next-line no-unused-expressions
                player.current && eventProp(player.current, ...data);
            });
        });
    }, [
        eventProps
    ]);
    const onReady = react.useCallback((wistiaPlayer)=>{
        if (!player.current) {
            player.current = wistiaPlayer;
            bindEvents();
        }
    }, [
        bindEvents
    ]);
    const onLoad = react.useCallback(()=>{
        window._wq = window._wq || [];
        window._wq.push({
            id: videoId,
            onReady
        });
    }, [
        onReady,
        videoId
    ]);
    useScript__default["default"]({
        src: '//fast.wistia.com/assets/external/E-v1.js',
        checkForExisting: true
    });
    useScript__default["default"]({
        src: `https://fast.wistia.com/embed/medias/${videoId}.jsonp`,
        onload: onLoad
    });
    // prevent the hook from running on mount
    const didMountRef = react.useRef(false);
    react.useEffect(()=>{
        if (didMountRef.current) {
            var ref;
            (ref = player.current) === null || ref === void 0 ? void 0 : ref.replaceWith(videoId, {
                transition: 'crossfade',
                playerColor
            });
            // player.replaceWith discards any bound event and doesn't provide any callback (e.g. onReady)
            setTimeout(()=>bindEvents()
            , 1000);
        } else {
            didMountRef.current = true;
        } // only runs when the videoId changes
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        videoId
    ]);
    react.useEffect(()=>{
        return ()=>{
            var ref1;
            ___default["default"].forEach(eventProps, (eventProp, name)=>{
                var ref;
                const playerEvent = mapPropToWistiaEventName(name);
                (ref = player.current) === null || ref === void 0 ? void 0 : ref.unbind(playerEvent);
            });
            (ref1 = player.current) === null || ref1 === void 0 ? void 0 : ref1.remove();
        }; // only runs on unmount to clean up the player
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    return jsxRuntime.jsx(Box, Object.assign({
        className: styles.root,
        testHook: testHook
    }, {
        children: jsxRuntime.jsx("div", Object.assign({
            className: styles.wrapper
        }, {
            children: jsxRuntime.jsx("div", Object.assign({
                className: styles.wrapperInner
            }, {
                children: jsxRuntime.jsx("div", Object.assign({
                    className: cx__default["default"](styles.player, 'wistia_embed', `wistia_async_${videoId}`, 'seo=false', 'videoFoam=true', `playerColor=${playerColor.replace('#', '')}`, 'wmode=transparent')
                }, {
                    children: jsxRuntime.jsx("div", Object.assign({
                        className: cx__default["default"]('wistia_swatch', cx__default["default"](styles.swatch, isSwatchLoaded && styles.isSwatchLoaded))
                    }, {
                        children: jsxRuntime.jsx("img", {
                            className: styles.swatchImage,
                            src: `https://fast.wistia.com/embed/medias/${videoId}/swatch`,
                            alt: "",
                            "aria-hidden": "true",
                            onLoad: ()=>setIsSwatchLoaded(true)
                            ,
                            "data-test": testHook && `${testHook}-swatch`
                        }, void 0)
                    }), void 0)
                }), void 0)
            }), void 0)
        }), void 0)
    }), void 0);
}

function VideoSnippet(props) {
    const { videoPlayer , title , duration , description , testHook , themeColor =colors.colorCoreBrand ,  } = props;
    const matches = useMedia({
        minWidth: breakpoints.breakpointMediumFrom
    });
    return jsxRuntime.jsxs("div", Object.assign({
        "data-test": testHook
    }, {
        children: [
            jsxRuntime.jsx(VerticalSpacing, Object.assign({
                size: matches ? 'large4X' : 'large2X'
            }, {
                children: videoPlayer
            }), void 0),
            jsxRuntime.jsxs(Container, Object.assign({
                maxWidth: "sizeRoot"
            }, {
                children: [
                    jsxRuntime.jsx(VerticalSpacing, Object.assign({
                        size: "large"
                    }, {
                        children: jsxRuntime.jsx(Heading, Object.assign({
                            size: "large",
                            label: duration,
                            testHook: testHook && `${testHook}-heading`
                        }, {
                            children: title
                        }), void 0)
                    }), void 0),
                    jsxRuntime.jsx(MarkdownTheme, Object.assign({
                        color: themeColor
                    }, {
                        children: jsxRuntime.jsx(Markdown, Object.assign({
                            className: markdownStyles.textPost,
                            testHook: testHook && `${testHook}-description`
                        }, {
                            children: description
                        }), void 0)
                    }), void 0)
                ]
            }), void 0)
        ]
    }), void 0);
}

const paths = Object.freeze({
    typekit: 'https://use.typekit.net/mzn8ecb.css'
});

Object.defineProperty(exports, 'positionDefault', {
  enumerable: true,
  get: function () { return Popover.positionDefault; }
});
Object.defineProperty(exports, 'positionMatchWidth', {
  enumerable: true,
  get: function () { return Popover.positionMatchWidth; }
});
Object.defineProperty(exports, 'positionRight', {
  enumerable: true,
  get: function () { return Popover.positionRight; }
});
exports.Accordion = Accordion;
exports.ActionDialog = ActionDialog;
exports.ActionPanel = ActionPanel;
exports.Alert = Alert;
exports.AlertDialog = AlertDialog;
exports.AttachmentList = AttachmentList;
exports.Autosuggest = Autosuggest;
exports.Avatar = Avatar;
exports.AvatarGroup = AvatarGroup;
exports.Box = Box;
exports.Button = Button;
exports.ButtonAdd = ButtonAdd;
exports.ButtonAddLoader = ButtonAddLoader;
exports.ButtonGroup = ButtonGroup;
exports.ButtonLoader = ButtonLoader;
exports.Card = Card$1;
exports.CardList = CardList;
exports.Checkbox = Checkbox;
exports.Column = Column;
exports.CompletionCount = CompletionCount;
exports.Container = Container;
exports.DatePicker = DatePicker;
exports.DateTime = DateTime;
exports.DateTimePicker = DateTimePicker;
exports.Dialog = Dialog$1;
exports.Diff = Diff;
exports.Divider = Divider;
exports.DragAndDropQuestion = DragAndDropQuestion;
exports.Drawer = Drawer;
exports.EmptyState = EmptyState;
exports.ExactAnswer = ExactAnswer;
exports.Flex = Flex;
exports.Grid = Grid;
exports.Heading = Heading;
exports.HeadingField = HeadingField;
exports.HelpInfo = HelpInfo;
exports.HelpText = HelpText;
exports.HideVisually = HideVisually;
exports.HorizontalScroll = HorizontalScroll;
exports.Icon = Icon;
exports.IconButton = IconButton;
exports.Illustration = Illustration;
exports.InfoTip = InfoTip;
exports.Insight = Insight;
exports.InsightGraph = InsightGraph;
exports.KebabList = KebabList;
exports.Label = Label;
exports.Markdown = Markdown;
exports.MarkdownPreview = MarkdownPreview;
exports.Media = Media;
exports.Menu = Menu;
exports.MenuItem = MenuItem;
exports.Modal = Modal;
exports.MultiSelect = MultiSelect;
exports.MultipleChoiceQuestion = MultipleChoiceQuestion;
exports.OptionGroup = OptionGroup;
exports.OptionGroupItem = OptionGroupItem;
exports.OptionGroupLoader = OptionGroupLoader;
exports.Panel = Panel$1;
exports.PhoneField = PhoneField;
exports.PostSummary = PostSummary;
exports.ProgressBar = ProgressBar;
exports.ProgressCircle = ProgressCircle;
exports.ProgressSummary = ProgressSummary;
exports.QuizDialog = QuizDialog;
exports.QuizExplanation = QuizExplanation;
exports.QuizHome = QuizHome;
exports.QuizQuestion = QuizQuestion;
exports.Radio = Radio;
exports.RadioGroup = RadioGroup;
exports.ResultSummary = ResultSummary;
exports.Search = Search;
exports.Select = Select;
exports.SelectField = SelectField;
exports.SelectGroup = SelectGroup;
exports.SelectTrigger = SelectTrigger;
exports.SelfMarkedQuestion = SelfMarkedQuestion;
exports.Skeleton = Skeleton;
exports.Spinner = Spinner;
exports.SplitButton = SplitButton;
exports.Stack = Stack;
exports.StatefulMenu = StatefulMenu;
exports.Strength = Strength;
exports.StrengthInfo = StrengthInfo;
exports.Switch = Switch;
exports.Tab = Tab;
exports.TabLink = TabLink;
exports.TabList = TabList;
exports.TabPanel = TabPanel$1;
exports.TabPanels = TabPanel;
exports.Table = Table;
exports.Tabs = Tabs;
exports.Tag = Tag;
exports.TaskCard = TaskCard;
exports.Text = Text;
exports.TextField = TextField;
exports.TextLoader = TextLoader;
exports.TextPost = TextPost;
exports.TextSnippet = TextSnippet;
exports.ThemeProvider = ThemeProvider;
exports.TimePicker = TimePicker;
exports.Tooltip = Tooltip;
exports.Truncate = Truncate;
exports.VerticalSpacing = VerticalSpacing;
exports.VideoPlayer = VideoPlayer;
exports.VideoSnippet = VideoSnippet;
exports.createPositionMaxWidth = createPositionMaxWidth;
exports.paths = paths;
exports.tokens = tokens;
exports.useDateTimePicker = useDateTimePicker;
exports.useId = useId;
exports.useMedia = useMedia;
exports.useSelfMarkedQuestion = useSelfMarkedQuestion;
