{"version":3,"file":"index.es.js","sources":["../src/context/container.ts","../src/context/shallow-clone.ts","../src/context/slice.ts","../src/plugin/ctx.ts","../src/plugin/pre.ts","../src/timing/clock.ts","../src/timing/timing.ts"],"sourcesContent":["/* Copyright 2021, Milkdown by Mirone. */\nimport { contextNotFound } from '@milkdown/exception';\n\nimport { $Slice, Slice } from './slice';\n\nexport type Container = {\n    readonly getSlice: <T>(slice: Slice<T>) => $Slice<T>;\n    readonly getSliceByName: <T>(name: string) => $Slice<T> | null;\n    readonly sliceMap: Map<symbol, $Slice>;\n};\n\nexport const createContainer = (): Container => {\n    const sliceMap: Map<symbol, $Slice> = new Map();\n\n    const getSlice = <T>(slice: Slice<T>): $Slice<T> => {\n        const context = sliceMap.get(slice.id);\n        if (!context) {\n            throw contextNotFound(slice.sliceName);\n        }\n        return context as $Slice<T>;\n    };\n\n    const getSliceByName = <T>(sliceName: string): $Slice<T> | null => {\n        const result = [...sliceMap.values()].find((x) => x.name === sliceName);\n        if (!result) {\n            return null;\n        }\n        return result as $Slice<T>;\n    };\n\n    return { getSlice, sliceMap, getSliceByName };\n};\n","/* Copyright 2021, Milkdown by Mirone. */\n\nexport const shallowClone = <T>(x: T): T => {\n    if (Array.isArray(x)) {\n        return [...(x as unknown[])] as unknown as T;\n    }\n    if (typeof x === 'object') {\n        return { ...x };\n    }\n    return x;\n};\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { ctxCallOutOfScope } from '@milkdown/exception';\n\nimport { shallowClone } from './shallow-clone';\n\nexport type $Slice<T = unknown> = {\n    readonly id: symbol;\n    readonly name: string;\n    readonly set: (value: T) => void;\n    readonly get: () => T;\n    readonly update: (updater: (prev: T) => T) => void;\n};\n\nexport type SliceMap = Map<symbol, $Slice>;\n\nexport type Slice<T> = {\n    readonly id: symbol;\n    readonly sliceName: string;\n    readonly _typeInfo: () => T;\n    (container: SliceMap, resetValue?: T): $Slice<T>;\n};\n\nexport const createSlice = <T>(value: T, name: string): Slice<T> => {\n    const id = Symbol('Context');\n\n    const factory = (container: SliceMap, resetValue = shallowClone(value)) => {\n        let inner = resetValue;\n\n        const context: $Slice<T> = {\n            name,\n            id,\n            set: (next) => {\n                inner = next;\n            },\n            get: () => inner,\n            update: (updater) => {\n                inner = updater(inner);\n            },\n        };\n        container.set(id, context as $Slice);\n        return context;\n    };\n    factory.sliceName = name;\n    factory.id = id;\n    factory._typeInfo = (): T => {\n        throw ctxCallOutOfScope();\n    };\n\n    return factory;\n};\n","/* Copyright 2021, Milkdown by Mirone. */\nimport type { $Slice, Container, Slice } from '../context';\nimport type { Clock, Timer } from '../timing';\n\n/**\n * The ctx object that can be accessed in plugin and action.\n */\nexport class Ctx {\n    #container: Container;\n    #clock: Clock;\n\n    constructor(container: Container, clock: Clock) {\n        this.#container = container;\n        this.#clock = clock;\n    }\n\n    /**\n     * Get the slice instance.\n     *\n     * @param slice - The slice needs to be used.\n     * @returns The slice instance.\n     */\n    readonly use = <T>(slice: Slice<T>): $Slice<T> => this.#container.getSlice(slice);\n\n    /**\n     * Get the instance value by string name.\n     *\n     * @param slice - The slice needs to be used.\n     * @returns The slice value.\n     */\n    readonly useByName = (name: string) => this.#container.getSliceByName(name);\n\n    /**\n     * Get the slice value.\n     *\n     * @param slice - The slice needs to be used.\n     * @returns The slice value.\n     */\n    readonly get = <T>(slice: Slice<T>) => this.use(slice).get();\n\n    /**\n     * Set the slice value.\n     *\n     * @param slice - The slice needs to be used.\n     * @returns\n     */\n    readonly set = <T>(slice: Slice<T>, value: T) => this.use(slice).set(value);\n\n    /**\n     * Update the slice by it's current value.\n     *\n     * @example\n     * ```\n     * update(NumberSlice, x => x + 1);\n     * ```\n     *\n     * @param slice - The slice needs to be used.\n     * @param updater - The update function, gets current value as parameter and returns new value.\n     * @returns\n     */\n    readonly update = <T>(slice: Slice<T>, updater: (prev: T) => T) => this.use(slice).update(updater);\n\n    /**\n     * Get the timer instance.\n     *\n     * @param timer - The timer needs to be used.\n     * @returns The timer instance.\n     */\n    readonly timing = (timer: Timer) => this.#clock.get(timer);\n\n    /**\n     * Wait for a timer to finish.\n     *\n     * @param timer - The timer needs to be used.\n     * @returns A promise that will be resolved when timer finish.\n     */\n    readonly wait = (timer: Timer) => this.timing(timer)();\n\n    /**\n     * Finish a timer\n     *\n     * @param timer - The timer needs to be finished.\n     * @returns\n     */\n    readonly done = (timer: Timer) => this.timing(timer).done();\n\n    /**\n     * Wait for a list of timers in target slice to be all finished.\n     *\n     * @param slice - The slice that holds a list of timer.\n     * @returns A promise that will be resolved when all timers finish.\n     */\n    readonly waitTimers = async (slice: Slice<Timer[]>) => {\n        await Promise.all(this.get(slice).map((x) => this.wait(x)));\n        return;\n    };\n}\n","/* Copyright 2021, Milkdown by Mirone. */\nimport type { Container, Slice } from '../context';\nimport type { Clock, Timer } from '../timing';\n\nexport class Pre {\n    #container: Container;\n    #clock: Clock;\n\n    constructor(container: Container, clock: Clock) {\n        this.#container = container;\n        this.#clock = clock;\n    }\n\n    /**\n     * Inject a context into current editor.\n     *\n     * @param ctx - The context needs to be injected.\n     * @param defaultValue - The default value of this context.\n     * @returns Pre.\n     */\n    readonly inject = <T>(ctx: Slice<T>, defaultValue?: T) => {\n        ctx(this.#container.sliceMap, defaultValue);\n        return this;\n    };\n\n    /**\n     * Start to record for a timer.\n     *\n     * @param timer - The timer needs to be recorded.\n     * @returns Pre.\n     */\n    readonly record = (timer: Timer) => {\n        timer(this.#clock.store);\n        return this;\n    };\n}\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { timerNotFound } from '@milkdown/exception';\n\nimport { Timing } from './timing';\n\nexport type ClockMap = Map<symbol, Timing>;\n\nexport type Timer = {\n    (store: ClockMap): Timing;\n    id: symbol;\n};\n\nexport type Clock = {\n    store: ClockMap;\n    get: (timer: Timer) => Timing;\n};\n\nexport const createClock = (): Clock => {\n    const store: ClockMap = new Map();\n    const get = (timer: Timer) => {\n        const meta = store.get(timer.id);\n        if (!meta) throw timerNotFound();\n        return meta;\n    };\n\n    return {\n        store,\n        get,\n    };\n};\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { ClockMap, Timer } from './clock';\n\nexport type Timing = {\n    (): Promise<void>;\n    done: () => void;\n};\n\nexport const createTimer = (name: string, timeout = 3000): Timer => {\n    const id = Symbol('Timer');\n\n    const timer = (store: ClockMap) => {\n        const data = Symbol(name);\n\n        const timing: Timing = () =>\n            new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    reject(`Timing ${name} timeout.`);\n                }, timeout);\n                addEventListener(name, (e) => {\n                    if (!(e instanceof CustomEvent)) {\n                        return;\n                    }\n                    if (e.detail.id === data) {\n                        resolve(undefined);\n                    }\n                });\n            });\n        timing.done = () => {\n            const event = new CustomEvent(name, { detail: { id: data } });\n            dispatchEvent(event);\n        };\n\n        store.set(id, timing);\n\n        return timing;\n    };\n    timer.id = id;\n\n    return timer;\n};\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAWa,kBAAkB,MAAiB;QACtC,WAAgC,IAAI;QAEpC,WAAW,CAAI,UAA+B;UAC1C,UAAU,SAAS,IAAI,MAAM;QAC/B,CAAC,SAAS;YACJ,gBAAgB,MAAM;AAAA;WAEzB;AAAA;QAGL,iBAAiB,CAAI,cAAwC;UACzD,SAAS,CAAC,GAAG,SAAS,UAAU,KAAK,CAAC,MAAM,EAAE,SAAS;QACzD,CAAC,QAAQ;aACF;AAAA;WAEJ;AAAA;SAGJ,EAAE,UAAU,UAAU;AAAA;MC5BpB,eAAe,CAAI,MAAY;MACpC,MAAM,QAAQ,IAAI;WACX,CAAC,GAAI;AAAA;MAEZ,OAAO,MAAM,UAAU;WAChB,mBAAK;AAAA;SAET;AAAA;MCaE,cAAc,CAAI,OAAU,SAA2B;QAC1D,KAAK,OAAO;QAEZ,UAAU,CAAC,WAAqB,aAAa,aAAa,WAAW;QACnE,QAAQ;UAEN,UAAqB;AAAA,MACvB;AAAA,MACA;AAAA,MACA,KAAK,CAAC,SAAS;gBACH;AAAA;AAAA,MAEZ,KAAK,MAAM;AAAA,MACX,QAAQ,CAAC,YAAY;gBACT,QAAQ;AAAA;AAAA;cAGd,IAAI,IAAI;WACX;AAAA;UAEH,YAAY;UACZ,KAAK;UACL,YAAY,MAAS;UACnB;AAAA;SAGH;AAAA;UCzCM;AAAA,EAIb,YAAY,WAAsB,OAAc;;;eAWjC,CAAI,UAA+B,+BAAgB,SAAS;qBAQtD,CAAC,SAAiB,+BAAgB,eAAe;eAQvD,CAAI,UAAoB,KAAK,IAAI,OAAO;eAQxC,CAAI,OAAiB,UAAa,KAAK,IAAI,OAAO,IAAI;kBAcnD,CAAI,OAAiB,YAA4B,KAAK,IAAI,OAAO,OAAO;kBAQxE,CAAC,UAAiB,2BAAY,IAAI;gBAQpC,CAAC,UAAiB,KAAK,OAAO;gBAQ9B,CAAC,UAAiB,KAAK,OAAO,OAAO;sBAQ/B,OAAO,UAA0B;YAC7C,QAAQ,IAAI,KAAK,IAAI,OAAO,IAAI,CAAC,MAAM,KAAK,KAAK;;;mCAjFrC;+BACJ;AAAA;AAAA;;;UCTL;AAAA,EAIb,YAAY,WAAsB,OAAc;;;kBAY9B,CAAI,KAAe,iBAAqB;UAClD,gCAAgB,UAAU;aACvB;AAAA;kBASO,CAAC,UAAiB;YAC1B,4BAAY;aACX;AAAA;oCAxBW;gCACJ;AAAA;AAAA;;;MCOT,cAAc,MAAa;QAC9B,QAAkB,IAAI;QACtB,MAAM,CAAC,UAAiB;UACpB,OAAO,MAAM,IAAI,MAAM;QACzB,CAAC;YAAY;WACV;AAAA;SAGJ;AAAA,IACH;AAAA,IACA;AAAA;AAAA;MCnBK,cAAc,CAAC,MAAc,UAAU,QAAgB;QAC1D,KAAK,OAAO;QAEZ,QAAQ,CAAC,UAAoB;UACzB,OAAO,OAAO;UAEd,SAAiB,MACnB,IAAI,QAAQ,CAAC,SAAS,WAAW;iBAClB,MAAM;eACN,UAAU;AAAA,SAClB;uBACc,MAAM,CAAC,MAAM;YACtB,eAAe,cAAc;;;YAG7B,EAAE,OAAO,OAAO,MAAM;kBACd;AAAA;AAAA;AAAA;WAIjB,OAAO,MAAM;YACV,QAAQ,IAAI,YAAY,MAAM,EAAE,QAAQ,EAAE,IAAI;oBACtC;AAAA;UAGZ,IAAI,IAAI;WAEP;AAAA;QAEL,KAAK;SAEJ;AAAA;;"}