{"version":3,"file":"index.es.js","sources":["../src/index.ts"],"sourcesContent":["/* Copyright 2021, Milkdown by Mirone. */\n\nconst functionReplacer = (_: string, value: unknown) => (typeof value === 'function' ? '[Function]' : value);\n\nconst stringify = (x: unknown): string => JSON.stringify(x, functionReplacer);\n\nexport const docTypeError = (type: unknown) => new Error(`Doc type error, unsupported type: ${stringify(type)}`);\n\nexport const contextNotFound = (name: string) => new Error(`Context \"${name}\" not found, do you forget to inject it?`);\n\nexport const timerNotFound = () => new Error('Timer not found, do you forget to record it?');\n\nexport const ctxCallOutOfScope = () => new Error('Should not call a context out of the plugin.');\n\nexport const createNodeInParserFail = (...args: unknown[]) => {\n    const message = args.reduce((msg, arg) => {\n        if (!arg) {\n            return msg;\n        }\n        const serialize = (x: unknown): string => {\n            if (Array.isArray(x)) {\n                return (x as unknown[]).map((y) => serialize(y)).join(', ');\n            }\n            if ((x as { toJSON(): Record<string, unknown> }).toJSON) {\n                return stringify((x as { toJSON(): Record<string, unknown> }).toJSON());\n            }\n\n            if ((x as { spec: string }).spec) {\n                return stringify((x as { spec: string }).spec);\n            }\n\n            return (x as { toString(): string }).toString();\n        };\n        return `${msg}, ${serialize(arg)}`;\n    }, 'Create prosemirror node from remark failed in parser') as string;\n\n    return new Error(message);\n};\n\nexport const stackOverFlow = () => new Error('Stack over flow, cannot pop on an empty stack.');\n\nexport const parserMatchError = (node: unknown) =>\n    new Error(`Cannot match target parser for node: ${stringify(node)}.`);\n\nexport const serializerMatchError = (node: unknown) =>\n    new Error(`Cannot match target serializer for node: ${stringify(node)}.`);\n\nexport const getAtomFromSchemaFail = (type: 'mark' | 'node', name: string) =>\n    new Error(`Cannot get ${type}: ${name} from schema.`);\n\nexport const expectDomTypeError = (node: unknown) => new Error(`Expect to be a dom, but get: ${stringify(node)}.`);\n\nexport const callCommandBeforeEditorView = () =>\n    new Error(\n        `You're trying to call a command before editor view initialized, make sure to get commandManager from ctx after editor view has been initialized`,\n    );\n\nexport const themeMustInstalled = () =>\n    new Error(\n        `It seems that no theme found in editor, please make sure you have use theme in front of all plugins.\nIf you prefer to use an empty theme, you can use \\`themeFactory({})\\`.`,\n    );\n"],"names":[],"mappings":"AAEA,MAAM,mBAAmB,CAAC,GAAW,UAAoB,OAAO,UAAU,aAAa,eAAe;AAEtG,MAAM,YAAY,CAAC,MAAuB,KAAK,UAAU,GAAG;MAE/C,eAAe,CAAC,SAAkB,IAAI,MAAM,qCAAqC,UAAU;MAE3F,kBAAkB,CAAC,SAAiB,IAAI,MAAM,YAAY;MAE1D,gBAAgB,MAAM,IAAI,MAAM;MAEhC,oBAAoB,MAAM,IAAI,MAAM;MAEpC,yBAAyB,IAAI,SAAoB;QACpD,UAAU,KAAK,OAAO,CAAC,KAAK,QAAQ;QAClC,CAAC,KAAK;aACC;AAAA;UAEL,YAAY,CAAC,MAAuB;UAClC,MAAM,QAAQ,IAAI;eACV,EAAgB,IAAI,CAAC,MAAM,UAAU,IAAI,KAAK;AAAA;UAErD,EAA4C,QAAQ;eAC9C,UAAW,EAA4C;AAAA;UAG7D,EAAuB,MAAM;eACvB,UAAW,EAAuB;AAAA;aAGrC,EAA6B;AAAA;WAElC,GAAG,QAAQ,UAAU;AAAA,KAC7B;SAEI,IAAI,MAAM;AAAA;MAGR,gBAAgB,MAAM,IAAI,MAAM;MAEhC,mBAAmB,CAAC,SAC7B,IAAI,MAAM,wCAAwC,UAAU;MAEnD,uBAAuB,CAAC,SACjC,IAAI,MAAM,4CAA4C,UAAU;MAEvD,wBAAwB,CAAC,MAAuB,SACzD,IAAI,MAAM,cAAc,SAAS;MAExB,qBAAqB,CAAC,SAAkB,IAAI,MAAM,gCAAgC,UAAU;MAE5F,8BAA8B,MACvC,IAAI,MACA;MAGK,qBAAqB,MAC9B,IAAI,MACA;AAAA;;"}